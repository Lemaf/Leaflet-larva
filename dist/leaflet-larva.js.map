{"version":3,"sources":["L.larva.js","package.js","Path.js","Polyline.js","../frame/package.js","../frame/Path.js","../ext/L.Polyline.js","Polyline.Move.js"],"names":["L","larva","version","getHeight","el","offsetHeight","getWidth","offsetWidth","handler","Path","Handler","extend","includes","Evented","prototype","initialize","path","options","setOptions","_path","Polyline","frame","Layer","statics","TOP_LEFT","TOP_MIDDLE","TOP_RIGHT","MIDDLE_LEFT","MIDDLE_MIDDLE","MIDDLE_RIGHT","BOTTOM_LEFT","BOTTOM_MIDDLE","BOTTOM_RIGHT","pane","_pathFrame","beforeAdd","map","getPane","createPane","getEvents","zoom","_onZoom","getDraggable","_draggable","getPosition","DomUtil","_el","hideHandle","i","arguments","length","_elements","style","display","onAdd","create","DomEvent","on","stop","tl","tm","tr","ml","mm","mr","bl","bm","br","id","Draggable","_updateHandles","onRemove","disable","off","remove","empty","bounds","getBounds","southEastPoint","_map","latLngToLayerPoint","getSouthEast","northWestPoint","getNorthWest","computedStyle","getComputedStyle","setPosition","x","parseInt","borderLeftWidth","borderRightWidth","y","borderTopWidth","borderBottomWidth","width","height","right","bottom","left","top","widthOf","heightOf","borderWidth","pathFrame","pathframe","forEachLatLng","include","fn","context","latlngs","getLatLngs","Array","isArray","reduce","array","concat","forEach","Move","addHooks","_frame","addTo","drag","_onDrag","dragstart","_onDragStart","dragend","_onDragEnd","enable","offset","subtract","_layerProjectedPoint","projected","newLatLng","latlng","_original","layerPointToLatLng","add","lat","lng","setLatLngs","clone","addInitHook","move"],"mappings":"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","file":"leaflet-larva.js","sourcesContent":["L.larva = {\n\tversion: '0.1.0',\n\n\tgetHeight: function (el) {\n\t\treturn el.offsetHeight;\n\t},\n\n\tgetWidth: function (el) {\n\t\treturn el.offsetWidth;\n\t}\n};","L.larva.handler = {\n\n};","/**\n * @requires package.js\n * \n * Base class for Path handlers\n */\nL.larva.handler.Path = L.Handler.extend({\n\n\tincludes: [L.Evented.prototype],\n\n\tinitialize: function (path, options) {\n\t\tL.setOptions(this, options);\n\n\t\tthis._path = path;\n\t}\n\n});","/**\n * @requires Path.js\n */\nL.larva.handler.Polyline = L.larva.handler.Path.extend({\n\n\toptions: {\n\t\t\n\t}\n\n});","L.larva.frame = {\n\n};","/**\n * @requires package.js\n */\nL.larva.frame.Path = L.Layer.extend({\n\n\tstatics: {\n\t\tTOP_LEFT: 'tl',\n\t\tTOP_MIDDLE: 'tm',\n\t\tTOP_RIGHT: 'tl',\n\t\tMIDDLE_LEFT: 'ml',\n\t\tMIDDLE_MIDDLE: 'mm',\n\t\tMIDDLE_RIGHT: 'mr',\n\t\tBOTTOM_LEFT: 'bl',\n\t\tBOTTOM_MIDDLE: 'bm',\n\t\tBOTTOM_RIGHT: 'br'\n\t},\n\n\toptions: {\n\t\tpane: 'llarvaPathframe'\n\t},\n\n\tinitialize: function (path) {\n\t\tif (path._pathFrame && path._pathFrame instanceof L.larva.frame.Path) {\n\t\t\treturn path._pathFrame;\n\t\t}\n\n\t\tpath._pathFrame = this;\n\t\tthis._path = path;\n\t},\n\n\tbeforeAdd: function (map) {\n\t\tif (!map.getPane(this.options.pane)) {\n\t\t\tmap.createPane(this.options.pane);\n\t\t}\n\t},\n\n\tgetEvents: function () {\n\t\treturn {\n\t\t\tzoom: this._onZoom\n\t\t};\n\t},\n\n\tgetDraggable: function () {\n\t\treturn this._draggable;\n\t},\n\n\tgetPosition: function() {\n\t\treturn L.DomUtil.getPosition(this._el);\n\t},\n\n\thideHandle: function() {\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tif (this._elements[arguments[i]]) {\n\t\t\t\tthis._elements[arguments[i]].style.display = 'none';\n\t\t\t}\n\t\t}\n\t},\n\n\tonAdd: function () {\n\t\tvar el = this._el = L.DomUtil.create('div', 'llarva-pathframe', this.getPane());\n\t\tL.DomEvent.on(el, 'mousedown', L.DomEvent.stop);\n\n\t\tthis._elements = {\n\t\t\ttl: null, tm: null, tr: null,\n\t\t\tml: null, mm: null, mr: null,\n\t\t\tbl: null, bm: null, br: null\n\t\t};\n\n\t\tfor (var id in this._elements) {\n\t\t\tthis._elements[id] = L.DomUtil.create('div', 'llarva-pathframe-' + id + \" \" + id, el);\n\t\t\tL.DomEvent.on(this._elements[id], 'mousedown click', L.DomEvent.stop);\n\t\t}\n\n\t\tthis._draggable = new L.Draggable(el);\n\n\t\tthis._updateHandles();\n\n\t\tthis._onZoom();\n\t},\n\n\tonRemove: function() {\n\t\tif (this._draggable) {\n\t\t\tthis._draggable.disable();\n\t\t}\n\n\t\tL.DomEvent.off(this._el, 'mousedown', L.DomEvent.stop);\n\n\t\tL.DomUtil.remove(this._el);\n\t\tL.DomUtil.empty(this._el);\n\n\t\tdelete this._el;\n\t},\n\n\t_onZoom: function () {\n\t\tvar bounds = this._path.getBounds();\n\n\t\tvar southEastPoint = this._map.latLngToLayerPoint(bounds.getSouthEast()),\n\t\tnorthWestPoint = this._map.latLngToLayerPoint(bounds.getNorthWest());\n\n\t\tvar computedStyle = getComputedStyle(this._el);\n\n\t\tL.DomUtil.setPosition(this._el, northWestPoint);\n\n\n\t\tvar x = parseInt(computedStyle.borderLeftWidth) + parseInt(computedStyle.borderRightWidth),\n\t\ty = parseInt(computedStyle.borderTopWidth) + parseInt(computedStyle.borderBottomWidth);\n\n\t\tthis._el.style.width = (southEastPoint.x - northWestPoint.x - x) + 'px';\n\t\tthis._el.style.height = (southEastPoint.y - northWestPoint.y - y) + 'px';\n\n\t\tthis.southEastPoint = southEastPoint;\n\t\tthis.northWestPoint = northWestPoint;\n\t},\n\n\t_updateHandles: function () {\n\t\tvar el, computedStyle, right, bottom, left, top;\n\t\tvar widthOf = L.larva.getWidth, heightOf = L.larva.getHeight;\n\n\t\tcomputedStyle = getComputedStyle(this._el);\n\n\t\tvar borderWidth = {\n\t\t\tbottom: 'borderBottomWidth',\n\t\t\tleft: 'borderLeftWidth',\n\t\t\tright: 'borderRightWidth',\n\t\t\ttop: 'borderTopWidth'\n\t\t};\n\n\t\tfor (var id in borderWidth) {\n\t\t\tborderWidth[id] = parseInt(computedStyle[borderWidth[id]]) / 2;\n\t\t}\n\n\t\tel = this._elements.br;\n\n\t\tright = (- (widthOf(el) / 2) - borderWidth.right) + 'px';\n\t\tbottom = (- (heightOf(el) / 2) - borderWidth.bottom) + 'px';\n\n\t\tL.extend(el.style, {\n\t\t\tright: right,\n\t\t\tbottom: bottom\n\t\t});\n\n\t\tel = this._elements.bm;\n\t\tleft = (-(widthOf(el) / 2)) + 'px';\n\t\tbottom = (- (heightOf(el) / 2) - borderWidth.bottom) + 'px';\n\n\t\tL.extend(el.style, {\n\t\t\tleft: '50%',\n\t\t\t'margin-left': left,\n\t\t\tbottom: bottom\n\t\t});\n\n\t\tel = this._elements.bl;\n\t\tleft = (-(widthOf(el) / 2) - borderWidth.left) + 'px';\n\t\tbottom = (- (heightOf(el) / 2) - borderWidth.bottom) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tleft: left,\n\t\t\tbottom: bottom\n\t\t});\n\n\t\tel = this._elements.mm;\n\t\tleft = -(widthOf(el) / 2) + 'px';\n\t\ttop = -(heightOf(el) / 2) + 'px';\n\t\tL.extend(el.style, {\n\t\t\ttop: '50%',\n\t\t\tleft: '50%',\n\t\t\t'margin-left': left,\n\t\t\t'margin-top': top\n\t\t});\n\n\t\tel = this._elements.ml;\n\t\ttop = -(heightOf(el) / 2) + 'px';\n\t\tleft = (-(widthOf(el) / 2) - borderWidth.left) + 'px';\n\t\tL.extend(el.style, {\n\t\t\ttop: '50%',\n\t\t\t'margin-top': top,\n\t\t\tleft: left\n\t\t});\n\n\t\tel = this._elements.mr;\n\t\tright = (- (widthOf(el) / 2) - borderWidth.right) + 'px';\n\t\ttop = -(heightOf(el) / 2) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tright: right,\n\t\t\ttop: '50%',\n\t\t\t'margin-top': top\n\t\t});\n\n\t\tel = this._elements.tr;\n\t\tright = (-(widthOf(el) / 2) - borderWidth.right) + 'px';\n\t\ttop = (-(heightOf(el) / 2) - borderWidth.top) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tright: right,\n\t\t\ttop: top\n\t\t});\n\n\t\tel = this._elements.tm;\n\t\ttop = (-(heightOf(el) / 2) - borderWidth.top) + 'px';\n\t\tleft = -(widthOf(el) / 2) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tleft: '50%',\n\t\t\t'margin-left': left,\n\t\t\ttop: top\n\t\t});\n\n\t\tel = this._elements.tl;\n\t\ttop = (-(heightOf(el) / 2) - borderWidth.top) + 'px';\n\t\tleft = (-(widthOf(el) / 2) - borderWidth.left) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tleft: left,\n\t\t\ttop: top\n\t\t});\n\t}\n});\n\nL.larva.pathFrame = function pathframe (path) {\n\treturn new L.larva.frame.Path(path);\n};","if (!L.Polyline.prototype.forEachLatLng) {\n\tL.Polyline.include({\n\n\t\tforEachLatLng: function (fn, context) {\n\t\t\tvar latlngs = this.getLatLngs();\n\n\t\t\tif (!latlngs.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (Array.isArray(latlngs[0])) {\n\t\t\t\t// nested array\n\n\t\t\t\tlatlngs = latlngs.reduce(function (array, latlngs) {\n\t\t\t\t\treturn array.concat(latlngs);\n\t\t\t\t}, []);\n\t\t\t}\n\n\t\t\tlatlngs.forEach(fn, context);\n\t\t}\n\n\t});\n}","/**\n * @requires Polyline.js\n * @requires ../frame/Path.js\n * @requires ../ext/L.Polyline.js\n * \n * @type {[type]}\n */\nL.larva.handler.Polyline.Move = L.larva.handler.Polyline.extend({\n\n\taddHooks: function() {\n\t\tthis._frame = L.larva.pathFrame(this._path).addTo(this._path._map);\n\t\tthis._draggable = this._frame.getDraggable();\n\n\t\tthis._frame.hideHandle(L.larva.frame.Path.MIDDLE_MIDDLE);\n\n\t\tthis._draggable.on({\n\t\t\tdrag: this._onDrag,\n\t\t\tdragstart: this._onDragStart,\n\t\t\tdragend: this._onDragEnd,\n\t\t}, this);\n\n\t\tthis._draggable.enable();\n\t},\n\n\t_onDrag: function () {\n\t\tvar map = this._path._map;\n\t\tvar offset = this._frame.getPosition().subtract(this._layerProjectedPoint);\n\t\tvar projected, newLatLng;\n\n\t\tthis._path.forEachLatLng(function (latlng) {\n\n\t\t\tprojected = map.latLngToLayerPoint(latlng._original);\n\t\t\tnewLatLng = map.layerPointToLatLng(projected.add(offset));\n\t\t\tlatlng.lat = newLatLng.lat;\n\t\t\tlatlng.lng = newLatLng.lng;\n\t\t});\n\n\t\tthis._path.setLatLngs(this._path.getLatLngs());\n\t},\n\n\t_onDragEnd: function () {\n\n\t},\n\n\t_onDragStart: function () {\n\t\tthis._layerProjectedPoint = this._path._map.latLngToLayerPoint(this._path.getBounds().getNorthWest());\n\t\tthis._path.forEachLatLng(function (latlng) {\n\t\t\tlatlng._original = latlng.clone();\n\t\t});\n\t}\n\n});\n\nL.Polyline.addInitHook(function () {\n\n\tif (!this.larva) {\n\t\tthis.larva = {};\n\t}\n\n\tthis.larva.move = new L.larva.handler.Polyline.Move(this);\n\n});"],"sourceRoot":"/source/"}