{"version":3,"sources":["L.larva.js","package.js","Path.js","Polyline.js","Polygon.js","../ext/L.Polyline.js","../frame/package.js","../frame/Path.js","../frame/Style.js","Polyline.Rotate.js","Polyline.Move.js","Polyline.Resize.js"],"names":["L","larva","version","getHeight","el","offsetHeight","getWidth","offsetWidth","handler","Path","Handler","extend","includes","Evented","prototype","initialize","path","frameStyle","options","setOptions","_path","_frameStyle","addInitHook","Polyline","Polygon","forEachLatLng","include","fn","context","latlngs","getLatLngs","length","Array","isArray","reduce","array","concat","forEach","updateBounds","bounds","_bounds","LatLngBounds","latlng","frame","Layer","statics","TOP_LEFT","TOP_MIDDLE","TOP_RIGHT","MIDDLE_LEFT","MIDDLE_MIDDLE","MIDDLE_RIGHT","BOTTOM_LEFT","BOTTOM_MIDDLE","BOTTOM_RIGHT","pane","_pathFrame","beforeAdd","map","getPane","createPane","getEvents","zoom","_updateFrame","getDraggable","_draggable","getFrameClientRect","_el","getBoundingClientRect","getHandle","id","_handles","getPosition","DomUtil","hideHandle","i","arguments","style","display","onAdd","create","DomEvent","on","_onStart","_id","Draggable","START","join","_draggables","_updateHandles","onRemove","disable","off","stop","remove","empty","setStyle","oldStyle","_style","hide","draggable","enable","removeClass","className","addClass","_updateDraggable","evt","fire","sourceEvent","target","document","MOVE","type","_onMove","END","_onEnd","body","left","offsetLeft","top","offsetTop","marginLeft","parseInt","marginTop","setPosition","point","getBounds","southEastPoint","_map","latLngToLayerPoint","getSouthEast","northWestPoint","getNorthWest","computedStyle","getComputedStyle","x","borderLeftWidth","borderRightWidth","y","borderTopWidth","borderBottomWidth","width","height","right","bottom","widthOf","heightOf","borderWidth","br","bm","bl","mm","ml","mr","tr","tm","tl","pathframe","Style","Move","Resize","Rotate","addHooks","_frame","addTo","position","touches","centerBounding","_centerElement","cx","cy","clientX","j","clientY","crossProduct","_vector","sin","Math","sqrt","cos","deg","acos","PI","console","log","frameBounding","framePosition","dx","dy","projected","newLatLng","_original","layerPointToLatLng","lat","lng","redraw","centerElement","targetBounding","vector","clone","rotate","_onDragStart","_onDragMove","_onDragEnd","mouseEvt","pos","_axis","undefined","_startPoint","add","_startNorthWest","startPos","move","xscale","yscale","_origin","screenX","screenY","ctrlKey","max","abs","invertX","invertY","bounding","origin","resize"],"mappings":"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","file":"leaflet-larva.js","sourcesContent":["L.larva = {\n\tversion: '0.1.0',\n\n\tgetHeight: function (el) {\n\t\treturn el.offsetHeight;\n\t},\n\n\tgetWidth: function (el) {\n\t\treturn el.offsetWidth;\n\t}\n};","L.larva.handler = {\n\n};","/**\n * @requires package.js\n * \n * Base class for Path handlers\n */\nL.larva.handler.Path = L.Handler.extend({\n\n\tincludes: [L.Evented.prototype],\n\n\tinitialize: function (path, frameStyle, options) {\n\t\tL.setOptions(this, options);\n\n\t\tthis._path = path;\n\t\tthis._frameStyle = frameStyle;\n\t}\n\n});\n\nL.Path.addInitHook(function () {\n\tthis.larva = {};\n});","/**\n * @requires Path.js\n */\nL.larva.handler.Polyline = L.larva.handler.Path.extend({\n\n\toptions: {\n\t\t\n\t}\n\n});","/**\n * @requires Polyline.js\n */\nL.larva.handler.Polygon = L.larva.handler.Polyline.extend({\n\n});","if (!L.Polyline.prototype.forEachLatLng) {\n\tL.Polyline.include({\n\n\t\tforEachLatLng: function (fn, context) {\n\t\t\tvar latlngs = this.getLatLngs();\n\n\t\t\tif (!latlngs.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (Array.isArray(latlngs[0])) {\n\t\t\t\t// nested array\n\n\t\t\t\tlatlngs = latlngs.reduce(function (array, latlngs) {\n\t\t\t\t\treturn array.concat(latlngs);\n\t\t\t\t}, []);\n\t\t\t}\n\n\t\t\tlatlngs.forEach(fn, context);\n\t\t}\n\t});\n}\n\nif (!L.Polyline.prototype.updateBounds) {\n\tL.Polyline.include({\n\n\t\tupdateBounds: function () {\n\t\t\tvar bounds = this._bounds = new L.LatLngBounds();\n\n\t\t\tthis.forEachLatLng(function (latlng) {\n\t\t\t\tbounds.extend(latlng);\n\t\t\t});\n\t\t}\n\n\t});\n}","L.larva.frame = {\n\n};","/**\n * @requires package.js\n */\nL.larva.frame.Path = L.Layer.extend({\n\n\tstatics: {\n\t\tTOP_LEFT: 'tl',\n\t\tTOP_MIDDLE: 'tm',\n\t\tTOP_RIGHT: 'tr',\n\t\tMIDDLE_LEFT: 'ml',\n\t\tMIDDLE_MIDDLE: 'mm',\n\t\tMIDDLE_RIGHT: 'mr',\n\t\tBOTTOM_LEFT: 'bl',\n\t\tBOTTOM_MIDDLE: 'bm',\n\t\tBOTTOM_RIGHT: 'br'\n\t},\n\n\toptions: {\n\t\tpane: 'llarvaPathframe'\n\t},\n\n\tinitialize: function (path) {\n\t\tif (path._pathFrame && path._pathFrame instanceof L.larva.frame.Path) {\n\t\t\treturn path._pathFrame;\n\t\t}\n\n\t\tpath._pathFrame = this;\n\t\tthis._path = path;\n\t},\n\n\tbeforeAdd: function (map) {\n\t\tif (!map.getPane(this.options.pane)) {\n\t\t\tmap.createPane(this.options.pane);\n\t\t}\n\t},\n\n\tgetEvents: function () {\n\t\treturn {\n\t\t\tzoom: this._updateFrame\n\t\t};\n\t},\n\n\tgetDraggable: function () {\n\t\treturn this._draggable;\n\t},\n\n\tgetFrameClientRect: function () {\n\t\treturn this._el.getBoundingClientRect();\n\t},\n\n\tgetHandle: function (id) {\n\t\treturn this._handles[id];\n\t},\n\n\tgetPosition: function(id) {\n\t\tif (id) {\n\t\t\treturn L.DomUtil.getPosition(this._handles[id]);\n\t\t} else {\n\t\t\treturn L.DomUtil.getPosition(this._el);\n\t\t}\n\t},\n\n\thideHandle: function() {\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tif (this._handles[arguments[i]]) {\n\t\t\t\tthis._handles[arguments[i]].style.display = 'none';\n\t\t\t}\n\t\t}\n\t},\n\n\tonAdd: function () {\n\t\tvar el = this._el = L.DomUtil.create('div', 'llarva-pathframe', this.getPane());\n\t\tL.DomEvent.on(el, 'mousedown', this._onStart, this);\n\n\t\tthis._handles = {};\n\n\t\t['tl','tm','tr','ml','mm','mr','bl','bm','br'].forEach(function (id) {\n\n\t\t\tthis._handles[id] = L.DomUtil.create('div', 'llarva-' + id, el);\n\t\t\tthis._handles[id]._id = id;\n\t\t\tL.DomEvent.on(this._handles[id], L.Draggable.START.join(' '), this._onStart, this);\n\n\t\t}, this);\n\n\t\tthis._draggable = new L.Draggable(el);\n\t\tthis._draggables = {};\n\t\tthis._updateFrame();\n\t\tthis._updateHandles();\n\t},\n\n\tonRemove: function() {\n\t\tvar id;\n\n\t\tif (this._draggable) {\n\t\t\tthis._draggable.disable();\n\t\t}\n\n\t\tfor (id in this._draggables) {\n\t\t\tthis._draggables[id].disable();\n\t\t}\n\n\t\tL.DomEvent.off(this._el, 'mousedown click', L.DomEvent.stop);\n\n\t\tfor (id in this._handles) {\n\t\t\tL.DomEvent.off(this._handles[id], 'mousedown click', L.DomEvent.stop);\n\t\t}\n\n\t\tL.DomUtil.remove(this._el);\n\t\tL.DomUtil.empty(this._el);\n\n\t\tdelete this._el;\n\t},\n\n\tsetStyle: function (style) {\n\t\tvar id, el, oldStyle = this._style;\n\n\t\tfor (id in this._handles) {\n\t\t\tel = this._handles[id];\n\t\t\tel.style.display = 'block';\n\n\t\t\tif (this._draggables[id]) {\n\t\t\t\tthis._draggables[id].disable();\n\t\t\t\tdelete this._draggables[id];\n\t\t\t}\n\n\t\t\t// if (oldStyle) {\n\t\t\t// \tL.DomUtil.removeClass(el, oldStyle.className + '-' + id);\n\t\t\t// }\n\n\t\t\t// L.DomUtil.addClass(el, style.className + '-' + id);\n\n\t\t\tif (style[id]) {\n\t\t\t\tif (style[id].hide) {\n\t\t\t\t\tel.style.display = 'none';\n\t\t\t\t}\n\n\t\t\t\tif (style[id].draggable) {\n\t\t\t\t\tthis._draggables[id] = new L.Draggable(el);\n\t\t\t\t\tthis._draggables[id].enable();\n\t\t\t\t\tL.DomEvent.off(el, 'mousedown click', L.DomEvent.stop);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (oldStyle) {\n\t\t\tL.DomUtil.removeClass(this._el, oldStyle.className);\n\t\t}\n\n\t\tL.DomUtil.addClass(this._el, style.className);\n\n\t\tthis._style = style;\n\n\t\tthis._updateHandles();\n\n\t\tfor (id in this._draggables) {\n\t\t\tthis._updateDraggable(id);\n\t\t}\n\t},\n\n\tupdateBounds: function () {\n\t\tthis._updateFrame();\n\t},\n\n\t_onStart: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\n\t\tthis.fire('drag:start', {\n\t\t\tsourceEvent: evt,\n\t\t\tid: evt.target._id\n\t\t});\n\n\t\tL.DomEvent\n\t\t\t.on(document, L.Draggable.MOVE[evt.type], this._onMove, this)\n\t\t\t.on(document, L.Draggable.END[evt.type], this._onEnd, this);\n\n\t\tL.DomUtil.addClass(document.body, 'leaflet-dragging');\n\t},\n\n\t_onMove: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\n\t\tthis.fire('drag:move', {\n\t\t\tsourceEvent: evt\n\t\t});\n\t},\n\n\t_onEnd: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\n\t\tfor (var id in L.Draggable.MOVE) {\n\t\t\tL.DomEvent\n\t\t\t\t.off(document, L.Draggable.MOVE[id], this._onMove, this)\n\t\t\t\t.off(document, L.Draggable.END[id], this._onEnd, this);\n\t\t}\n\n\t\tL.DomUtil.removeClass(document.body, 'leaflet-dragging');\n\n\t\tthis.fire('drag:end', {\n\t\t\tsourceEvent: evt\n\t\t});\n\t},\n\n\t_updateDraggable: function (id) {\n\t\tvar el = this._handles[id];\n\t\tvar left = el.offsetLeft,\n\t\ttop = el.offsetTop;\n\n\t\tif (el.style.marginLeft) {\n\t\t\tleft -= parseInt(el.style.marginLeft);\n\t\t}\n\n\t\tif (el.style.marginTop) {\n\t\t\ttop -= parseInt(el.style.marginTop);\n\t\t}\n\n\t\tL.extend(el.style, {\n\t\t\tleft: '0px', top: '0px'\n\t\t});\n\n\t\tL.DomUtil.setPosition(el, L.point(left, top));\n\t},\n\n\t_updateFrame: function () {\n\t\tvar bounds = this._path.getBounds();\n\n\t\tvar southEastPoint = this._map.latLngToLayerPoint(bounds.getSouthEast()),\n\t\tnorthWestPoint = this._map.latLngToLayerPoint(bounds.getNorthWest());\n\n\t\tvar computedStyle = getComputedStyle(this._el);\n\n\t\tL.DomUtil.setPosition(this._el, northWestPoint);\n\n\n\t\tvar x = parseInt(computedStyle.borderLeftWidth) + parseInt(computedStyle.borderRightWidth),\n\t\ty = parseInt(computedStyle.borderTopWidth) + parseInt(computedStyle.borderBottomWidth);\n\n\t\tthis._el.style.width = (southEastPoint.x - northWestPoint.x - x) + 'px';\n\t\tthis._el.style.height = (southEastPoint.y - northWestPoint.y - y) + 'px';\n\n\t\tthis.southEastPoint = southEastPoint;\n\t\tthis.northWestPoint = northWestPoint;\n\t},\n\n\t_updateHandles: function () {\n\t\tvar el, computedStyle, right, bottom, left, top;\n\t\tvar widthOf = L.larva.getWidth, heightOf = L.larva.getHeight;\n\n\t\tcomputedStyle = getComputedStyle(this._el);\n\n\t\tvar borderWidth = {\n\t\t\tbottom: 'borderBottomWidth',\n\t\t\tleft: 'borderLeftWidth',\n\t\t\tright: 'borderRightWidth',\n\t\t\ttop: 'borderTopWidth'\n\t\t};\n\n\t\tfor (var id in borderWidth) {\n\t\t\tborderWidth[id] = parseInt(computedStyle[borderWidth[id]]) / 2;\n\t\t}\n\n\t\tel = this._handles.br;\n\n\t\tright = (- (widthOf(el) / 2) - borderWidth.right) + 'px';\n\t\tbottom = (- (heightOf(el) / 2) - borderWidth.bottom) + 'px';\n\n\t\tL.extend(el.style, {\n\t\t\tright: right,\n\t\t\tbottom: bottom\n\t\t});\n\n\t\tel = this._handles.bm;\n\t\tleft = (-(widthOf(el) / 2)) + 'px';\n\t\tbottom = (- (heightOf(el) / 2) - borderWidth.bottom) + 'px';\n\n\t\tL.extend(el.style, {\n\t\t\tleft: '50%',\n\t\t\t'margin-left': left,\n\t\t\tbottom: bottom\n\t\t});\n\n\t\tel = this._handles.bl;\n\t\tleft = (-(widthOf(el) / 2) - borderWidth.left) + 'px';\n\t\tbottom = (- (heightOf(el) / 2) - borderWidth.bottom) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tleft: left,\n\t\t\tbottom: bottom\n\t\t});\n\n\t\tel = this._handles.mm;\n\t\tleft = -(widthOf(el) / 2) + 'px';\n\t\ttop = -(heightOf(el) / 2) + 'px';\n\t\tL.extend(el.style, {\n\t\t\ttop: '50%',\n\t\t\tleft: '50%',\n\t\t\t'margin-left': left,\n\t\t\t'margin-top': top\n\t\t});\n\n\t\tel = this._handles.ml;\n\t\ttop = -(heightOf(el) / 2) + 'px';\n\t\tleft = (-(widthOf(el) / 2) - borderWidth.left) + 'px';\n\t\tL.extend(el.style, {\n\t\t\ttop: '50%',\n\t\t\t'margin-top': top,\n\t\t\tleft: left\n\t\t});\n\n\t\tel = this._handles.mr;\n\t\tright = (- (widthOf(el) / 2) - borderWidth.right) + 'px';\n\t\ttop = -(heightOf(el) / 2) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tright: right,\n\t\t\ttop: '50%',\n\t\t\t'margin-top': top\n\t\t});\n\n\t\tel = this._handles.tr;\n\t\tright = (-(widthOf(el) / 2) - borderWidth.right) + 'px';\n\t\ttop = (-(heightOf(el) / 2) - borderWidth.top) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tright: right,\n\t\t\ttop: top\n\t\t});\n\n\t\tel = this._handles.tm;\n\t\ttop = (-(heightOf(el) / 2) - borderWidth.top) + 'px';\n\t\tleft = -(widthOf(el) / 2) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tleft: '50%',\n\t\t\t'margin-left': left,\n\t\t\ttop: top\n\t\t});\n\n\t\tel = this._handles.tl;\n\t\ttop = (-(heightOf(el) / 2) - borderWidth.top) + 'px';\n\t\tleft = (-(widthOf(el) / 2) - borderWidth.left) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tleft: left,\n\t\t\ttop: top\n\t\t});\n\t}\n});\n\nL.larva.frame.path = function pathframe (path) {\n\treturn new L.larva.frame.Path(path);\n};","/**\n * @requires package.js\n */\n\nL.larva.frame.Style = {\n\t\n};\n\nL.larva.frame.Style.Move = {\n\tclassName: 'llarva-pathframe-move',\n\t\n\ttl: {\n\t\thide: true\n\t},\n\n\ttr: {\n\t\thide: true\n\t},\n\n\tmm: {\n\t\thide: true\n\t},\n\n\tbl: {\n\t\thide: true\n\t},\n\n\tbr: {\n\t\thide: true\n\t}\n};\n\nL.larva.frame.Style.Resize = {\n\tclassName: 'llarva-pathframe-resize',\n\tmm: {\n\t\thide: true\n\t}\n};\n\nL.larva.frame.Style.Rotate = {\n\tclassName: 'llarva-pathframe-rotate',\n\ttm: {\n\t\thide: true\n\t},\n\n\tml: {\n\t\thide: true\n\t},\n\n\tmr: {\n\t\thide: true\n\t},\n\n\tbm: {\n\t\thide: true\n\t},\n\n\tmm: {\n\t\tdraggable: true\n\t}\n};","/**\n * @requires Polygon.js\n * @requires ../ext/L.Polyline.js\n * @requires ../frame/Path.js\n * @requires ../frame/Style.js\n */\n\nL.larva.handler.Polyline.Rotate = L.larva.handler.Polyline.extend({\n\n\taddHooks: function () {\n\t\tthis._frame = new L.larva.frame.Path(this._path);\n\t\tthis._frame.addTo(this._path._map);\n\n\t\tthis._frame.setStyle(this._frameStyle);\n\n\t\tthis._frame.on('drag:start', this._onStart, this);\n\t},\n\n\t_onEnd: function () {\n\t\tthis._frame\n\t\t\t.off('drag:move', this._onMove, this)\n\t\t\t.off('drag:end', this._onEnd, this);\n\t},\n\n\t_onMove: function (evt) {\n\t\tvar position = evt.sourceEvent.touches ? evt.sourceEvent.touches[0] : evt.sourceEvent;\n\n\t\tvar centerBounding = this._centerElement.getBoundingClientRect();\n\n\t\tvar cx = (centerBounding.left + centerBounding.width / 2),\n\t\t    cy = (centerBounding.top + centerBounding.height / 2);\n\n\n\t\tvar i = position.clientX - cx,\n\t\t    j = position.clientY - cy;\n\n\t\tvar crossProduct = this._vector.i * j + this._vector.j * i;\n\n\t\tvar sin = crossProduct / Math.sqrt(i * i + j * j);\n\t\tvar cos = Math.sqrt(1 - (sin * sin));\n\n\t\tvar deg = Math.acos(cos) * 180 / Math.PI;\n\n\t\tconsole.log(deg);\n\n\t\tvar frameBounding = this._frame.getFrameClientRect(),\n\t\t    framePosition = this._frame.getPosition();\n\n\t\tcx =  (cx - frameBounding.left) + framePosition.x;\n\t\tcy = (cy - frameBounding.top) + framePosition.y;\n\n\n\t\tvar dx = cx * (1 - cos) + cy * sin,\n\t\t    dy = cy * (1 - cos) - cx * sin;\n\n\t\tvar projected, newLatLng;\n\n\t\tthis._path.forEachLatLng(function (latlng) {\n\t\t\tprojected = this._path._map.latLngToLayerPoint(latlng._original);\n\n\t\t\tprojected.x = projected.x * cos - projected.y * sin + dx;\n\t\t\tprojected.y = projected.x * sin + projected.y * cos + dy;\n\n\t\t\tnewLatLng = this._path._map.layerPointToLatLng(projected);\n\t\t\tlatlng.lat = newLatLng.lat;\n\t\t\tlatlng.lng = newLatLng.lng;\n\t\t}, this);\n\n\t\tthis._path.updateBounds();\n\t\t//this._frame.updateBounds();\n\t\tthis._path.redraw();\n\t},\n\n\t_onStart: function (evt) {\n\t\tif (!evt.id || evt.id === L.larva.frame.Path.MIDDLE_MIDDLE) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar centerElement = this._centerElement = this._frame.getHandle(L.larva.frame.Path.MIDDLE_MIDDLE);\n\n\t\tvar centerBounding = centerElement.getBoundingClientRect(),\n\t\t    targetBounding = evt.sourceEvent.target.getBoundingClientRect();\n\n\t\tvar vector = this._vector = {\n\t\t\ti: (targetBounding.left + targetBounding.width / 2) - (centerBounding.left - centerBounding.width / 2),\n\t\t\tj: (targetBounding.top + targetBounding.height / 2) - (centerBounding.top - centerBounding.height / 2)\n\t\t};\n\n\t\tvector.length = Math.sqrt(vector.i * vector.i + vector.j * vector.j);\n\n\t\tvector.i = vector.i / vector.length;\n\t\tvector.j = vector.j / vector.length;\n\n\t\tthis._path.forEachLatLng(function (latlng) {\n\t\t\tlatlng._original = latlng.clone();\n\t\t});\n\n\t\tthis._frame\n\t\t\t.on('drag:move', this._onMove, this)\n\t\t\t.on('drag:end', this._onEnd, this);\n\t}\n\n});\n\nL.Polyline.addInitHook(function () {\n\tthis.larva.rotate = new L.larva.handler.Polyline.Rotate(this, L.larva.frame.Style.Rotate);\n});","/**\n * @requires Polyline.js\n * @requires ../frame/Path.js\n * @requires ../ext/L.Polyline.js\n * @requires ../frame/Style.js\n * \n * @type {[type]}\n */\nL.larva.handler.Polyline.Move = L.larva.handler.Polyline.extend({\n\n\taddHooks: function() {\n\t\tthis._frame = L.larva.frame.path(this._path).addTo(this._path._map);\n\n\t\tthis._frame.setStyle(this._frameStyle);\n\n\t\tthis._frame.on('drag:start', this._onDragStart, this);\n\t\tthis._frame.on('drag:move', this._onDragMove, this);\n\t\tthis._frame.on('drag:end', this._onDragEnd, this);\n\t},\n\n\t_onDragEnd: function () {\n\t},\n\n\t_onDragMove: function (evt) {\n\t\tvar mouseEvt = evt.sourceEvent;\n\t\tvar pos = mouseEvt.touches && mouseEvt.touches[0] ? mouseEvt.touches[0] : mouseEvt;\n\n\t\tvar dx = 0, dy = 0;\n\n\t\tif (this._axis === undefined) {\n\t\t\tdx = pos.clientX - this._startPoint.x;\n\t\t\tdy = pos.clientY - this._startPoint.y;\n\t\t} else {\n\t\t\tif (this._axis === 'x') {\n\t\t\t\tdx = pos.clientX - this._startPoint.x;\n\t\t\t} else if (this._axis === 'y') {\n\t\t\t\tdy = pos.clientY - this._startPoint.y;\n\t\t\t}\n\t\t}\n\n\t\tif (dx === 0 && dy === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar vector = L.point(dx, dy), projected, newLatLng;\n\n\t\tthis._path.forEachLatLng(function (latlng) {\n\t\t\tprojected = this._path._map.latLngToLayerPoint(latlng._original);\n\t\t\tprojected = projected.add(vector);\n\t\t\tnewLatLng = this._path._map.layerPointToLatLng(projected);\n\t\t\tlatlng.lat = newLatLng.lat;\n\t\t\tlatlng.lng = newLatLng.lng;\n\t\t}, this);\n\n\t\tthis._path.updateBounds();\n\t\tthis._frame.updateBounds();\n\t\tthis._path.redraw();\n\n\t},\n\n\t_onDragStart: function (evt) {\n\t\tthis._startNorthWest = this._path.getBounds().getNorthWest();\n\t\tvar mouseEvt = evt.sourceEvent;\n\t\tvar startPos = mouseEvt.touches && mouseEvt.touches[0] ? mouseEvt.touches[0]: mouseEvt;\n\t\tthis._startPoint = L.point(startPos.clientX, startPos.clientY);\n\n\t\tthis._path.forEachLatLng(function (latlng) {\n\t\t\tlatlng._original = latlng.clone();\n\t\t});\n\n\t\tswitch (evt.id) {\n\t\t\tcase L.larva.frame.Path.TOP_MIDDLE:\n\t\t\tcase L.larva.frame.Path.BOTTOM_MIDDLE:\n\t\t\t\tthis._axis = 'y';\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.MIDDLE_LEFT:\n\t\t\tcase L.larva.frame.Path.MIDDLE_RIGHT:\n\t\t\t\tthis._axis = 'x';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tdelete this._axis;\n\t\t}\n\t}\n\n});\n\nL.Polyline.addInitHook(function () {\n\tthis.larva.move = new L.larva.handler.Polyline.Move(this, L.larva.frame.Style.Move);\n});","/**\n * @requires Polygon.js\n * @requires ../frame/Path.js\n * @requires ../ext/L.Polyline.js\n * @requires ../frame/Style.js\n */\nL.larva.handler.Polyline.Resize = L.larva.handler.Polyline.extend({\n\n\taddHooks: function () {\n\t\tthis._frame = L.larva.frame.path(this._path).addTo(this._path._map);\n\n\t\tthis._frame.setStyle(this._frameStyle);\n\n\t\tthis._frame.on('drag:start', this._onDragStart, this);\n\t\tthis._frame.on('drag:move', this._onDragMove, this);\n\t\tthis._frame.on('drag:end', this._onDragEnd, this);\n\t},\n\n\t_onDragEnd: function () {\n\n\t},\n\n\t_onDragMove: function (evt) {\n\t\tvar position = evt.sourceEvent.touches ? evt.sourceEvent.touches[0] : evt.sourceEvent;\n\n\n\t\tvar xscale = null, yscale = null;\n\n\t\tif (this._origin.screenX !== undefined) {\n\t\t\txscale = (position.clientX - this._origin.screenX) / this._origin.width;\n\t\t}\n\n\t\tif (this._origin.screenY !== undefined) {\n\t\t\tyscale = (position.clientY - this._origin.screenY) / this._origin.height;\n\t\t}\n\n\t\tif (xscale === null && yscale === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (xscale !== null && yscale !== null) {\n\t\t\tif (evt.sourceEvent.ctrlKey) {\n\t\t\t\tyscale = xscale = Math.max(Math.abs(xscale), Math.abs(yscale));\n\n\t\t\t\tif (this._origin.invertX) {\n\t\t\t\t\txscale = -xscale;\n\t\t\t\t}\n\n\t\t\t\tif (this._origin.invertY) {\n\t\t\t\t\tyscale = -yscale;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar projected, newLatLng;\n\n\t\tthis._path.forEachLatLng(function (latlng) {\n\t\t\tprojected = this._path._map.latLngToLayerPoint(latlng._original);\n\n\t\t\tif (xscale !== null) {\n\t\t\t\tif (this._origin.invertX) {\n\t\t\t\t\tprojected.x = this._origin.x - projected.x;\n\t\t\t\t} else {\n\t\t\t\t\tprojected.x = projected.x - this._origin.x;\n\t\t\t\t}\n\n\t\t\t\tprojected.x = projected.x * xscale + this._origin.x;\n\t\t\t}\n\n\n\t\t\tif (yscale !== null) {\n\n\t\t\t\tif (this._origin.invertY) {\n\t\t\t\t\tprojected.y = this._origin.y - projected.y;\n\t\t\t\t} else {\n\t\t\t\t\tprojected.y = projected.y - this._origin.y;\n\t\t\t\t}\n\n\t\t\t\tprojected.y = projected.y * yscale + this._origin.y;\n\t\t\t}\n\n\t\t\tnewLatLng = this._path._map.layerPointToLatLng(projected);\n\t\t\tlatlng.lat = newLatLng.lat;\n\t\t\tlatlng.lng = newLatLng.lng;\n\t\t}, this);\n\n\t\tthis._path.updateBounds();\n\t\tthis._frame.updateBounds();\n\t\tthis._path.redraw();\n\n\t},\n\n\t_onDragStart: function (evt) {\n\n\t\tthis._path.forEachLatLng(function (latlng) {\n\t\t\tlatlng._original = latlng.clone();\n\t\t});\n\n\n\t\tvar bounding = this._frame.getFrameClientRect();\n\n\t\tvar origin = this._origin = {\n\t\t\theight: bounding.height,\n\t\t\twidth: bounding.width\n\t\t};\n\n\t\tvar position = this._frame.getPosition();\n\n\t\tswitch (evt.id) {\n\t\t\tcase L.larva.frame.Path.TOP_LEFT:\n\t\t\t\torigin.x = position.x + bounding.width;\n\t\t\t\torigin.y = position.y + bounding.height;\n\t\t\t\torigin.screenX = bounding.right;\n\t\t\t\torigin.screenY = bounding.bottom;\n\t\t\t\torigin.invertX = true;\n\t\t\t\torigin.invertY = true;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.TOP_MIDDLE:\n\t\t\t\torigin.y = position.y + bounding.height;\n\t\t\t\torigin.screenY = bounding.bottom;\n\t\t\t\torigin.invertY = true;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.TOP_RIGHT:\n\t\t\t\torigin.x = position.x;\n\t\t\t\torigin.y = position.y + bounding.height;\n\t\t\t\torigin.screenX = bounding.left;\n\t\t\t\torigin.screenY = bounding.bottom;\n\t\t\t\torigin.invertY = true;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.MIDDLE_LEFT:\n\t\t\t\torigin.x = position.x + bounding.width;\n\t\t\t\torigin.screenX = bounding.right;\n\t\t\t\torigin.invertX = true;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.MIDDLE_RIGHT:\n\t\t\t\torigin.x = position.x;\n\t\t\t\torigin.screenX = bounding.left;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.BOTTOM_LEFT:\n\t\t\t\torigin.x = position.x + bounding.width;\n\t\t\t\torigin.y = position.y;\n\t\t\t\torigin.screenX = bounding.right;\n\t\t\t\torigin.screenY = bounding.top;\n\t\t\t\torigin.invertX = true;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.BOTTOM_MIDDLE:\n\t\t\t\torigin.y = position.y;\n\t\t\t\torigin.screenY = bounding.top;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.BOTTOM_RIGHT:\n\t\t\t\torigin.x = position.x;\n\t\t\t\torigin.y = position.y;\n\t\t\t\torigin.screenY = bounding.top;\n\t\t\t\torigin.screenX = bounding.left;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n});\n\nL.Polyline.addInitHook(function () {\n\tthis.larva.resize = new L.larva.handler.Polyline.Resize(this, L.larva.frame.Style.Resize);\n});"],"sourceRoot":"/source/"}