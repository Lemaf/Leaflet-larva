{"version":3,"sources":["L.larva.js","../frame/package.js","../frame/Rect.js","../frame/RECT_STYLE.js","../ext/L.Polyline.js","package.js","Path.js","Polyline.js","Polyline.Transform.js","Polyline.Rotate.js","Polyline.Move.js","Polyline.Resize.js","../ext/L.Polygon.js","../Style.js","../frame/Vertices.js","Polyline.Edit.js","Polygon.js","../Util.js","New.js","../ext/L.LatLngBounds.js","../UndoRedo.js","../Command.js","../Undoable.js","../l10n.js","New.Polyline.js","New.Polygon.js","Polygon.Edit.js"],"names":["L","larva","version","CTRL_KEY","NOP","getEventKeyCode","event","keyCode","key","getHeight","el","offsetHeight","getSourceEvent","evt","sourceEvent","touches","getWidth","offsetWidth","isFlat","latlngs","Array","isArray","LatLng","project","latlng","point","Projection","Mercator","y","unproject","clone","frame","Rect","Layer","extend","statics","TOP_LEFT","TOP_MIDDLE","TOP_RIGHT","MIDDLE_LEFT","MIDDLE_MIDDLE","MIDDLE_RIGHT","BOTTOM_LEFT","BOTTOM_MIDDLE","BOTTOM_RIGHT","options","pane","initialize","path","_path","beforeAdd","map","getPane","createPane","getComputedStyle","id","_handles","_el","getEvents","zoom","_onMapZoom","getDraggable","_draggable","getFrameClientRect","getBoundingClientRect","getHandle","getPosition","DomUtil","hideHandle","i","arguments","length","style","display","onAdd","create","DomEvent","on","Draggable","START","join","_onStart","forEach","_id","_draggables","_updateFrame","_updateHandles","onRemove","disable","off","stop","remove","empty","setElementStyle","styles","element","setStyle","oldStyle","_style","hide","draggable","enable","removeClass","className","addClass","_updateDraggable","updateBounds","prototype","slice","call","_onEnd","MOVE","document","_onMove","END","body","fire","handle","target","type","left","offsetLeft","top","offsetTop","marginLeft","parseInt","marginTop","setPosition","zoomChanged","maintainHandles","currentPosition","handlePosition","bounds","getBounds","southEastPoint","_map","latLngToLayerPoint","getSouthEast","northWestPoint","getNorthWest","computedStyle","add","subtract","x","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth","oldWidth","oldHeight","width","height","scaleBy","right","bottom","widthOf","heightOf","borderWidth","br","bm","bl","mm","ml","mr","tr","tm","tl","rect","_rectFrame","RECT_STYLE","RESIZE","ROTATE","Polyline","forEachLatLng","include","fn","context","j","getLatLngs","_bounds","LatLngBounds","getType","POLYLINE","MULTIPOLYLINE","_latlngs","forEachLine","Error","setBounds","handler","Path","Handler","includes","Evented","setOptions","getMap","layerPointToWorldPoint","a","b","undefined","layerPointToLatLng","addInitHook","backupLatLngs","_original","Transform","noUpdate","frameStyle","_frameStyle","transform","transformed","original","newLatLng","args","concat","transformPoint","apply","lat","lng","_frame","redraw","Rotate","addHooks","addTo","sin","cos","dx","dy","position","centerBounding","_centerElement","cx","cy","clientX","clientY","Math","sqrt","_vector","frameBounding","framePosition","worldCenterPoint","centerElement","targetBounding","vector","rotate","Move","_previousCursor","cursor","_getEventWorldPoint","bounding","worldPoint","_startPosition","ctrlKey","altKey","dxy","min","abs","move","Resize","xscale","yscale","_reference","screenX","invertX","screenY","invertY","xyscale","max","reference","resize","Polygon","POLYGON","MULTIPOLYGON","k","polygons","polygon","hole","push","forEachPolygon","l","Style","Class","STYLES","TYPE","fillOpacity","opacity","fillColor","color","source","styleName","_transform","cV","d","multiplyBy","transfom","currentValue","delta","rgb","getRGB","convertColorComponent","r","g","substr","component","toString","Vertices","colorFactor","handleClassName","opacityFactor","tolerance","simplifyZoom","moveend","_updateView","zoomend","_onZoomEnd","getLatLng","handleId","_latlng","getPathType","getPoint","_point","_container","offsetParent","removeHandle","evtName","_onHandleDblclick","prev","_prev","next","_next","_isPolygon","_first","_last","first","index","_lines","handles","indexOf","splice","_aura","removeLayer","polyline","startAura","latlng0","noClip","isPolygon","_position","stopAura","aura","updateHandle","_updateHandlePosition","_createHandles","isHole","_isHole","_handle","stamp","originalEvent","newPoint","line","shell","holes","_subtract","_showHandles","pointsToShow","getPixelBounds","pixelOrigin","getPixelOrigin","points","PolyUtil","clipPolygon","filter","lineClip","LineUtil","clipSegment","doSimplify","getZoom","getMaxZoom","simplify","appendChild","vertices","_verticesFrame","Edit","maxDist","_onHandleStart","_onHandleDbclick","_onDblclick","removeHooks","_searchNearestPoint","found","searchNearestPointIn","_addVertex","founds","_removeLatLng","_onAuraEnd","mouseEventToLayerPoint","shiftKey","_onHandleEnd","_onHandleMove","_origin","_originalPoint","_handleId","closed","aPoint","bPoint","dist","pointToSegmentDistance","closestPointOnSegment","Util","pointIsInside","isInside","New","allowFireOnMap","fireOnMap","eventName","eventObject","latLng","latLngBounds","getSouthWest","getNorthEast","UndoRedo","limit","_onDo","_bottom","_current","_top","_total","undo","current","_op","unapply","_p","redo","_n","command","_push","_pop","newBottom","previous","Mixin","undoRedo","Map","allowUndo","undoOptions","Command","undoable","desc","doFn","undoFn","_undoable","_desc","_doFn","_undoFn","_args","Undoable","_do","l10n","newPolylinePushLatLng","maxDragCount","minSqrDistance","handleStyle","border","layerOptions","onMove","threshold","addLatLng","_toAddLatLng","_pushLatLng","_pane","_halfHandleSize","Point","_newLatLng","_previewLayer","_lineLayer","_onMapMouseMove","_onMapDragStart","_onMapDrag","_onHandleMousedown","_onHandleMouseup","_onHandleDblClick","_lastDown","createLayer","setLatLngs","layer","_newLayer","_currentBounds","eventPoint","_dragCount","_previewBounds","_doPushLatLng","_undoPushLatLng","toAddLatLng","addLayer","pop","newPolyline","newPolygon","allowMakeHole","makeHoleCursor","newHoleOptions","_onPathClickHole","search","_onNewHole","_shellHole","_makingHole","_newPolygonHole","p","layerPoint","_restoreCursor","_setHoleCursor","edit"],"mappings":"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","file":"leaflet-larva.js","sourcesContent":["/**\n * Leaflet namespace\n * @namespace L\n */\n\n/**\n * Leaflet Larva namespace\n *\n * @namespace L.larva\n * \n */\nL.larva = {\n\tversion: '0.1.1',\n\n\tCTRL_KEY: 17,\n\n\tNOP: function () {},\n\n\t/**\n\t * @param  {Event} event\n\t * @return {Number}\n\t */\n\tgetEventKeyCode: function (event) {\n\t\treturn event.keyCode || event.key;\n\t},\n\n\t/**\n\t * @param  {HTMLElement} el\n\t * @return {Number}\n\t */\n\tgetHeight: function (el) {\n\t\treturn el.offsetHeight;\n\t},\n\n\t/**\n\t * @param  {L.Event} evt\n\t * @return {Event}\n\t */\n\tgetSourceEvent: function (evt) {\n\t\tif (evt.sourceEvent) {\n\t\t\tevt = evt.sourceEvent;\n\t\t}\n\n\t\treturn !evt.touches ?\n\t\t        evt : evt.touches[0];\n\t},\n\n\t/**\n\t * @param  {HTMLElement} el\n\t * @return {Number}\n\t */\n\tgetWidth: function (el) {\n\t\treturn el.offsetWidth;\n\t},\n\n\t/**\n\t * @param  {L.LatLng[]}  latlngs\n\t * @return {Boolean}\n\t */\n\tisFlat: function (latlngs) {\n\n\t\tif (Array.isArray(latlngs)) {\n\t\t\tif (latlngs[0] instanceof L.LatLng) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t},\n\n\tproject: function (latlng) {\n\t\tvar point = L.Projection.Mercator.project(latlng);\n\t\tpoint.y = 0 - point.y;\n\t\treturn point;\n\t},\n\n\tunproject: function (point) {\n\t\tpoint = point.clone();\n\t\tpoint.y = 0 - point.y;\n\t\treturn L.Projection.Mercator.unproject(point);\n\t}\n};","/**\n * @namespace L.larva.frame\n */\nL.larva.frame = {\n\n};","/**\n * @requires package.js\n *\n */\n\n/**\n * @class \n * Rectangle frame, create a frame to layer edition with handlers\n * \n * @extends L.Layer\n *\n * @param {L.Path} path\n * @param {Object} [options]\n * @param {String} options.pane Where in leaflet pane\n */\nL.larva.frame.Rect = L.Layer.extend(\n/** @lends L.larva.frame.Rect.prototype */\n{\n\n\tstatics: {\n\t\tTOP_LEFT: 'tl',\n\t\tTOP_MIDDLE: 'tm',\n\t\tTOP_RIGHT: 'tr',\n\t\tMIDDLE_LEFT: 'ml',\n\t\tMIDDLE_MIDDLE: 'mm',\n\t\tMIDDLE_RIGHT: 'mr',\n\t\tBOTTOM_LEFT: 'bl',\n\t\tBOTTOM_MIDDLE: 'bm',\n\t\tBOTTOM_RIGHT: 'br'\n\t},\n\n\toptions: {\n\t\tpane: 'llarva-frame'\n\t},\n\n\tinitialize: function (path) {\n\t\tthis._path = path;\n\t},\n\n\tbeforeAdd: function (map) {\n\t\tif (!map.getPane(this.options.pane)) {\n\t\t\tmap.createPane(this.options.pane);\n\t\t}\n\t},\n\n\t/**\n\t * Returns Computed CSS Style of an handler\n\t * @param  {String} id\n\t * @return {CSSStyleDeclaration}\n\t */\n\tgetComputedStyle: function(id) {\n\t\tif (id) {\n\t\t\tif (this._handles[id]) {\n\t\t\t\treturn getComputedStyle(this._handles[id]);\n\t\t\t}\n\t\t} else {\n\t\t\treturn getComputedStyle(this._el);\n\t\t}\n\t},\n\n\tgetEvents: function () {\n\t\treturn {\n\t\t\tzoom: this._onMapZoom\n\t\t};\n\t},\n\n\tgetDraggable: function () {\n\t\treturn this._draggable;\n\t},\n\n\tgetFrameClientRect: function () {\n\t\treturn this._el.getBoundingClientRect();\n\t},\n\n\tgetHandle: function (id) {\n\t\treturn this._handles[id];\n\t},\n\n\tgetPosition: function(id) {\n\t\tif (id) {\n\t\t\treturn L.DomUtil.getPosition(this._handles[id]);\n\t\t} else {\n\t\t\treturn L.DomUtil.getPosition(this._el);\n\t\t}\n\t},\n\n\thideHandle: function() {\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tif (this._handles[arguments[i]]) {\n\t\t\t\tthis._handles[arguments[i]].style.display = 'none';\n\t\t\t}\n\t\t}\n\t},\n\n\tonAdd: function () {\n\t\tvar el = this._el = L.DomUtil.create('div', 'llarva-pathframe', this.getPane());\n\t\tL.DomEvent.on(el, L.Draggable.START.join(' '), this._onStart, this);\n\n\t\tthis._handles = {};\n\n\t\t['tl','tm','tr','ml','mm','mr','bl','bm','br'].forEach(function (id) {\n\n\t\t\tthis._handles[id] = L.DomUtil.create('div', 'llarva-' + id, el);\n\t\t\tthis._handles[id]._id = id;\n\t\t\tL.DomEvent.on(this._handles[id], L.Draggable.START.join(' '), this._onStart, this);\n\n\t\t}, this);\n\n\t\tthis._draggable = new L.Draggable(el);\n\t\tthis._draggables = {};\n\t\tthis._updateFrame(false);\n\t\tthis._updateHandles();\n\t},\n\n\tonRemove: function() {\n\t\tvar id;\n\n\t\tif (this._draggable) {\n\t\t\tthis._draggable.disable();\n\t\t}\n\n\t\tfor (id in this._draggables) {\n\t\t\tthis._draggables[id].disable();\n\t\t}\n\n\t\tL.DomEvent.off(this._el, 'mousedown click', L.DomEvent.stop);\n\n\t\tfor (id in this._handles) {\n\t\t\tL.DomEvent.off(this._handles[id], 'mousedown click', L.DomEvent.stop);\n\t\t}\n\n\t\tL.DomUtil.remove(this._el);\n\t\tL.DomUtil.empty(this._el);\n\n\t\tdelete this._el;\n\t},\n\n\tsetElementStyle: function (styles, element) {\n\t\tif (!element) {\n\t\t\tL.extend(this._el.style, styles);\n\t\t} else {\n\t\t\telement = this._handles[element];\n\n\t\t\tif (element) {\n\t\t\t\tL.extend(element.style, styles);\n\t\t\t}\n\t\t}\n\t},\n\n\tsetStyle: function (style) {\n\t\tvar id, el, oldStyle = this._style;\n\n\t\tfor (id in this._handles) {\n\t\t\tel = this._handles[id];\n\t\t\tel.style.display = 'block';\n\n\t\t\tif (this._draggables[id]) {\n\t\t\t\tthis._draggables[id].disable();\n\t\t\t\tdelete this._draggables[id];\n\t\t\t}\n\n\t\t\t// if (oldStyle) {\n\t\t\t// \tL.DomUtil.removeClass(el, oldStyle.className + '-' + id);\n\t\t\t// }\n\n\t\t\t// L.DomUtil.addClass(el, style.className + '-' + id);\n\n\t\t\tif (style[id]) {\n\t\t\t\tif (style[id].hide) {\n\t\t\t\t\tel.style.display = 'none';\n\t\t\t\t}\n\n\t\t\t\tif (style[id].draggable) {\n\t\t\t\t\tthis._draggables[id] = new L.Draggable(el);\n\t\t\t\t\tthis._draggables[id].enable();\n\t\t\t\t\tL.DomEvent.off(el, 'mousedown click', L.DomEvent.stop);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (oldStyle) {\n\t\t\tL.DomUtil.removeClass(this._el, oldStyle.className);\n\t\t}\n\n\t\tL.DomUtil.addClass(this._el, style.className);\n\n\t\tthis._style = style;\n\n\t\tthis._updateHandles();\n\n\t\tfor (id in this._draggables) {\n\t\t\tthis._updateDraggable(id);\n\t\t}\n\t},\n\n\tupdateBounds: function () {\n\t\tthis._updateFrame(false, Array.prototype.slice.call(arguments, 0));\n\t},\n\n\t_onEnd: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\n\t\tfor (var id in L.Draggable.MOVE) {\n\t\t\tL.DomEvent\n\t\t\t\t.off(document, L.Draggable.MOVE[id], this._onMove, this)\n\t\t\t\t.off(document, L.Draggable.END[id], this._onEnd, this);\n\t\t}\n\n\t\tL.DomUtil.removeClass(document.body, 'leaflet-dragging');\n\n\t\tthis.fire('drag:end', {\n\t\t\tsourceEvent: evt\n\t\t});\n\t},\n\n\t_onMapZoom: function () {\n\t\tthis._updateFrame(true);\n\t},\n\n\t_onMove: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\n\t\tthis.fire('drag:move', {\n\t\t\tsourceEvent: evt\n\t\t});\n\t},\n\n\t_onStart: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\n\t\tthis.fire('drag:start', {\n\t\t\tsourceEvent: evt,\n\t\t\thandle: evt.target._id\n\t\t});\n\n\t\tL.DomEvent\n\t\t\t.on(document, L.Draggable.MOVE[evt.type], this._onMove, this)\n\t\t\t.on(document, L.Draggable.END[evt.type], this._onEnd, this);\n\n\t\tL.DomUtil.addClass(document.body, 'leaflet-dragging');\n\t},\n\n\t_updateDraggable: function (id) {\n\t\tvar el = this._handles[id];\n\t\tvar left = el.offsetLeft,\n\t\ttop = el.offsetTop;\n\n\t\tif (el.style.marginLeft) {\n\t\t\tleft -= parseInt(el.style.marginLeft);\n\t\t}\n\n\t\tif (el.style.marginTop) {\n\t\t\ttop -= parseInt(el.style.marginTop);\n\t\t}\n\n\t\tL.extend(el.style, {\n\t\t\tleft: '0px', top: '0px'\n\t\t});\n\n\t\tL.DomUtil.setPosition(el, L.point(left, top));\n\t},\n\n\t_updateFrame: function (zoomChanged, maintainHandles) {\n\t\tvar id,\n\t\t    currentPosition = L.DomUtil.getPosition(this._el),\n\t\t    handle,\n\t\t    handlePosition;\n\n\t\tvar bounds = this._path.getBounds();\n\n\t\tvar southEastPoint = this._map.latLngToLayerPoint(bounds.getSouthEast()),\n\t\tnorthWestPoint = this._map.latLngToLayerPoint(bounds.getNorthWest());\n\n\t\tvar computedStyle = getComputedStyle(this._el);\n\n\t\tif (maintainHandles && currentPosition && maintainHandles.length) {\n\t\t\tfor (var i=0; i<maintainHandles.length; i++) {\n\t\t\t\thandle = this._handles[maintainHandles[i]];\n\t\t\t\tif (handle && (handlePosition = L.DomUtil.getPosition(handle))) {\n\t\t\t\t\thandlePosition = handlePosition.add(currentPosition);\n\t\t\t\t\tL.DomUtil.setPosition(handle, handlePosition.subtract(northWestPoint));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tL.DomUtil.setPosition(this._el, northWestPoint);\n\n\t\tvar x = parseInt(computedStyle.borderLeftWidth) + parseInt(computedStyle.borderRightWidth),\n\t\ty = parseInt(computedStyle.borderTopWidth) + parseInt(computedStyle.borderBottomWidth);\n\n\t\tvar oldWidth, oldHeight;\n\t\tif (zoomChanged) {\n\t\t\toldWidth = L.larva.getWidth(this._el);\n\t\t\toldHeight = L.larva.getHeight(this._el);\n\t\t}\n\n\t\tthis._el.style.width = (southEastPoint.x - northWestPoint.x - x) + 'px';\n\t\tthis._el.style.height = (southEastPoint.y - northWestPoint.y - y) + 'px';\n\n\t\tif (zoomChanged) {\n\n\t\t\tfor (id in this._handles) {\n\t\t\t\thandle = this._handles[id];\n\t\t\t\thandlePosition = L.DomUtil.getPosition(handle);\n\n\t\t\t\tif (handlePosition) {\n\t\t\t\t\tL.DomUtil.setPosition(handle, handlePosition.scaleBy(L.point(\n\t\t\t\t\t\tL.larva.getWidth(this._el) / oldWidth, \n\t\t\t\t\t\tL.larva.getHeight(this._el) / oldHeight\n\t\t\t\t\t)));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.southEastPoint = southEastPoint;\n\t\tthis.northWestPoint = northWestPoint;\n\t},\n\n\t_updateHandles: function () {\n\t\tvar el, computedStyle, right, bottom, left, top;\n\t\tvar widthOf = L.larva.getWidth, heightOf = L.larva.getHeight;\n\n\t\tcomputedStyle = getComputedStyle(this._el);\n\n\t\tvar borderWidth = {\n\t\t\tbottom: 'borderBottomWidth',\n\t\t\tleft: 'borderLeftWidth',\n\t\t\tright: 'borderRightWidth',\n\t\t\ttop: 'borderTopWidth'\n\t\t};\n\n\t\tfor (var id in borderWidth) {\n\t\t\tborderWidth[id] = parseInt(computedStyle[borderWidth[id]]) / 2;\n\t\t}\n\n\t\tel = this._handles.br;\n\n\t\tright = (- (widthOf(el) / 2) - borderWidth.right) + 'px';\n\t\tbottom = (- (heightOf(el) / 2) - borderWidth.bottom) + 'px';\n\n\t\tL.extend(el.style, {\n\t\t\tright: right,\n\t\t\tbottom: bottom\n\t\t});\n\n\t\tel = this._handles.bm;\n\t\tleft = (-(widthOf(el) / 2)) + 'px';\n\t\tbottom = (- (heightOf(el) / 2) - borderWidth.bottom) + 'px';\n\n\t\tL.extend(el.style, {\n\t\t\tleft: '50%',\n\t\t\t'margin-left': left,\n\t\t\tbottom: bottom\n\t\t});\n\n\t\tel = this._handles.bl;\n\t\tleft = (-(widthOf(el) / 2) - borderWidth.left) + 'px';\n\t\tbottom = (- (heightOf(el) / 2) - borderWidth.bottom) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tleft: left,\n\t\t\tbottom: bottom\n\t\t});\n\n\t\tel = this._handles.mm;\n\t\tleft = -(widthOf(el) / 2) + 'px';\n\t\ttop = -(heightOf(el) / 2) + 'px';\n\t\tL.extend(el.style, {\n\t\t\ttop: '50%',\n\t\t\tleft: '50%',\n\t\t\t'margin-left': left,\n\t\t\t'margin-top': top\n\t\t});\n\n\t\tel = this._handles.ml;\n\t\ttop = -(heightOf(el) / 2) + 'px';\n\t\tleft = (-(widthOf(el) / 2) - borderWidth.left) + 'px';\n\t\tL.extend(el.style, {\n\t\t\ttop: '50%',\n\t\t\t'margin-top': top,\n\t\t\tleft: left\n\t\t});\n\n\t\tel = this._handles.mr;\n\t\tright = (- (widthOf(el) / 2) - borderWidth.right) + 'px';\n\t\ttop = -(heightOf(el) / 2) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tright: right,\n\t\t\ttop: '50%',\n\t\t\t'margin-top': top\n\t\t});\n\n\t\tel = this._handles.tr;\n\t\tright = (-(widthOf(el) / 2) - borderWidth.right) + 'px';\n\t\ttop = (-(heightOf(el) / 2) - borderWidth.top) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tright: right,\n\t\t\ttop: top\n\t\t});\n\n\t\tel = this._handles.tm;\n\t\ttop = (-(heightOf(el) / 2) - borderWidth.top) + 'px';\n\t\tleft = -(widthOf(el) / 2) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tleft: '50%',\n\t\t\t'margin-left': left,\n\t\t\ttop: top\n\t\t});\n\n\t\tel = this._handles.tl;\n\t\ttop = (-(heightOf(el) / 2) - borderWidth.top) + 'px';\n\t\tleft = (-(widthOf(el) / 2) - borderWidth.left) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tleft: left,\n\t\t\ttop: top\n\t\t});\n\t}\n});\n\nL.larva.frame.rect = function (path) {\n\tif (path && path._rectFrame) {\n\t\treturn path._rectFrame;\n\t}\n\n\treturn (path._rectFrame = new L.larva.frame.Rect(path));\n};","/**\n * @requires package.js\n */\n\n/**\n * \n * **L.larva.frame.RECT_STYLE.RESIZE**\n *\n * *Resizable* frame properties\n *\n * **L.larva.frame.RECT_STYLE.ROTATE**\n *\n * *Rotateable* frame properties\n * \n */\nL.larva.frame.RECT_STYLE = {};\n\nL.larva.frame.RECT_STYLE.RESIZE = {\n\tclassName: 'llarva-pathframe-resize',\n\tmm: {\n\t\thide: true\n\t}\n};\n\nL.larva.frame.RECT_STYLE.ROTATE = {\n\tclassName: 'llarva-pathframe-rotate',\n\ttm: {\n\t\thide: true\n\t},\n\n\tml: {\n\t\thide: true\n\t},\n\n\tmr: {\n\t\thide: true\n\t},\n\n\tbm: {\n\t\thide: true\n\t},\n\n\tmm: {\n\t\tdraggable: true\n\t}\n};","/**\n * @external \"L.Polyline\"\n */\nif (!L.Polyline.prototype.forEachLatLng) {\n\tL.Polyline.include({\n\n\t\t/**\n\t\t * @memberOf external:\"L.Polyline\"\n\t\t * @instance\n\t\t * @param  {Function} fn ({L.LatLng}, {L.LatLng[]})\n\t\t * @param  {Any}   context\n\t\t */\n\t\tforEachLatLng: function (fn, context) {\n\t\t\tvar i=0, j, latlngs = this.getLatLngs();\n\n\t\t\tif (L.larva.isFlat(latlngs)) {\n\t\t\t\tfor (; i<latlngs.length; i++) {\n\t\t\t\t\tfn.call(context, latlngs[i], latlngs);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (; i<latlngs.length; i++) {\n\t\t\t\t\tfor (j=0; j<latlngs[i].length; j++) {\n\t\t\t\t\t\tfn.call(context, latlngs[i][j], latlngs[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n}\n\nif (!L.Polyline.prototype.updateBounds) {\n\tL.Polyline.include({\n\n\t\t/**\n\t\t * @memberOf external:\"L.Polyline\"\n\t\t * @instance\n\t\t */\n\t\tupdateBounds: function () {\n\t\t\tvar bounds = this._bounds = new L.LatLngBounds();\n\n\t\t\tthis.forEachLatLng(function (latlng) {\n\t\t\t\tbounds.extend(latlng);\n\t\t\t});\n\t\t}\n\n\t});\n}\n\nif (!L.Polyline.prototype.getType) {\n\n\tL.extend(L.Polyline, {\n\t\tPOLYLINE: 1,\n\t\tMULTIPOLYLINE: 2\n\t});\n\n\tL.Polyline.include({\n\t\t/**\n\t\t * @memberOf external:\"L.Polyline\"\n\t\t * @instance\n\t\t * @returns {Number}\n\t\t *\n\t\t * Value | Type\n\t\t * ------|-----\n\t\t * 1 | Polyline\n\t\t * 2 | MultiPolyline\n\t\t */\n\t\tgetType: function () {\n\t\t\treturn Array.isArray(this._latlngs[0]) ?\n\t\t\t       L.Polyline.MULTIPOLYLINE : L.Polyline.POLYLINE;\n\t\t}\n\t});\n}\n\nL.Polyline.include({\n\t/**\n\t * @memberOf external:\"L.Polyline\"\n\t * @instance\n\t * @param  {Function} fn\n\t * @param  {Any}   context\n\t */\n\tforEachLine: function (fn, context) {\n\n\t\tswitch (this.getType()) {\n\t\t\tcase L.Polyline.POLYLINE:\n\t\t\tcase L.Polyline.MULTIPOLYLINE:\n\n\t\t\t\tif (!Array.isArray(this._latlngs[0])) {\n\t\t\t\t\tfn.call(context, this._latlngs);\n\t\t\t\t} else {\n\t\t\t\t\tfor (var i=0; i<this._latlngs.length; i++) {\n\t\t\t\t\t\tfn.call(context, this._latlngs[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Invalid geometry type!');\n\t\t}\n\t},\n\n\t/**\n\t * @memberOf external:\"L.Polyline\"\n\t * @instance\n\t * @param {L.LatLngBounds} bounds\n\t */\n\tsetBounds: function (bounds) {\n\t\tthis._bounds = bounds;\n\t}\n});","/**\n * All larva handlers\n * \n * @namespace L.larva.handler\n */\nL.larva.handler = {\n\n};","/**\n * @requires package.js\n */\n\n/**\n * @class Base class for layers handlers\n * \n * @extends L.Handler\n * @mixes L.Evented\n *\n * @param {L.Path} path layer to handle\n * @param {Object} options\n */\nL.larva.handler.Path = L.Handler.extend(\n/** @lends L.larva.handler.Path.prototype */\n{\n\n\tincludes: [L.Evented.prototype],\n\n\tinitialize: function (path, options) {\n\t\tL.setOptions(this, options);\n\n\t\tthis._path = path;\n\t},\n\n\t/**\n\t * @return {L.Map}\n\t */\n\tgetMap: function () {\n\t\treturn this._path._map;\n\t},\n\n\t/**\n\t * @param  {Number} x\n\t * @param  {Number} y\n\t * @return {L.Point} \n\t */\n\tlayerPointToWorldPoint: function (a, b) {\n\t\treturn L.larva.project(this.unproject(a, b));\n\t},\n\n\t/**\n\t * @param  {Number} x layer x\n\t * @param  {Number} y layer y\n\t * @return {L.LatLng}\n\t */\n\tunproject: function (a, b) {\n\t\tif (b !== undefined) {\n\t\t\treturn this.getMap().layerPointToLatLng(L.point(a, b));\n\t\t} else {\n\t\t\treturn this.getMap().layerPointToLatLng(a);\n\t\t}\n\t}\n\n});\n\nL.Path.addInitHook(function () {\n\tthis.larva = {};\n});","/**\n * @requires Path.js\n */\n\n/**\n * @class Polyline Handler base class\n *\n * @extends {L.larva.handler.Path}\n */\nL.larva.handler.Polyline = L.larva.handler.Path.extend(\n/** @lends L.larva.handler.Polyline.prototype */\n{\n\t/**\n\t * Backup all latlngs\n\t */\n\tbackupLatLngs: function () {\n\t\tthis._path.forEachLatLng(function (latlng) {\n\t\t\tlatlng._original = latlng.clone();\n\t\t});\n\t}\n\n});","/**\n * @requires Polyline.js\n */\n\n/**\n * @class Base class for every LatLng transformer\n *\n * @extends {L.larva.handler.Polyline}\n *\n * @param {L.Path} path Layer to transform\n * @param {L.larva.frame.Style} frameStyle, @see {L.larva.frame}\n * @param {Object} options\n */\nL.larva.handler.Polyline.Transform = L.larva.handler.Polyline.extend(\n/** @lends L.larva.handler.Polyline.Transform.prototype */\n{\n\toptions: {\n\t\tnoUpdate: []\n\t},\n\n\tinitialize: function (path, frameStyle, options) {\n\t\tL.larva.handler.Polyline.prototype.initialize.call(this, path, options);\n\n\t\tthis._frameStyle = frameStyle;\n\t},\n\n\t/**\n\t * Transform each layer point\n\t * @param {...Object}\n\t */\n\ttransform: function () {\n\n\t\tvar transformed = L.point(0, 0),\n\t\t    original,\n\t\t    newLatLng;\n\n\t\tvar args = [null, transformed].concat(Array.prototype.slice.call(arguments, 0));\n\n\t\tthis._path.forEachLatLng(function (latlng) {\n\n\t\t\toriginal = args[0] = L.larva.project(latlng._original);\n\n\t\t\ttransformed.x = original.x;\n\t\t\ttransformed.y = original.y;\n\n\t\t\tthis.transformPoint.apply(this, args);\n\n\t\t\tnewLatLng = L.larva.unproject(transformed);\n\t\t\tlatlng.lat = newLatLng.lat;\n\t\t\tlatlng.lng = newLatLng.lng;\n\n\t\t}, this);\n\n\t\tthis._path.updateBounds();\n\n\t\tthis._frame.updateBounds.apply(this._frame, this.options.noUpdate);\n\t\tthis._path.redraw();\n\t},\n\n\t/**\n\t * @abstract\n\t * @param {L.Point} original Original point\n\t * @param {L.Point} transformed Point transformed\n\t * @param {...Object}\n\t */\n\ttransformPoint: function () {\n\t\tthrow new Error('Unsupported Operation!');\n\t}\n});","/**\n * @requires ../frame/Rect.js\n * @requires ../frame/RECT_STYLE.js\n * @requires ../ext/L.Polyline.js\n * \n * @requires Polyline.Transform.js\n */\n\n/**\n * @class Rotate polygon\n *\n * @extends {L.larva.handler.Polyline.Transform}\n */\nL.larva.handler.Polyline.Rotate = L.larva.handler.Polyline.Transform.extend(\n/** @lends L.larva.handler.Polyline.Transform.prototype */\n{\n\n\toptions: {\n\t\tnoUpdate: [L.larva.frame.Rect.MIDDLE_MIDDLE]\n\t},\n\n\taddHooks: function () {\n\t\tthis._frame = L.larva.frame.rect(this._path);\n\t\tthis._frame.addTo(this.getMap());\n\n\t\tthis._frame.setStyle(this._frameStyle);\n\n\t\tthis._frame.on('drag:start', this._onStart, this);\n\t},\n\n\t/**\n\t * @param  {L.Point} original\n\t * @param  {L.Point} transformed\n\t * @param  {Number} sin\n\t * @param  {Number} cos\n\t * @param  {Number} dx\n\t * @param  {Number} dy\n\t */\n\ttransformPoint: function (original, transformed, sin, cos, dx, dy) {\n\t\ttransformed.x = original.x * cos - original.y * sin + dx;\n\t\ttransformed.y = original.x * sin + original.y * cos + dy;\n\t},\n\n\t_onEnd: function () {\n\t\tthis._frame\n\t\t\t.off('drag:move', this._onMove, this)\n\t\t\t.off('drag:end', this._onEnd, this);\n\t},\n\n\t_onMove: function (evt) {\n\t\tvar position = L.larva.getSourceEvent(evt);\n\n\t\tvar centerBounding = this._centerElement.getBoundingClientRect();\n\n\t\tvar cx = (centerBounding.left + centerBounding.width / 2),\n\t\t    cy = (centerBounding.top + centerBounding.height / 2);\n\n\t\tvar i = position.clientX - cx,\n\t\t    j = position.clientY - cy;\n\n\t\tvar length = Math.sqrt(i * i + j * j);\n\n\t\t// cross product\n\t\tvar sin = (this._vector.i * j - this._vector.j * i) / length;\n\n\t\t// scalar product\n\t\tvar cos = (this._vector.i * i + this._vector.j * j) / length;\n\n\t\tvar frameBounding = this._frame.getFrameClientRect(),\n\t\t    framePosition = this._frame.getPosition();\n\n\t\tcx = (cx - frameBounding.left) + framePosition.x;\n\t\tcy = (cy - frameBounding.top) + framePosition.y;\n\n\t\tvar worldCenterPoint = this.layerPointToWorldPoint(cx, cy);\n\n\t\tvar dx = worldCenterPoint.x * (1 - cos) + worldCenterPoint.y * sin;\n\t\tvar dy = worldCenterPoint.y * (1 - cos) - worldCenterPoint.x * sin;\n\n\t\tthis.transform(sin, cos, dx, dy);\n\t},\n\n\t_onStart: function (evt) {\n\t\tif (!evt.handle || evt.handle === L.larva.frame.Rect.MIDDLE_MIDDLE) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar centerElement = this._centerElement = this._frame.getHandle(L.larva.frame.Rect.MIDDLE_MIDDLE);\n\n\t\tvar centerBounding = centerElement.getBoundingClientRect(),\n\t\t    targetBounding = evt.sourceEvent.target.getBoundingClientRect();\n\n\t\tvar vector = this._vector = {\n\t\t\ti: (targetBounding.left + targetBounding.width / 2) - (centerBounding.left - centerBounding.width / 2),\n\t\t\tj: (targetBounding.top + targetBounding.height / 2) - (centerBounding.top - centerBounding.height / 2)\n\t\t};\n\n\t\tvector.length = Math.sqrt(vector.i * vector.i + vector.j * vector.j);\n\n\t\tvector.i = vector.i / vector.length;\n\t\tvector.j = vector.j / vector.length;\n\t\tvector.length = 1;\n\n\t\tthis.backupLatLngs();\n\n\t\tthis._frame\n\t\t\t.on('drag:move', this._onMove, this)\n\t\t\t.on('drag:end', this._onEnd, this);\n\t}\n\n});\n\nL.Polyline.addInitHook(function () {\n\tthis.larva.rotate = new L.larva.handler.Polyline.Rotate(this, L.larva.frame.RECT_STYLE.ROTATE);\n});","/**\n * @requires ../frame/Rect.js\n * @requires ../frame/RECT_STYLE.js\n * @requires ../ext/L.Polyline.js\n * \n * @requires Polyline.Transform.js\n */\n\n/**\n * @class Move layer\n *\n * @extends {L.larva.handler.Polyline.Transform}\n */\nL.larva.handler.Polyline.Move = L.larva.handler.Polyline.Transform.extend(\n/** @lends L.larva.handler.Polyline.Move.prototype */\n{\n\n\taddHooks: function() {\n\t\tthis._frame = L.larva.frame.rect(this._path).addTo(this.getMap());\n\t\tthis._frame.on('drag:start', this._onStart, this);\n\n\t\tthis._previousCursor = this._frame.getComputedStyle().cursor;\n\t\tthis._frame.setElementStyle({\n\t\t\tcursor: 'move'\n\t\t});\n\t},\n\n\t/**\n\t * @param  {L.Point} original\n\t * @param  {L.Point} transformed\n\t * @param  {Number} dx\n\t * @param  {Number} dy\n\t */\n\ttransformPoint: function (original, transformed, dx, dy) {\n\t\tif (dx) {\n\t\t\ttransformed.x = original.x + dx;\n\t\t}\n\n\t\tif (dy) {\n\t\t\ttransformed.y = original.y + dy;\n\t\t}\n\t},\n\n\t_getEventWorldPoint: function(event) {\n\t\tvar bounding = this._frame.getFrameClientRect(),\n\t\t    position = this._frame.getPosition();\n\n\t\treturn L.larva.project(\n\t\t\tthis.unproject(\n\t\t\t\tevent.clientX - bounding.left + position.x,\n\t\t\t\tevent.clientY - bounding.top + position.y\n\t\t\t)\n\t\t);\n\t},\n\n\t_onEnd: function () {\n\n\t\tthis._frame\n\t\t\t.off('drag:move', this._onMove, this)\n\t\t\t.off('drag:end', this._onEnd);\n\t},\n\n\t_onMove: function (evt) {\n\n\t\tvar event = L.larva.getSourceEvent(evt);\n\t\tvar worldPoint = this._getEventWorldPoint(event);\n\n\t\tvar dx = worldPoint.x - this._startPosition.x,\n\t\t    dy = worldPoint.y - this._startPosition.y;\n\n\t\tif (event.ctrlKey && event.altKey) {\n\t\t\tvar dxy = Math.min(Math.abs(dx), Math.abs(dy));\n\n\t\t\tdx = dx >= 0 ? dxy : -dxy;\n\t\t\tdy = dy >= 0 ? dxy : -dxy;\n\t\t} else if (event.altKey) {\n\t\t\tdy = null;\n\t\t} else if (event.ctrlKey) {\n\t\t\tdx = null;\n\t\t}\n\n\t\tthis.transform(dx, dy);\n\t},\n\n\t_onStart: function (evt) {\n\t\tif (!evt.handle) {\n\t\t\tthis.backupLatLngs();\n\n\t\t\tthis._startPosition = this._getEventWorldPoint(L.larva.getSourceEvent(evt));\n\n\t\t\tthis._frame\n\t\t\t\t.on('drag:move', this._onMove, this)\n\t\t\t\t.on('drag:end', this._onEnd, this);\n\t\t}\n\n\t}\n\n});\n\nL.Polyline.addInitHook(function () {\n\tthis.larva.move = new L.larva.handler.Polyline.Move(this);\n});","/**\n * @requires ../frame/Rect.js\n * @requires ../frame/RECT_STYLE.js\n * @requires ../ext/L.Polyline.js\n * \n * @requires Polyline.Transform.js\n */\n\n/**\n * @class Resize layer\n *\n * @extends {L.larva.handler.Polyline.Transform}\n * \n */\nL.larva.handler.Polyline.Resize = L.larva.handler.Polyline.Transform.extend(\n/** @lends L.larva.handler.Polyline.Resize.prototype */\n{\n\n\taddHooks: function () {\n\t\tthis._frame = L.larva.frame.rect(this._path).addTo(this.getMap());\n\n\t\tthis._frame.setStyle(this._frameStyle);\n\n\t\tthis._frame.on('drag:start', this._onStart, this);\n\t},\n\n\t/**\n\t * @param  {L.Point} original\n\t * @param  {L.Point} transformed\n\t * @param  {Number} [xscale=null]\n\t * @param  {Number} [yscale=null]\n\t */\n\ttransformPoint: function (original, transformed, xscale, yscale) {\n\n\t\tif (xscale !== null) {\n\t\t\ttransformed.x = this._reference.point.x + xscale * (original.x - this._reference.point.x);\n\t\t}\n\n\t\tif (yscale !== null) {\n\t\t\ttransformed.y = this._reference.point.y + yscale * (original.y - this._reference.point.y);\n\t\t}\n\t},\n\n\t_onEnd: function () {\n\t\tthis._frame\n\t\t\t.off('drag:move', this._onMove, this)\n\t\t\t.off('drag:end', this._onEnd, this);\n\n\t\tdelete this._reference;\n\t},\n\n\t_onMove: function (evt) {\n\n\t\tvar event = L.larva.getSourceEvent(evt);\n\n\t\tvar xscale = null, yscale = null;\n\n\t\tif (this._reference.screenX !== undefined) {\n\t\t\txscale = (event.clientX - this._reference.screenX) / this._reference.width;\n\t\t\tif (this._reference.invertX) {\n\t\t\t\txscale = -xscale;\n\t\t\t}\n\t\t}\n\n\t\tif (this._reference.screenY !== undefined) {\n\t\t\tyscale = (event.clientY - this._reference.screenY) / this._reference.height;\n\t\t\tif (this._reference.invertY) {\n\t\t\t\tyscale = -yscale;\n\t\t\t}\n\t\t}\n\n\t\tif (xscale !== null && yscale !== null && event.ctrlKey) {\n\t\t\tvar xyscale = Math.max(Math.abs(xscale), Math.abs(yscale));\n\n\t\t\txscale = xscale >= 0 ? xyscale : -xyscale;\n\t\t\tyscale = yscale >= 0 ? xyscale : -xyscale;\n\t\t}\n\n\t\tthis.transform(xscale, yscale);\n\t},\n\n\t_onStart: function (evt) {\n\n\t\tif (!evt.handle || evt.handle === L.larva.frame.Rect.MIDDLE_MIDDLE) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar bounding = this._frame.getFrameClientRect(),\n\t\t    position = this._frame.getPosition();\n\n\t\tvar reference = this._reference = {\n\t\t\theight: bounding.height,\n\t\t\twidth: bounding.width,\n\t\t};\n\n\t\t// x\n\t\tswitch (evt.handle) {\n\t\t\tcase L.larva.frame.Rect.TOP_LEFT:\n\t\t\tcase L.larva.frame.Rect.MIDDLE_LEFT:\n\t\t\tcase L.larva.frame.Rect.BOTTOM_LEFT:\n\t\t\t\treference.screenX = bounding.right;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Rect.TOP_MIDDLE:\n\t\t\tcase L.larva.frame.Rect.BOTTOM_MIDDLE:\n\t\t\t\treference.screenX = bounding.left + reference.width / 2;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Rect.TOP_RIGHT:\n\t\t\tcase L.larva.frame.Rect.MIDDLE_RIGHT:\n\t\t\tcase L.larva.frame.Rect.BOTTOM_RIGHT:\n\t\t\t\treference.screenX = bounding.left;\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// y\n\t\tswitch (evt.handle) {\n\t\t\tcase L.larva.frame.Rect.TOP_LEFT:\n\t\t\tcase L.larva.frame.Rect.TOP_MIDDLE:\n\t\t\tcase L.larva.frame.Rect.TOP_RIGHT:\n\t\t\t\treference.screenY = bounding.bottom;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Rect.MIDDLE_LEFT:\n\t\t\tcase L.larva.frame.Rect.MIDDLE_RIGHT:\n\t\t\t\treference.screenY = bounding.top + reference.height / 2;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Rect.BOTTOM_LEFT:\n\t\t\tcase L.larva.frame.Rect.BOTTOM_MIDDLE:\n\t\t\tcase L.larva.frame.Rect.BOTTOM_RIGHT:\n\t\t\t\treference.screenY = bounding.top;\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// invertX\n\t\tswitch (evt.handle) {\n\t\t\tcase L.larva.frame.Rect.TOP_LEFT:\n\t\t\tcase L.larva.frame.Rect.MIDDLE_LEFT:\n\t\t\tcase L.larva.frame.Rect.BOTTOM_LEFT:\n\t\t\t\treference.invertX = true;\n\t\t}\n\n\t\t// invertY\n\t\tswitch (evt.handle) {\n\t\t\tcase L.larva.frame.Rect.TOP_LEFT:\n\t\t\tcase L.larva.frame.Rect.TOP_MIDDLE:\n\t\t\tcase L.larva.frame.Rect.TOP_RIGHT:\n\t\t\t\treference.invertY = true;\n\t\t}\n\n\n\t\treference.point = this.layerPointToWorldPoint(\n\t\t\treference.screenX - bounding.left + position.x,\n\t\t\treference.screenY - bounding.top + position.y\n\t\t);\n\n\t\tswitch (evt.handle) {\n\t\t\tcase L.larva.frame.Rect.TOP_MIDDLE:\n\t\t\tcase L.larva.frame.Rect.BOTTOM_MIDDLE:\n\t\t\t\tdelete reference.screenX;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Rect.MIDDLE_LEFT:\n\t\t\tcase L.larva.frame.Rect.MIDDLE_RIGHT:\n\t\t\t\tdelete reference.screenY;\n\t\t\t\tbreak;\n\t\t}\n\n\n\t\tthis.backupLatLngs();\n\n\t\tthis._frame\n\t\t\t.on('drag:move', this._onMove, this)\n\t\t\t.on('drag:end', this._onEnd, this);\n\t}\n\n});\n\nL.Polyline.addInitHook(function () {\n\tthis.larva.resize = new L.larva.handler.Polyline.Resize(this, L.larva.frame.RECT_STYLE.RESIZE);\n});","/**\n * @requires L.Polyline.js\n */\n\n/**\n * @external \"L.Polygon\"\n * @see {@link external:\"L.Polyline\" Extends L.Polyline}\n */\n\nL.extend(L.Polygon, {\n\tPOLYGON: 3,\n\tMULTIPOLYGON: 4\n});\n\nL.Polygon.include({\n\t/**\n\t * @memberOf external:\"L.Polygon\"\n\t * @instance\n\t * @returns {Number}\n\t *\n\t * Value|Type\n\t * -----|----\n\t * 3| Polygon\n\t * 4| MultiPolygon\n\t */\n\tgetType: function () {\n\t\tvar latlngs = this._latlngs;\n\n\t\tif (latlngs.length) {\n\t\t\tif (!L.larva.isFlat(latlngs[0])) {\n\t\t\t\treturn L.Polygon.MULTIPOLYGON;\n\t\t\t}\n\t\t}\n\n\t\treturn L.Polygon.POLYGON;\n\t},\n\t/**\n\t * @memberOf external:\"L.Polygon\"\n\t * @instance\n\t * @param  {Function} fn      ({L.LatLng}, {L.LatLng[]}, hole? {Boolean})\n\t * @param  {Any}   context\n\t */\n\tforEachLatLng: function (fn, context) {\n\t\tvar i=0, j, k, polygons = [], polygon, hole, latlngs = this.getLatLngs();\n\n\t\tif (L.larva.isFlat(latlngs[0])) {\n\t\t\tpolygons.push(latlngs);\n\t\t} else {\n\t\t\tpolygons = latlngs;\n\t\t}\n\n\t\tfor (; i<polygons.length; i++) {\n\t\t\tpolygon = polygons[i];\n\n\t\t\tfor (j=0; j<polygon.length; j++) {\n\t\t\t\thole = j > 0;\n\t\t\t\tfor (k=0; k<polygon[j].length; k++) {\n\t\t\t\t\tfn.call(context, polygon[j][k], polygon[j], hole);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t/**\n\t * @memberOf external:\"L.Polygon\"\n\t * @instance\n\t * @param  {Function} fn\n\t * @param  {Any}   context\n\t */\n\tforEachPolygon: function (fn, context) {\n\t\tvar latlngs = this._latlngs;\n\n\t\tswitch (this.getType()) {\n\t\t\tcase L.Polygon.POLYGON:\n\n\t\t\t\tif (context) {\n\t\t\t\t\tfn.call(context, latlngs[0], latlngs.slice(1));\n\t\t\t\t} else {\n\t\t\t\t\tfn(latlngs[0], latlngs.slice(1));\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase L.Polygon.MULTIPOLYGON:\n\n\t\t\t\tfor (var i=0, l=latlngs.length; i<l; i++) {\n\t\t\t\t\tif (context) {\n\t\t\t\t\t\tfn.call(context, latlngs[i][0], latlngs[i].slice(1));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfn(latlngs[i][0], latlngs[i].slice(1));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n});","/**\n * @class\n *\n * Style class with helper methods\n *\n * Example:\n * \n * ```js\n *\n * \tvar polygon = L.polygon(latlngs, {\n * \t\tfillOpacity: 0.5,\n * \t\tfillColor: '#ABABAB'\n * \t});\n * \n * \tvar style = L.larva.style(polygon);\n *\n * \tstyle.multiplyBy({\n * \t\tfillColor: [1, 0.5, 2],\n  * \t}).subtract({\n  * \t\tfillOpacity: 0.2\n  * \t});\n *\n * \tpolygon.setStyle(style);\n * \n * ```\n * @param {(L.Path | L.larva.Style | Object)} source\n *\n */\nL.larva.Style = L.Class.extend(\n/** @lends L.larva.Style.prototype */\n{\n\n\tstatics: {\n\n\t\tSTYLES: ['fillOpacity', 'fillColor', 'color', 'opacity'],\n\n\t\tTYPE: {\n\t\t\tfillOpacity: 'number',\n\t\t\topacity: 'number',\n\t\t\tfillColor: 'color',\n\t\t\tcolor: 'color'\n\t\t}\n\t},\n\n\tinitialize: function (source) {\n\n\t\tif (source instanceof L.Path) {\n\t\t\tsource = source.options;\n\t\t}\n\n\t\tL.larva.Style.STYLES.forEach(function (styleName) {\n\t\t\tthis[styleName] = source[styleName];\n\t\t}, this);\n\t},\n\n\t/**\n\t * @param  {Object} style\n\t * @return {L.larva.Style} this\n\t */\n\tsubtract: function (styles) {\n\t\treturn this._transform(styles, function (cV, d) {\n\t\t\treturn cV - d;\n\t\t});\n\t},\n\n\t/**\n\t * @param  {Object} style\n\t * @return {L.larva.Style} this\n\t */\n\tmultiplyBy: function(styles) {\n\t\treturn this._transform(styles, function (cV, d) {\n\t\t\treturn cV * d;\n\t\t});\n\t},\n\n\t_transform: function (styles, transfom) {\n\t\tvar styleName, currentValue, delta;\n\n\t\tfor (styleName in styles) {\n\t\t\tif (styleName in this) {\n\n\t\t\t\tcurrentValue = this[styleName];\n\t\t\t\tdelta = styles[styleName];\n\n\t\t\t\tswitch (L.larva.Style.TYPE[styleName]) {\n\t\t\t\t\tcase 'color':\n\t\t\t\t\t\tvar rgb = L.larva.Style.getRGB(currentValue);\n\t\t\t\t\t\tif (rgb) {\n\t\t\t\t\t\t\trgb[0] = transfom(rgb[0], delta[0]);\n\t\t\t\t\t\t\trgb[1] = transfom(rgb[1], delta[1]);\n\t\t\t\t\t\t\trgb[2] = transfom(rgb[2], delta[2]);\n\n\t\t\t\t\t\t\trgb = rgb.map(L.larva.Style.convertColorComponent);\n\n\t\t\t\t\t\t\tcurrentValue = '#' + rgb.join('');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'number':\n\t\t\t\t\t\tcurrentValue = transfom(currentValue, delta);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tthis[styleName] = currentValue;\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n});\n\n/**\n * @memberOf L.larva.Style\n * @param  {String} color\n * @return {Array} [r, g, b]\n */\nL.larva.Style.getRGB = function (color) {\n\n\tif (!color) {\n\t\treturn;\n\t}\n\n\tvar r,g,b;\n\n\tif (color.length === 4) {\n\t\tr = parseInt(color[1], 16);\n\t\tg = parseInt(color[2], 16);\n\t\tb = parseInt(color[3], 16);\n\t} else if (color.length === 7) {\n\t\tr = parseInt(color.substr(1, 2), 16);\n\t\tg = parseInt(color.substr(3, 2), 16);\n\t\tb = parseInt(color.substr(5, 2), 16);\n\t} else {\n\t\treturn;\n\t}\n\n\treturn [r,g,b];\n};\n\nL.larva.Style.convertColorComponent = function (component) {\n\tif (component < 0) {\n\t\tcomponent = 0;\n\t} else if (component > 255) {\n\t\tcomponent = 255;\n\t}\n\n\tcomponent = parseInt(component).toString(16);\n\n\treturn component.length === 2 ? component : '0' + component;\n};\n\nL.larva.style = function (source) {\n\treturn new L.larva.Style(source);\n};","/**\n * @requires package.js\n *\n * @requires ../ext/L.Polygon.js\n * @requires ../Style.js\n */\n\n/**\n * @class\n *\n * Frame for handle point by point editor\n * \n */\nL.larva.frame.Vertices = L.Layer.extend(\n/** @lends L.larva.frame.Vertices.prototype */\n{\n\toptions: {\n\t\tcolorFactor: [0.8, 1.3, 0.8],\n\t\thandleClassName: 'llarva-vertex',\n\t\topacityFactor: 0.8,\n\t\tpane: 'llarva-frame',\n\t\ttolerance: 10,\n\t\tsimplifyZoom: -1\n\t},\n\n\tinitialize: function (path) {\n\t\tthis._path = path;\n\t},\n\n\tbeforeAdd: function (map) {\n\t\tif (!map.getPane(this.options.pane)) {\n\t\t\tmap.createPane(this.options.pane);\n\t\t}\n\t},\n\n\tgetEvents: function () {\n\t\treturn {\n\t\t\tmoveend: this._updateView,\n\t\t\tzoomend: this._onZoomEnd\n\t\t};\n\t},\n\n\t/**\n\t * Returns handle L.LatLng\n\t * @param  {String}  handleId\n\t * @return {L.LatLng}\n\t */\n\tgetLatLng: function (handleId) {\n\t\tif (this._handles && this._handles[handleId]) {\n\t\t\treturn this._handles[handleId]._latlng;\n\t\t}\n\t},\n\t/**\n\t * @return {Number}\n\t *\n\t * @see {@link external:\"L.Polygon\" L.Polygon}\n\t */\n\tgetPathType: function () {\n\t\treturn this._path.getType();\n\t},\n\n\t/**\n\t * Returns handle layer point\n\t * @param  {String} handleId\n\t * @return {L.Point}\n\t */\n\tgetPoint: function (handleId) {\n\t\tif (this._handles && this._handles[handleId]) {\n\t\t\treturn this._handles[handleId]._point;\n\t\t}\n\t},\n\n\tonAdd: function () {\n\t\tthis._container = this.getPane();\n\t\tthis._updateHandles();\n\t\tthis._updateView();\n\t},\n\n\tonRemove: function () {\n\t\tvar id, handle;\n\n\t\tif (this._handles) {\n\n\t\t\tfor (id in this._handles) {\n\t\t\t\thandle = this._handles[id];\n\n\t\t\t\tif (handle.offsetParent) {\n\t\t\t\t\tL.DomUtil.remove(handle);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdelete this._handles;\n\t\t}\n\n\t\tfor (id in L.Draggable.MOVE) {\n\t\t\tL.DomEvent\n\t\t\t\t.off(document, L.Draggable.MOVE[id], this._onMove, this)\n\t\t\t\t.off(document, L.Draggable.END[id], this._onEnd, this);\n\t\t}\n\t},\n\n\t/**\n\t * @param  {String} handleId\n\t */\n\tremoveHandle: function (handleId) {\n\t\tif (this._handles && this._handles[handleId]) {\n\t\t\tvar handle = this._handles[handleId];\n\n\t\t\tL.Draggable.START.forEach(function (evtName) {\n\t\t\t\tL.DomEvent.off(handle, evtName, this._onStart, this);\n\t\t\t}, this);\n\n\t\t\tL.DomEvent.off(handle, 'dblclick', this._onHandleDblclick, this);\n\n\t\t\tif (handle.offsetParent) {\n\t\t\t\tL.DomUtil.remove(handle);\n\t\t\t}\n\n\t\t\tvar prev = handle._prev, next = handle._next;\n\n\t\t\tif (prev && next) {\n\n\t\t\t\tprev._next = next;\n\t\t\t\tnext._prev = prev;\n\n\t\t\t} else if (prev !== next) {\n\t\t\t\tif (prev) {\n\t\t\t\t\t// handle is last\n\t\t\t\t\tdelete prev._next;\n\n\t\t\t\t\tif (handle._isPolygon) {\n\t\t\t\t\t\tprev._first._last = prev;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// handle is first\n\t\t\t\t\tdelete next._prev;\n\n\t\t\t\t\tif (handle._isPolygon) {\n\t\t\t\t\t\tvar first = next;\n\t\t\t\t\t\tdo  {\n\t\t\t\t\t\t\tnext._first = first;\n\t\t\t\t\t\t} while ((next = next._next));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var i=0, index; i<this._lines.length; i++) {\n\t\t\t\tif ((index = this._lines[i].handles.indexOf(handle)) >= 0) {\n\t\t\t\t\tthis._lines[i].handles.splice(index, 1);\n\t\t\t\t\tif (this._lines[i].handles.length === 0) {\n\t\t\t\t\t\tthis._lines.splice(i, 1);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdelete this._handles[handleId];\n\n\t\t\tif (this._aura && this._aura[handleId]) {\n\t\t\t\tthis._map.removeLayer(this._aura[handleId].polyline);\n\t\t\t\tdelete this._aura[handleId];\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * @param  {String} handleId\n\t * @returns {Boolean} Does the aura was created?\n\t */\n\tstartAura: function (handleId) {\n\t\tvar handle = this._handles[handleId];\n\n\t\tif (!handle) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!this._aura) {\n\t\t\tthis._aura = {};\n\t\t}\n\n\t\tif (!this._aura[handleId]) {\n\n\t\t\tvar polyline;\n\n\t\t\tvar latlngs = [],\n\t\t\t    latlng = handle._latlng.clone(),\n\t\t\t    style = L.larva.style(this._path).multiplyBy({\n\t\t\t    \tcolor: this.options.colorFactor,\n\t\t\t    \topacity: this.options.opacityFactor\n\t\t\t    }),\n\t\t\t    latlng0;\n\n\t\t\tif (handle._isPolygon) {\n\n\t\t\t\tif (handle._prev) {\n\t\t\t\t\tlatlng0 = handle._prev._latlng;\n\t\t\t\t} else {\n\t\t\t\t\tlatlng0 = handle._last._latlng;\n\t\t\t\t}\n\n\t\t\t\tlatlngs.push(latlng0.clone());\n\n\t\t\t\tlatlngs.push(latlng);\n\n\t\t\t\tif (handle._next) {\n\t\t\t\t\tlatlng0 = handle._next._latlng;\n\t\t\t\t} else {\n\t\t\t\t\tlatlng0 = handle._first._latlng;\n\t\t\t\t}\n\n\t\t\t\tlatlngs.push(latlng0.clone());\n\n\t\t\t} else {\n\n\t\t\t\tif (handle._prev) {\n\t\t\t\t\tlatlngs.push(handle._prev._latlng.clone());\n\t\t\t\t}\n\n\t\t\t\tlatlngs.push(latlng);\n\n\t\t\t\tif (handle._next) {\n\t\t\t\t\tlatlngs.push(handle._next._latlng.clone());\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tpolyline = L.polyline(latlngs, L.extend({}, style, {\n\t\t\t\tnoClip: true\n\t\t\t})).addTo(this._map);\n\n\t\t\tthis._aura[handleId] = {\n\t\t\t\tisPolygon: !!handle._isPolygon,\n\t\t\t\tpoint: handle._point.clone(),\n\t\t\t\tpolyline: polyline,\n\t\t\t\tlatlng: latlng,\n\t\t\t\tx: this._position.x,\n\t\t\t\ty: this._position.y\n\t\t\t};\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t/**\n\t * \n\t */\n\tredraw: function () {\n\t\tthis._updateHandles();\n\t\tthis._updateView();\n\t\treturn this;\n\t},\n\n\t/**\n\t * @param  {String} handleId\n\t *\n\t * @returns {L.LatLng} Aura's L.LatLng\n\t */\n\tstopAura: function (handleId) {\n\t\tvar aura, handle;\n\t\tif (this._aura && (aura = this._aura[handleId])) {\n\t\t\tthis._map.removeLayer(this._aura[handleId].polyline);\n\t\t\tdelete this._aura[handleId];\n\n\t\t\thandle = this._handles[handleId];\n\t\t\thandle._point = this._map.latLngToLayerPoint(aura.latlng);\n\t\t\treturn aura.latlng;\n\t\t}\n\t},\n\n\t/**\n\t * @param  {String} handleId\n\t */\n\tupdateHandle: function (handleId) {\n\t\tvar handle = this._handles[handleId];\n\t\tif (handle) {\n\t\t\tdelete handle._point;\n\t\t\tthis._updateHandlePosition(handle);\n\t\t}\n\t},\n\n\t_createHandles: function (latlngs, isPolygon, isHole) {\n\n\t\tvar i, handle, prev, handles = [], first;\n\n\t\tfor (i=0; i<latlngs.length; i++) {\n\t\t\thandle = L.DomUtil.create('div', this.options.handleClassName);\n\n\t\t\tif (isPolygon) {\n\t\t\t\thandle._isPolygon = true;\n\t\t\t}\n\n\t\t\tif (isHole) {\n\t\t\t\thandle._isHole = true;\n\t\t\t}\n\n\t\t\thandle._latlng = latlngs[i];\n\t\t\thandle._latlng._handle = handle;\n\t\t\thandle._latlngs = latlngs;\n\t\t\thandle._point = this._map.latLngToLayerPoint(handle._latlng);\n\n\t\t\tL.DomEvent\n\t\t\t\t.on(handle, L.Draggable.START.join(' '), this._onStart, this)\n\t\t\t\t.on(handle, 'dblclick', this._onHandleDblclick, this);\n\n\t\t\tthis._handles[L.stamp(handle)] = handle;\n\n\t\t\tif (prev) {\n\t\t\t\tprev._next = handle;\n\t\t\t\thandle._prev = prev;\n\t\t\t\tprev = handle;\n\n\t\t\t\tif (isPolygon && first) {\n\t\t\t\t\thandle._first = first;\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tfirst = handle;\n\t\t\t\tprev = handle;\n\t\t\t\thandle._first = handle;\n\t\t\t}\n\n\t\t\thandles.push(handle);\n\t\t}\n\n\t\tif (isPolygon && first) {\n\t\t\tfirst._last = handle;\n\t\t}\n\n\t\tthis._lines.push({\n\t\t\thandles: handles,\n\t\t\tisHole: !!isHole,\n\t\t\tisPolygon: !!isPolygon\n\t\t});\n\n\t\treturn handles;\n\t},\n\n\t_onHandleDblclick: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\n\t\tthis.fire('handle:dblclick', {\n\t\t\tid: L.stamp(evt.target),\n\t\t\toriginalEvent: evt\n\t\t});\n\t},\n\n\t_onEnd: function (evt) {\n\t\tvar id, aura;\n\n\t\tL.DomEvent.stop(evt);\n\n\t\tfor (id in L.Draggable.MOVE) {\n\t\t\tL.DomEvent\n\t\t\t\t.off(document, L.Draggable.MOVE[id], this._onMove, this)\n\t\t\t\t.off(document, L.Draggable.END[id], this._onEnd, this);\n\t\t}\n\n\t\tL.DomUtil.removeClass(document.body, 'leaflet-dragging');\n\n\t\ttry {\n\t\t\tfor (id in this._aura) {\n\t\t\t\taura = this._aura[id];\n\t\t\t\tdelete this._aura[id];\n\n\t\t\t\tthis._map.removeLayer(aura.polyline);\n\n\t\t\t\tthis.fire('aura:end', {\n\t\t\t\t\tid: id,\n\t\t\t\t\tlatlng: aura.latlng\n\t\t\t\t});\n\t\t\t}\n\t\t} finally {\n\t\t\tthis.fire('handle:end', {\n\t\t\t\tsourceEvent: evt\n\t\t\t});\n\t\t}\n\t},\n\n\t_onMove: function (evt) {\n\t\tvar aura, handle, id, dx, dy, newPoint, newLatLng;\n\n\t\tL.DomEvent.stop(evt);\n\n\t\tthis._position.x = evt.clientX;\n\t\tthis._position.y = evt.clientY;\n\n\t\tfor (id in this._aura) {\n\t\t\taura = this._aura[id];\n\t\t\thandle = this._handles[id];\n\n\t\t\tdx = this._position.x - aura.x;\n\t\t\tdy = this._position.y - aura.y;\n\n\t\t\tnewPoint = aura.point.add(L.point(dx, dy));\n\t\t\tnewLatLng = this._map.layerPointToLatLng(newPoint);\n\t\t\taura.latlng.lat = newLatLng.lat;\n\t\t\taura.latlng.lng = newLatLng.lng;\n\n\t\t\taura.polyline.updateBounds();\n\t\t\taura.polyline.redraw();\n\n\t\t\tthis._updateHandlePosition(handle, newPoint);\n\t\t}\n\n\t\tthis.fire('handle:move', {\n\t\t\tsourceEvent: evt\n\t\t});\n\t},\n\n\t_onStart: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\t\tvar sourceEvent = L.larva.getSourceEvent(evt);\n\n\t\tthis._position = {\n\t\t\tx: sourceEvent.clientX, y: sourceEvent.clientY\n\t\t};\n\n\t\tthis.fire('handle:start', {\n\t\t\tid: L.stamp(evt.target),\n\t\t\tsourceEvent: evt\n\t\t});\n\n\n\t\tL.DomEvent\n\t\t\t.on(document, L.Draggable.MOVE[evt.type], this._onMove, this)\n\t\t\t.on(document, L.Draggable.END[evt.type], this._onEnd, this);\n\n\t\tL.DomUtil.addClass(document.body, 'leaflet-dragging');\n\t},\n\n\t_onZoomEnd: function () {\n\n\t\tvar id, handle;\n\n\t\tfor (id in this._handles) {\n\t\t\thandle = this._handles[id];\n\t\t\thandle._point = this._map.latLngToLayerPoint(handle._latlng);\n\t\t}\n\t},\n\n\t_updateHandles: function () {\n\t\tvar id, handle;\n\n\t\tif (this._handles) {\n\t\t\tfor (id in this._handles) {\n\t\t\t\thandle = this._handles[id];\n\n\t\t\t\tL.DomUtil.remove(handle);\n\t\t\t}\n\t\t}\n\n\t\tthis._handles = {};\n\t\tthis._lines = [];\n\n\t\tswitch (this.getPathType()) {\n\t\t\tcase L.Polyline.POLYLINE:\n\t\t\tcase L.Polyline.MULTIPOLYLINE:\n\n\t\t\t\tthis._path.forEachLine(function (line) {\n\t\t\t\t\tthis._createHandles(line);\n\t\t\t\t}, this);\n\n\t\t\t\tbreak;\n\n\t\t\tcase L.Polygon.POLYGON:\n\t\t\tcase L.Polygon.MULTIPOLYGON:\n\n\t\t\t\tthis._path.forEachPolygon(function (shell, holes) {\n\n\t\t\t\t\tthis._createHandles(shell, true);\n\n\t\t\t\t\tholes.forEach(function (latlngs) {\n\t\t\t\t\t\tthis._createHandles(latlngs, true, true);\n\t\t\t\t\t}, this);\n\n\t\t\t\t}, this);\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Invalid geometry type - ' + this.getPathType());\n\t\t}\n\t},\n\n\t_updateHandlePosition: function (handle, target) {\n\t\tvar point;\n\n\t\tif (target) {\n\t\t\tpoint = target.clone();\n\t\t} else if (handle._point) {\n\t\t\tpoint = handle._point.clone();\n\t\t} else {\n\t\t\thandle._point = this._map.latLngToLayerPoint(handle._latlng);\n\t\t\tpoint = handle._point.clone();\n\t\t}\n\n\t\tif (handle.offsetParent) {\n\t\t\tpoint._subtract({\n\t\t\t\tx: L.larva.getWidth(handle) / 2,\n\t\t\t\ty: L.larva.getHeight(handle) / 2\n\t\t\t});\n\t\t}\n\n\t\tL.DomUtil.setPosition(handle, point);\n\t},\n\n\t_showHandles: function (handles, isPolygon) {\n\t\tvar pointsToShow;\n\n\t\tvar bounds = this._map.getPixelBounds(),\n\t\t    pixelOrigin = this._map.getPixelOrigin();\n\n\t\tvar points = handles.map(function (handle) {\n\t\t\tvar point = handle._point.add(pixelOrigin);\n\t\t\tpoint._handle = handle;\n\t\t\treturn point;\n\t\t});\n\n\t\tif (isPolygon) {\n\n\t\t\tpointsToShow = L.PolyUtil.clipPolygon(points, bounds).filter(function (point) {\n\t\t\t\treturn !!point._handle;\n\t\t\t});\n\n\t\t} else {\n\n\t\t\tvar i,l, lineClip;\n\n\t\t\tpointsToShow = [];\n\n\t\t\tfor (i=0, l = points.length - 1; i<l; i++) {\n\t\t\t\tlineClip = L.LineUtil.clipSegment(points[i], points[i + 1], bounds);\n\t\t\t\tif (lineClip) {\n\t\t\t\t\tif (lineClip[0]._handle) {\n\t\t\t\t\t\tpointsToShow.push(lineClip[0]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (lineClip[1]._handle) {\n\t\t\t\t\t\tpointsToShow.push(lineClip[1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar doSimplify = false;\n\n\t\tif (this.options.simplifyZoom > 0) {\n\n\t\t\tdoSimplify = this._map.getZoom() < this.options.simplifyZoom;\n\n\t\t} else if (this.options.simplifyZoom < 0) {\n\n\t\t\tdoSimplify = this._map.getZoom() < (this._map.getMaxZoom() + this.options.simplifyZoom);\n\n\t\t}\n\n\t\tif (doSimplify) {\n\t\t\tpointsToShow = L.LineUtil.simplify(pointsToShow, this.options.tolerance);\n\t\t}\n\n\t\tpointsToShow.forEach(function (point) {\n\n\t\t\tif (!point.offsetParent) {\n\t\t\t\tthis._container.appendChild(point._handle);\n\t\t\t}\n\n\t\t\tthis._updateHandlePosition(point._handle);\n\t\t}, this);\n\t},\n\n\t_updateView: function () {\n\t\tvar id, handle;\n\n\t\tfor (id in this._handles) {\n\t\t\thandle = this._handles[id];\n\n\t\t\tif (handle.offsetParent) {\n\t\t\t\tL.DomUtil.remove(handle);\n\t\t\t}\n\t\t}\n\n\t\tthis._lines.forEach(function (line) {\n\t\t\tthis._showHandles(line.handles, line.isPolygon, line.isHole);\n\t\t}, this);\n\t}\n});\n\n/**\n * @param  {L.Path} path\n * @memberOf L.larva.frame\n * @return {L.larva.frame.Vertices}\n */\nL.larva.frame.vertices = function (path) {\n\tif (path._verticesFrame) {\n\t\treturn path._verticesFrame;\n\t}\n\n\treturn (path._verticesFrame = new L.larva.frame.Vertices(path));\n};","/**\n * @requires Polyline.js\n * @requires ../frame/Vertices.js\n */\n\n/**\n * @class Hand point by point of a layer\n *\n * @extends {L.larva.handler.Polyline}\n */\nL.larva.handler.Polyline.Edit = L.larva.handler.Polyline.extend(\n/** @lends L.larva.handler.Polyline.prototype */\n{\n\n\toptions: {\n\t\taura: true,\n\t\tmaxDist: 10\n\t},\n\n\taddHooks: function () {\n\t\tthis._frame = L.larva.frame.vertices(this._path).addTo(this.getMap());\n\n\t\tthis._frame\n\t\t\t.on('handle:start', this._onHandleStart, this)\n\t\t\t.on('handle:dblclick', this._onHandleDbclick, this);\n\n\t\tthis._path.on('dblclick', this._onDblclick, this);\n\t},\n\n\tremoveHooks: function () {\n\t\tthis.getMap().removeLayer(this._frame);\n\t\tthis._frame\n\t\t\t.off('handle:start', this._onHandleStart, this)\n\t\t\t.off('dblclick', this._onDblclick, this);\n\t},\n\n\t_searchNearestPoint: function (point) {\n\t\tvar found = [], map = this.getMap();\n\n\t\tthis._path.forEachLine(function (latlngs) {\n\t\t\tfound = found.concat(L.larva.handler.Polyline.Edit.searchNearestPointIn(point, this.options.maxDist, latlngs, map));\n\t\t}, this);\n\n\t\treturn found;\n\t},\n\n\t_addVertex: function (point) {\n\t\tvar founds, found, newLatLng;\n\n\t\tfounds = this._searchNearestPoint(point);\n\n\t\tif (founds.length) {\n\t\t\tif (founds.length === 1) {\n\t\t\t\tfound = founds[0];\n\t\t\t\tnewLatLng = this.getMap().layerPointToLatLng(found.point);\n\n\t\t\t\tfound.latlngs.splice(found.index, 0, newLatLng);\n\n\t\t\t\tthis._path.updateBounds();\n\t\t\t\tthis._path.redraw();\n\t\t\t\tthis._frame.redraw();\n\t\t\t}\n\t\t}\n\t},\n\n\t_removeLatLng: function (handleId) {\n\t\tvar latlng = this._frame.getLatLng(handleId),\n\t\t    latlngs = this._path.getLatLngs(),\n\t\t    index, i = 0;\n\n\t\tswitch (this._path.getType()) {\n\t\t\tcase L.Polyline.MULTIPOLYLINE:\n\n\t\t\t\tfor (; i<latlngs[i].length; i++) {\n\t\t\t\t\tif ((index = latlngs[i].indexOf(latlng)) !== -1) {\n\n\t\t\t\t\t\tif (latlngs[i].length <= 2) {\n\t\t\t\t\t\t\tlatlngs.splice(i, 1);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlatlngs[i].splice(index, 1);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tif ((index = latlngs.indexOf(latlng)) !== -1) {\n\t\t\t\t\tlatlngs.splice(index, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t}\n\n\t\tthis._path.updateBounds();\n\t\tthis._path.redraw();\n\n\t\tthis._frame.removeHandle(handleId);\n\t},\n\n\t_onAuraEnd: function (evt) {\n\t\tthis._frame.off('aura:end', this._onAuraEnd, this);\n\t\tvar latlng = this._frame.getLatLng(evt.id);\n\n\t\tlatlng.lat = evt.latlng.lat;\n\t\tlatlng.lng = evt.latlng.lng;\n\n\t\tthis._path.updateBounds();\n\t\tthis._path.redraw();\n\t\tthis._frame.updateHandle(evt.id);\n\t},\n\n\t_onDblclick: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\t\tthis._addVertex(this.getMap().mouseEventToLayerPoint(evt.originalEvent));\n\t},\n\n\t_onHandleDbclick: function (evt) {\n\t\tvar originalEvent = evt.originalEvent;\n\n\t\tif (originalEvent.shiftKey) {\n\t\t\tthis._removeLatLng(evt.id);\n\t\t}\n\t},\n\n\t_onHandleEnd: function () {\n\t\tthis._frame\n\t\t\t.off('handle:move', this._onHandleMove, this)\n\t\t\t.off('handle:end', this._onHandleEnd, this);\n\t},\n\n\t_onHandleMove: function (evt) {\n\t\tvar sourceEvent = L.larva.getSourceEvent(evt);\n\n\t\tvar dx = sourceEvent.clientX - this._origin.x,\n\t\t    dy = sourceEvent.clientY - this._origin.y;\n\n\t\tvar newPoint = this._originalPoint.add(L.point(dx, dy));\n\n\t\tvar latlng = this._frame.getLatLng(this._handleId),\n\t\t\t newLatLng = this.getMap().layerPointToLatLng(newPoint);\n\n\t\tlatlng.lat = newLatLng.lat;\n\t\tlatlng.lng = newLatLng.lng;\n\n\t\tthis._path.updateBounds();\n\t\tthis._path.redraw();\n\t\tthis._frame.updateHandle(this._handleId);\n\t},\n\n\t_onHandleStart: function (evt) {\n\t\tvar sourceEvent;\n\n\t\tthis._handleId = evt.id;\n\n\t\tif (this.options.aura) {\n\t\t\tthis._frame.startAura(evt.id);\n\t\t\tthis._frame.on('aura:end', this._onAuraEnd, this);\n\t\t} else {\n\t\t\tsourceEvent = L.larva.getSourceEvent(evt);\n\t\t\tthis._origin = {\n\t\t\t\tx: sourceEvent.clientX, y: sourceEvent.clientY\n\t\t\t};\n\t\t\tthis._originalPoint = this._frame.getPoint(evt.id).clone();\n\t\t\tthis._frame\n\t\t\t\t.on('handle:move', this._onHandleMove, this)\n\t\t\t\t.on('handle:end', this._onHandleEnd, this);\n\t\t}\n\t}\n\n});\n\n/**\n * @memberOf L.larva.handler.Polyline.Edit\n * @param  {L.Point} point\n * @param  {Number} maxDist\n * @param  {LatLng[]} latlngs\n * @param  {L.Map} map\n * @param  {Boolean} closed\n * @return {Object[]}\n */\nL.larva.handler.Polyline.Edit.searchNearestPointIn = function (point, maxDist, latlngs, map, closed) {\n\tvar found = [],\n\t    aPoint, bPoint,\n\t    i, index, l, dist;\n\n\tif (closed) {\n\t\tl = latlngs.length;\n\t} else {\n\t\tl = latlngs.length - 1;\n\t}\n\n\tfor (i = 0; i < l; i++) {\n\n\t\tindex = (i + 1) % latlngs.length;\n\n\t\taPoint = map.latLngToLayerPoint(latlngs[i]);\n\t\tbPoint = map.latLngToLayerPoint(latlngs[index]);\n\n\t\tdist = L.LineUtil.pointToSegmentDistance(point, aPoint, bPoint);\n\n\t\tif (dist <= maxDist) {\n\t\t\tfound.push({\n\t\t\t\tpoint: L.LineUtil.closestPointOnSegment(point, aPoint, bPoint),\n\t\t\t\tindex: index,\n\t\t\t\tlatlngs: latlngs\n\t\t\t});\n\t\t}\n\t}\n\n\treturn found;\n\n};","/**\n * @requires Path.js\n */\n\n/**\n * @class Polygon handler\n *\n * @extends L.larva.handler.Path\n */\nL.larva.handler.Polygon = L.larva.handler.Path.extend({\n\n});","/**\n * @namespace\n */\nL.larva.Util = {\n\n\t/**\n\t * @see {@link https://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html#The%20C%20Code Reference}\n\t *\n\t * @param {L.Point} point\n\t * @param {L.Point[]} points\n\t *\n\t * @returns {Boolean} Point inside points?\n\t */\n\tpointIsInside: function (point, points) {\n\t\tvar i, j, isInside = false;\n\n\t\tfor (i=0, j = points.length - 1; i < points.length; j = i++) {\n\t\t\tif ( ((points[i].y > point.y) !== (points[j].y > point.y)) &&\n\t\t\t\t (point.x < (points[j].x - points[i].x) * (point.y - points[i].y) / (points[j].y - points[i].y) + points[i].x)) {\n\t\t\t\tisInside = !isInside;\n\t\t\t}\n\t\t}\n\n\t\treturn isInside;\n\t}\n\n};","/**\n * @requires package.js\n */\n\n/**\n * @class Base type to creators\n * @param {L.Map} map\n * @param {Object} options\n * \n * @extends L.Handler\n * @mixes L.Evented\n */\nL.larva.handler.New = L.Handler.extend(\n/** @lends L.larva.handler.New.prototype */\n{\n\tincludes: [L.Evented.prototype],\n\n\toptions: {\n\t\tallowFireOnMap: true\n\t},\n\n\tinitialize: function (map, options) {\n\t\tL.Handler.prototype.initialize.call(this, map);\n\n\t\tif (options) {\n\t\t\tL.setOptions(this, options);\n\t\t}\n\t},\n\n\t/**\n\t * Fire an event on map\n\t * @param  {String} eventName\n\t * @param  {Object} eventObject\n\t */\n\tfireOnMap: function (eventName, eventObject) {\n\t\tif (this.options.allowFireOnMap) {\n\t\t\tthis._map.fire(eventName, eventObject);\n\t\t}\n\t},\n\n\t/**\n\t * Project a (lat, lng) to a layer point\n\t * @param  {number} lat\n\t * @param  {number} lng\n\t * @return {L.Point}\n\t */\n\tproject: function (a, b) {\n\t\tif (b !== undefined) {\n\t\t\treturn this._map.latLngToLayerPoint(L.latLng(a, b));\n\t\t} else {\n\t\t\treturn this._map.latLngToLayerPoint(a);\n\t\t}\n\t}\n\n});","if (!L.LatLngBounds.prototype.clone) {\n\n\tL.LatLngBounds.prototype.clone = function () {\n\t\treturn L.latLngBounds(this.getSouthWest().clone(), this.getNorthEast().clone());\n\t};\n\n}","/**\n * @class\n *\n * @param {L.Map} map\n */\nL.larva.UndoRedo = L.Class.extend({\n\n\toptions: {\n\t\tlimit: 5\n\t},\n\n\tinitialize: function (map, options) {\n\t\tthis._map = map;\n\t\tmap.on('lundo:do', this._onDo, this);\n\n\t\tL.setOptions(this, options);\n\t\tthis._bottom = null;\n\t\tthis._current = null;\n\t\tthis._top = null;\n\t\tthis._total = 0;\n\t},\n\n\t/**\n\t */\n\tundo: function () {\n\t\tvar current = this._current || (this._op === 'redo' ? this._top : null);\n\n\t\tif (current) {\n\t\t\ttry {\n\t\t\t\tcurrent.unapply();\n\t\t\t} finally {\n\t\t\t\tthis._current = current._p;\n\t\t\t\tthis._op = 'undo';\n\t\t\t}\n\t\t}\n\t},\n\n\tredo: function () {\n\t\tvar current = this._current || (this._op === 'undo' ? this._bottom : null);\n\n\t\tif (current) {\n\t\t\ttry {\n\t\t\t\tcurrent.apply();\n\t\t\t} finally {\n\t\t\t\tthis._current = current._n;\n\t\t\t\tthis._op = 'redo';\n\t\t\t}\n\t\t}\n\t},\n\n\t_onDo: function (evt) {\n\t\ttry {\n\t\t\tevt.command.apply();\n\t\t} finally  {\n\t\t\tthis._push(evt.command);\n\t\t}\n\t},\n\n\t_pop: function () {\n\t\tvar newBottom = this._bottom._n;\n\t\tdelete newBottom._p;\n\t\tdelete this._bottom._n;\n\t\tthis._bottom = newBottom;\n\t},\n\n\t_push: function (command) {\n\t\tvar previous, next;\n\n\t\tif (this._total) {\n\t\t\tif (this._current) {\n\t\t\t\tcommand._p = this._current;\n\n\t\t\t\tif (this._current === this._top) {\n\t\t\t\t\tthis._top._n = command;\n\t\t\t\t\tthis._top = this._current = command;\n\n\t\t\t\t\t// here + command\n\n\t\t\t\t\tif (this._total === this.options.limit) {\n\t\t\t\t\t\tthis._pop();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._total++;\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnext = this._current._n;\n\t\t\t\t\twhile (next) {\n\t\t\t\t\t\tdelete next._p;\n\t\t\t\t\t\tprevious = next;\n\t\t\t\t\t\tnext = next._n;\n\t\t\t\t\t\tdelete previous._n;\n\t\t\t\t\t\tthis._total--;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._current._n = command;\n\t\t\t\t\tthis._top = this._current = command;\n\t\t\t\t\tthis._total++;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\tif (this._op === 'undo') {\n\t\t\t\t\t// current before last\n\t\t\t\t\tprevious = this._top;\n\t\t\t\t\twhile (previous) {\n\t\t\t\t\t\tdelete previous._n;\n\t\t\t\t\t\tnext = previous;\n\t\t\t\t\t\tprevious = previous._p;\n\t\t\t\t\t\tdelete next._p;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._top = this._bottom = this._current = command;\n\t\t\t\t\tthis._total = 1;\n\n\t\t\t\t} else {\n\t\t\t\t\tcommand._p = this._top;\n\t\t\t\t\tthis._top._n = command;\n\t\t\t\t\tthis._top = this._current = command;\n\n\t\t\t\t\tif (this._total === this.options.limit) {\n\t\t\t\t\t\tthis._pop();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._total++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t} else {\n\t\t\tthis._top = this._current = this._bottom = command;\n\t\t\tthis._total = 1;\n\t\t}\n\t}\n});\n\n\n(function () {\n\n\tvar Mixin = {\n\t\tredo: function () {\n\t\t\tthis.undoRedo.redo();\n\t\t},\n\n\t\tundo: function () {\n\t\t\tthis.undoRedo.undo();\n\t\t}\n\t};\n\n\tL.Map.addInitHook(function () {\n\n\t\tif (this.options.allowUndo) {\n\t\t\tthis.larva = this.larva || {};\n\t\t\tthis.larva.undoRedo = new L.larva.UndoRedo(this, this.options.undoOptions);\n\t\t\tL.extend(this.larva, Mixin);\n\t\t}\n\n\t});\n\n})();\n","/**\n * @class\n *\n * @param {L.larva.Undoable} undoable\n * @param {String} desc\n * @param {Function} doFn\n * @param {Function} undoFn\n */\nL.larva.Command = L.Class.extend({\n\n\tinitialize: function (undoable, desc, doFn, undoFn, args) {\n\t\tthis._undoable = undoable;\n\t\tthis._desc = desc;\n\t\tthis._doFn = doFn;\n\t\tthis._undoFn = undoFn;\n\t\tthis._args = args;\n\t},\n\n\tapply: function () {\n\t\tthis._doFn.apply(this._undoable, this._args);\n\t},\n\n\tunapply: function () {\n\t\tthis._undoFn.apply(this._undoable, this._args);\n\t}\n\n});\n\n/**\n * @param  {L.larva.Undoable} undoable\n * @param  {Function} doFn\n * @param  {Function} undoFn\n * @param  {Any[]} args\n * @return {L.larva.Command}\n */\nL.larva.command = function (undoable, desc, doFn, undoFn, args) {\n\treturn new L.larva.Command(undoable, desc, doFn, undoFn, args);\n};","/**\n * @requires UndoRedo.js\n * @requires Command.js\n */\n\n/**\n * @mixin\n */\nL.larva.Undoable = {\n\n\t_do: function (desc, doFn, undoFn) {\n\t\tvar args = Array.prototype.slice.call(arguments, 3);\n\t\tvar map = this.getMap();\n\n\t\tif (map.options.allowUndo) {\n\t\t\tmap.fire('lundo:do', {\n\t\t\t\tcommand: L.larva.command(this, desc, doFn, undoFn, args)\n\t\t\t});\n\t\t} else {\n\t\t\tdoFn.apply(this, args);\n\t\t}\n\t}\n\n};","/**\n * @namespace\n */\nL.larva.l10n = {\n\tnewPolylinePushLatLng: 'Push latitude/longitude'\n};","/**\n * @requires New.js\n * @requires ../ext/L.LatLngBounds.js\n * @requires ../Undoable.js\n * @requires ../l10n.js\n */\n\n/**\n * @class Polyline creator\n * @extends L.larva.handler.New\n */\nL.larva.handler.New.Polyline = L.larva.handler.New.extend(\n/** @lends L.larva.handler.New.Polyline.prototype */\n{\n\n\tincludes: [L.larva.Undoable],\n\n\toptions: {\n\n\t\tallowFireOnMap: true,\n\n\t\tmaxDragCount: 5,\n\n\t\tminSqrDistance: 100,\n\n\t\thandleStyle: {\n\t\t\tborder: '1px solid #0f0',\n\t\t\tcursor: 'crosshair',\n\t\t\theight: '20px',\n\t\t\tposition: 'absolute',\n\t\t\twidth: '20px'\n\t\t},\n\n\t\tlayerOptions: {\n\n\t\t},\n\n\t\t// Snap here?\n\t\tonMove: L.larva.NOP,\n\n\t\tthreshold: 1\n\t},\n\n\t/**\n\t * Invoke after enable\n\t * @param {L.LatLng} latlng\n\t */\n\taddLatLng: function (latlng) {\n\t\tthis._toAddLatLng = latlng.clone();\n\t\tthis._pushLatLng();\n\t},\n\n\taddHooks: function() {\n\n\t\tthis._latlngs = [];\n\n\t\tthis._pane = this._map.getPane('popupPane');\n\n\t\tvar handle = this._handle = L.DomUtil.create('div', 'llarva-new-vertex-handle', this._pane);\n\t\tL.extend(handle.style, this.options.handleStyle);\n\n\t\tthis._halfHandleSize = new L.Point(\n\t\t\thandle.offsetWidth / 2,\n\t\t\thandle.offsetHeight / 2\n\t\t);\n\n\t\tthis._newLatLng = new L.LatLng(0, 0);\n\t\tthis._previewLayer = this._lineLayer = L.polyline([], L.extend({}, this.options, {\n\t\t\tnoClip: true\n\t\t}));\n\n\t\tthis._map\n\t\t\t.on('mousemove', this._onMapMouseMove, this)\n\t\t\t.on('dragstart', this._onMapDragStart, this)\n\t\t\t.on('drag', this._onMapDrag, this);\n\n\t\tL.DomEvent\n\t\t\t.on(handle, 'mousedown', this._onHandleMousedown, this)\n\t\t\t.on(handle, 'mouseup', this._onHandleMouseup, this)\n\t\t\t.on(handle, 'dblclick', this._onHandleDblClick, this);\n\n\t\tdelete this._lastDown;\n\t},\n\t/**\n\t * Create an empty Polyline layer\n\t * @return {L.Polyline}\n\t */\n\tcreateLayer: function () {\n\t\treturn L.polyline([], L.extend({}, this.options.layerOptions, {\n\t\t\tnoClip: true\n\t\t}));\n\t},\n\n\t/**\n\t * @return {L.Map}\n\t */\n\tgetMap: function () {\n\t\treturn this._map;\n\t},\n\n\t_next: function () {\n\t\tif (this._latlngs.length >= this.options.threshold) {\n\t\t\ttry {\n\n\t\t\t\tthis._map.removeLayer(this._previewLayer);\n\t\t\t\tthis._previewLayer.setLatLngs(this._latlngs);\n\n\t\t\t\tthis.fire('ldraw:created', {\n\t\t\t\t\tlayer: this._previewLayer\n\t\t\t\t});\n\n\t\t\t\tif (this.options.allowFireOnMap) {\n\t\t\t\t\tthis.fireOnMap('ldraw:created', {\n\t\t\t\t\t\thandler: this,\n\t\t\t\t\t\tlayer: this._previewLayer\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t} finally {\n\t\t\t\tthis._lineLayer.setLatLngs([]);\n\t\t\t\tthis._latlngs = [];\n\t\t\t\tthis._previewLayer = this._lineLayer;\n\t\t\t\tdelete this._newLayer;\n\t\t\t\tdelete this._currentBounds;\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveHooks: function () {\n\t\tL.DomEvent\n\t\t\t.off(this._handle, 'mousedown', this._onHandleMousedown, this)\n\t\t\t.off(this._handle, 'mouseup', this._onHandleMouseup, this)\n\t\t\t.off(this._handle, 'dblclick', this._onHandleDblClick, this);\n\n\t\tthis._map\n\t\t\t.off('mousemove', this._onMapMouseMove, this)\n\t\t\t.off('dragstart', this._onMapDragStart, this)\n\t\t\t.off('drag', this._onMapDrag, this);\n\n\t\tL.DomUtil.remove(this._handle);\n\n\t\tif (this._previewLayer) {\n\t\t\tthis._map.removeLayer(this._previewLayer);\n\t\t}\n\t},\n\n\t_onHandleDblClick: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\t\tthis._next();\n\t},\n\n\t_onHandleMousedown: function (evt) {\n\t\tvar eventPoint = this._map.mouseEventToLayerPoint(evt);\n\t\t\n\t\tif (this._lastDown) {\n\t\t\tvar dx = eventPoint.x - this._lastDown.x,\n\t\t\t    dy = eventPoint.y - this._lastDown.y;\n\n\t\t\tif ( ((dx * dx) + (dy * dy)) <= this.options.minSqrDistance) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._lastDown = {};\n\t\t}\n\n\t\tthis._lastDown.x = eventPoint.x;\n\t\tthis._lastDown.y = eventPoint.y;\n\n\t\tthis._toAddLatLng = this._newLatLng.clone();\n\t},\n\n\t_onHandleMouseup: function () {\n\t\tif (this._dragCount && this._dragCount > this.options.maxDragCount) {\n\t\t\tdelete this._dragCount;\n\t\t} else {\n\t\t\tthis._pushLatLng();\n\t\t}\n\t},\n\n\t_onMapDrag: function () {\n\t\tthis._dragCount++;\n\t},\n\n\t_onMapDragStart: function () {\n\t\tthis._dragCount = 0;\n\t},\n\n\t_onMapMouseMove: function (evt) {\n\t\tvar latlng = evt.latlng;\n\n\t\tif (this.options.onMove) {\n\t\t\tthis.options.onMove(latlng);\n\t\t}\n\n\t\tthis._newLatLng.lat = latlng.lat;\n\t\tthis._newLatLng.lng = latlng.lng;\n\n\t\tvar point = this._map.latLngToLayerPoint(latlng);\n\n\t\tL.DomUtil.setPosition(this._handle, point.subtract(this._halfHandleSize));\n\n\t\tif (this._latlngs.length) {\n\t\t\tthis._previewLayer.setBounds(this._previewBounds());\n\t\t\tthis._previewLayer.redraw();\n\t\t}\n\t},\n\n\t_previewBounds: function () {\n\t\treturn this._currentBounds.clone().extend(this._newLatLng);\n\t},\n\n\t_pushLatLng: function () {\n\t\tthis._do(L.larva.l10n.newPolylinePushLatLng, this._doPushLatLng, this._undoPushLatLng, this._toAddLatLng);\n\t},\n\n\t_doPushLatLng: function (toAddLatLng) {\n\t\tif (this._currentBounds) {\n\t\t\tthis._currentBounds.extend(toAddLatLng);\n\t\t} else {\n\t\t\tthis._currentBounds = L.latLngBounds(toAddLatLng.clone(), toAddLatLng.clone());\n\t\t}\n\n\t\tthis._latlngs.push(toAddLatLng.clone());\n\n\t\tif (this._latlngs.length === this.options.threshold) {\n\t\t\tthis._map.removeLayer(this._lineLayer);\n\t\t\tthis._newLayer = this.createLayer().addTo(this._map);\n\t\t\tthis._previewLayer = this._newLayer;\n\t\t}\n\n\t\tif (!this._previewLayer._map) {\n\t\t\tthis._map.addLayer(this._previewLayer);\n\t\t}\n\n\t\tthis._previewLayer.setLatLngs(this._latlngs.concat(this._newLatLng));\n\t\tthis._previewLayer.redraw();\n\t},\n\n\t_undoPushLatLng: function () {\n\t\tthis._latlngs.pop();\n\t\tthis._previewLayer.setLatLngs(this._latlngs.concat(this._newLatLng));\n\t\tthis._previewLayer.redraw();\n\t}\n\n});\n\nL.larva.handler.newPolyline = function (map, options) {\n\treturn new L.larva.handler.New.Polyline(map, options);\n};","/**\n * @requires  New.Polyline.js\n */\n\n/**\n * @class Polygon creator\n * @extends {L.larva.handler.New.Polyline}\n */\nL.larva.handler.New.Polygon = L.larva.handler.New.Polyline.extend(\n\t/** @lends L.larva.handler.New.Polygon.prototype */\n{\n\n\toptions: {\n\t\tthreshold: 2\n\t},\n\n\t/**\n\t * @return {L.Polygon} Creates blank layer\n\t */\n\tcreateLayer: function () {\n\t\treturn L.polygon([], this.options.layerOptions);\n\t}\n\n});\n\n/**\n * @memberOf L.larva.handler.New.Polygon\n * @param  {L.Map} map\n * @param  {Object} options\n * @return {L.larva.handler.New.Polygon}\n */\nL.larva.handler.newPolygon = function (map, options) {\n\treturn new L.larva.handler.New.Polygon(map, options);\n};","/**\n * @requires Polygon.js\n * @requires Polyline.Edit.js\n * @requires ../Util.js\n * @requires New.Polygon.js\n */\nL.larva.handler.Polygon.Edit = L.larva.handler.Polyline.Edit.extend({\n\n\toptions: {\n\t\tallowMakeHole: true,\n\t\tmakeHoleCursor: 'crosshair',\n\t\tnewHoleOptions: {\n\n\t\t}\n\t},\n\n\taddHooks: function () {\n\t\tL.larva.handler.Polyline.Edit.prototype.addHooks.call(this);\n\n\t\tif (this.options.allowMakeHole) {\n\t\t\tthis._path\n\t\t\t\t.on('click', this._onPathClickHole, this);\n\t\t}\n\t},\n\n\t_searchNearestPoint: function (point) {\n\t\tvar found = [],\n\t\t    map = this.getMap(),\n\t\t    maxDist = this.options.maxDist;\n\n\t\tvar search = L.larva.handler.Polyline.Edit.searchNearestPointIn;\n\n\t\tthis._path.forEachPolygon(function (shell, holes) {\n\t\t\tfound = found.concat(search(point, maxDist, shell, map, true));\n\n\t\t\tholes.forEach(function (latlngs) {\n\t\t\t\tfound = found.concat(search(point, maxDist, latlngs, map, true));\n\t\t\t}, this);\n\t\t}, this);\n\n\t\treturn found;\n\t},\n\n\t_onNewHole: function (evt) {\n\t\tif (this._shellHole) {\n\t\t\tdelete this._makingHole;\n\t\t\tvar polygons = this._path.getLatLngs();\n\t\t\tif (this._path.getType() === L.Polygon.POLYGON) {\n\t\t\t\tpolygons = [polygons];\n\t\t\t}\n\n\t\t\tthis._newPolygonHole.disable();\n\n\t\t\tvar index;\n\t\t\tfor (var p=0; p<polygons.length; p++) {\n\t\t\t\tif ((index = polygons[p].indexOf(this._shellHole)) !== -1) {\n\t\t\t\t\tpolygons[p].push(evt.layer.getLatLngs()[0]);\n\n\t\t\t\t\tthis._path.updateBounds();\n\t\t\t\t\tthis._path.redraw();\n\t\t\t\t\tthis._frame.redraw();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t_onPathClickHole: function (evt) {\n\n\t\tif (!this._makingHole && evt.originalEvent.ctrlKey) {\n\t\t\tthis._makingHole = true;\n\n\t\t\tvar point = evt.layerPoint, points, found = [];\n\n\t\t\tthis._path.forEachPolygon(function (shell) {\n\t\t\t\tpoints = shell.map(L.Map.prototype.latLngToLayerPoint, this.getMap());\n\n\t\t\t\tif (L.larva.Util.pointIsInside(point, points)) {\n\t\t\t\t\tfound.push(shell);\n\t\t\t\t}\n\t\t\t}, this);\n\n\t\t\tif (found.length === 1) {\n\t\t\t\tthis._shellHole = found[0];\n\t\t\t\tthis._newPolygonHole = new L.larva.handler.New.Polygon(this.getMap(), L.extend({}, this.options.newHoleOptions, {\n\t\t\t\t\tallowFireOnMap: false\n\t\t\t\t})).on('ldraw:created', this._onNewHole, this);\n\n\t\t\t\tthis._newPolygonHole.enable();\n\t\t\t\tthis._newPolygonHole.addLatLng(evt.latlng);\n\t\t\t}\n\t\t}\n\t},\n\n\t_removeLatLng: function (handleId) {\n\t\tvar latlng = this._frame.getLatLng(handleId),\n\t\t    latlngs = this._path.getLatLngs(),\n\t\t    index, i=0, p=0;\n\n\t\tswitch (this._path.getType()) {\n\t\t\tcase L.Polygon.POLYGON:\n\n\t\t\t\tfor (; i<latlngs.length; i++) {\n\t\t\t\t\tif ((index = latlngs[i].indexOf(latlng)) !== -1) {\n\t\t\t\t\t\tif (latlngs[i].length <= 3) {\n\t\t\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\t\t\t// shell..\n\t\t\t\t\t\t\t\tlatlngs.splice(0, latlngs.length);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tlatlngs.splice(index, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlatlngs[i].splice(index, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tl: for (; p<latlngs.length; p++) {\n\t\t\t\t\t// each polygon\n\t\t\t\t\tfor (i=0; i<latlngs[p].length; i++) {\n\t\t\t\t\t\tif ((index = latlngs[p][i].indexOf(latlng)) !== -1) {\n\t\t\t\t\t\t\tif (latlngs[p][i].length <= 3) {\n\t\t\t\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\t\t\t\t//shell\n\t\t\t\t\t\t\t\t\tlatlngs.splice(p, 1);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tlatlngs[p].splice(i, 1);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tlatlngs[p][i].splice(index, 1);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak l;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\n\t\tthis._path.updateBounds();\n\t\tthis._path.redraw();\n\t\tthis._frame.redraw();\n\t},\n\n\t_restoreCursor: function () {\n\n\t},\n\n\t_setHoleCursor: function () {\n\n\t}\n\n});\n\nL.Polyline.addInitHook(function () {\n\n\tif (this instanceof L.Polygon) {\n\t\tthis.larva.edit = new L.larva.handler.Polygon.Edit(this);\n\t} else {\n\t\tthis.larva.edit = new L.larva.handler.Polyline.Edit(this);\n\t}\n\n});"],"sourceRoot":"/source/"}