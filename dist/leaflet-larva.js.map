{"version":3,"sources":["L.larva.js","package.js","Path.js","Polyline.js","../frame/package.js","../frame/Path.js","../frame/Style.js","../ext/L.Polyline.js","Polyline.Rotate.js","Polyline.Move.js","Polygon.js","Polyline.Resize.js"],"names":["L","larva","version","getHeight","el","offsetHeight","getWidth","offsetWidth","handler","Path","Handler","extend","includes","Evented","prototype","initialize","path","frameStyle","options","setOptions","_path","_frameStyle","addInitHook","Polyline","frame","Layer","statics","TOP_LEFT","TOP_MIDDLE","TOP_RIGHT","MIDDLE_LEFT","MIDDLE_MIDDLE","MIDDLE_RIGHT","BOTTOM_LEFT","BOTTOM_MIDDLE","BOTTOM_RIGHT","pane","beforeAdd","map","getPane","createPane","getComputedStyle","id","_handles","_el","getEvents","zoom","_onMapZoom","getDraggable","_draggable","getFrameClientRect","getBoundingClientRect","getHandle","getPosition","DomUtil","hideHandle","i","arguments","length","style","display","onAdd","create","DomEvent","on","_onStart","forEach","_id","Draggable","START","join","_draggables","_updateFrame","_updateHandles","onRemove","disable","off","stop","remove","empty","setElementStyle","styles","element","setStyle","oldStyle","_style","hide","draggable","enable","removeClass","className","addClass","_updateDraggable","updateBounds","Array","slice","call","evt","fire","sourceEvent","handle","target","document","MOVE","type","_onMove","END","_onEnd","body","left","offsetLeft","top","offsetTop","marginLeft","parseInt","marginTop","setPosition","point","zoomChanged","maintainHandles","currentPosition","handlePosition","bounds","getBounds","southEastPoint","_map","latLngToLayerPoint","getSouthEast","northWestPoint","getNorthWest","computedStyle","add","subtract","x","borderLeftWidth","borderRightWidth","y","borderTopWidth","borderBottomWidth","oldWidth","oldHeight","width","height","scaleBy","right","bottom","widthOf","heightOf","borderWidth","br","bm","bl","mm","ml","mr","tr","tm","tl","pathframe","_pathFrame","Style","Resize","Rotate","forEachLatLng","include","fn","context","latlngs","getLatLngs","isArray","reduce","array","concat","_bounds","LatLngBounds","latlng","addHooks","_frame","addTo","position","touches","centerBounding","_centerElement","cx","cy","clientX","j","clientY","Math","sqrt","sin","_vector","cos","frameBounding","framePosition","dx","dy","projected","newLatLng","rotated","_original","layerPointToLatLng","lat","lng","redraw","centerElement","targetBounding","vector","clone","rotate","Move","_previousCursor","cursor","event","_startPosition","ctrlKey","altKey","dxy","min","abs","move","Polygon","_origin","xscale","yscale","screenX","undefined","screenY","xyscale","max","invertX","invertY","bounding","origin","resize"],"mappings":"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","file":"leaflet-larva.js","sourcesContent":["L.larva = {\n\tversion: '0.1.0',\n\n\tgetHeight: function (el) {\n\t\treturn el.offsetHeight;\n\t},\n\n\tgetWidth: function (el) {\n\t\treturn el.offsetWidth;\n\t}\n};","L.larva.handler = {\n\n};","/**\n * @requires package.js\n * \n * Base class for Path handlers\n */\nL.larva.handler.Path = L.Handler.extend({\n\n\tincludes: [L.Evented.prototype],\n\n\tinitialize: function (path, frameStyle, options) {\n\t\tL.setOptions(this, options);\n\n\t\tthis._path = path;\n\t\tthis._frameStyle = frameStyle;\n\t}\n\n});\n\nL.Path.addInitHook(function () {\n\tthis.larva = {};\n});","/**\n * @requires Path.js\n */\nL.larva.handler.Polyline = L.larva.handler.Path.extend({\n\n\toptions: {\n\t\t\n\t}\n\n});","L.larva.frame = {\n\n};","/**\n * @requires package.js\n */\nL.larva.frame.Path = L.Layer.extend({\n\n\tstatics: {\n\t\tTOP_LEFT: 'tl',\n\t\tTOP_MIDDLE: 'tm',\n\t\tTOP_RIGHT: 'tr',\n\t\tMIDDLE_LEFT: 'ml',\n\t\tMIDDLE_MIDDLE: 'mm',\n\t\tMIDDLE_RIGHT: 'mr',\n\t\tBOTTOM_LEFT: 'bl',\n\t\tBOTTOM_MIDDLE: 'bm',\n\t\tBOTTOM_RIGHT: 'br'\n\t},\n\n\toptions: {\n\t\tpane: 'llarva-path-frame'\n\t},\n\n\tinitialize: function (path) {\n\t\tthis._path = path;\n\t},\n\n\tbeforeAdd: function (map) {\n\t\tif (!map.getPane(this.options.pane)) {\n\t\t\tmap.createPane(this.options.pane);\n\t\t}\n\t},\n\n\tgetComputedStyle: function(id) {\n\t\tif (id) {\n\t\t\tif (this._handles[id]) {\n\t\t\t\treturn getComputedStyle(this._handles[id]);\n\t\t\t}\n\t\t} else {\n\t\t\treturn getComputedStyle(this._el);\n\t\t}\n\t},\n\n\tgetEvents: function () {\n\t\treturn {\n\t\t\tzoom: this._onMapZoom\n\t\t};\n\t},\n\n\tgetDraggable: function () {\n\t\treturn this._draggable;\n\t},\n\n\tgetFrameClientRect: function () {\n\t\treturn this._el.getBoundingClientRect();\n\t},\n\n\tgetHandle: function (id) {\n\t\treturn this._handles[id];\n\t},\n\n\tgetPosition: function(id) {\n\t\tif (id) {\n\t\t\treturn L.DomUtil.getPosition(this._handles[id]);\n\t\t} else {\n\t\t\treturn L.DomUtil.getPosition(this._el);\n\t\t}\n\t},\n\n\thideHandle: function() {\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tif (this._handles[arguments[i]]) {\n\t\t\t\tthis._handles[arguments[i]].style.display = 'none';\n\t\t\t}\n\t\t}\n\t},\n\n\tonAdd: function () {\n\t\tvar el = this._el = L.DomUtil.create('div', 'llarva-pathframe', this.getPane());\n\t\tL.DomEvent.on(el, 'mousedown', this._onStart, this);\n\n\t\tthis._handles = {};\n\n\t\t['tl','tm','tr','ml','mm','mr','bl','bm','br'].forEach(function (id) {\n\n\t\t\tthis._handles[id] = L.DomUtil.create('div', 'llarva-' + id, el);\n\t\t\tthis._handles[id]._id = id;\n\t\t\tL.DomEvent.on(this._handles[id], L.Draggable.START.join(' '), this._onStart, this);\n\n\t\t}, this);\n\n\t\tthis._draggable = new L.Draggable(el);\n\t\tthis._draggables = {};\n\t\tthis._updateFrame(false);\n\t\tthis._updateHandles();\n\t},\n\n\tonRemove: function() {\n\t\tvar id;\n\n\t\tif (this._draggable) {\n\t\t\tthis._draggable.disable();\n\t\t}\n\n\t\tfor (id in this._draggables) {\n\t\t\tthis._draggables[id].disable();\n\t\t}\n\n\t\tL.DomEvent.off(this._el, 'mousedown click', L.DomEvent.stop);\n\n\t\tfor (id in this._handles) {\n\t\t\tL.DomEvent.off(this._handles[id], 'mousedown click', L.DomEvent.stop);\n\t\t}\n\n\t\tL.DomUtil.remove(this._el);\n\t\tL.DomUtil.empty(this._el);\n\n\t\tdelete this._el;\n\t},\n\n\tsetElementStyle: function (styles, element) {\n\t\tif (!element) {\n\t\t\tL.extend(this._el.style, styles);\n\t\t} else {\n\t\t\telement = this._handles[element];\n\n\t\t\tif (element) {\n\t\t\t\tL.extend(element.style, styles);\n\t\t\t}\n\t\t}\n\t},\n\n\tsetStyle: function (style) {\n\t\tvar id, el, oldStyle = this._style;\n\n\t\tfor (id in this._handles) {\n\t\t\tel = this._handles[id];\n\t\t\tel.style.display = 'block';\n\n\t\t\tif (this._draggables[id]) {\n\t\t\t\tthis._draggables[id].disable();\n\t\t\t\tdelete this._draggables[id];\n\t\t\t}\n\n\t\t\t// if (oldStyle) {\n\t\t\t// \tL.DomUtil.removeClass(el, oldStyle.className + '-' + id);\n\t\t\t// }\n\n\t\t\t// L.DomUtil.addClass(el, style.className + '-' + id);\n\n\t\t\tif (style[id]) {\n\t\t\t\tif (style[id].hide) {\n\t\t\t\t\tel.style.display = 'none';\n\t\t\t\t}\n\n\t\t\t\tif (style[id].draggable) {\n\t\t\t\t\tthis._draggables[id] = new L.Draggable(el);\n\t\t\t\t\tthis._draggables[id].enable();\n\t\t\t\t\tL.DomEvent.off(el, 'mousedown click', L.DomEvent.stop);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (oldStyle) {\n\t\t\tL.DomUtil.removeClass(this._el, oldStyle.className);\n\t\t}\n\n\t\tL.DomUtil.addClass(this._el, style.className);\n\n\t\tthis._style = style;\n\n\t\tthis._updateHandles();\n\n\t\tfor (id in this._draggables) {\n\t\t\tthis._updateDraggable(id);\n\t\t}\n\t},\n\n\tupdateBounds: function () {\n\t\tthis._updateFrame(false, Array.prototype.slice.call(arguments, 0));\n\t},\n\n\t_onStart: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\n\t\tthis.fire('drag:start', {\n\t\t\tsourceEvent: evt,\n\t\t\thandle: evt.target._id\n\t\t});\n\n\t\tL.DomEvent\n\t\t\t.on(document, L.Draggable.MOVE[evt.type], this._onMove, this)\n\t\t\t.on(document, L.Draggable.END[evt.type], this._onEnd, this);\n\n\t\tL.DomUtil.addClass(document.body, 'leaflet-dragging');\n\t},\n\n\t_onMapZoom: function () {\n\t\tthis._updateFrame(true);\n\t},\n\n\t_onMove: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\n\t\tthis.fire('drag:move', {\n\t\t\tsourceEvent: evt\n\t\t});\n\t},\n\n\t_onEnd: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\n\t\tfor (var id in L.Draggable.MOVE) {\n\t\t\tL.DomEvent\n\t\t\t\t.off(document, L.Draggable.MOVE[id], this._onMove, this)\n\t\t\t\t.off(document, L.Draggable.END[id], this._onEnd, this);\n\t\t}\n\n\t\tL.DomUtil.removeClass(document.body, 'leaflet-dragging');\n\n\t\tthis.fire('drag:end', {\n\t\t\tsourceEvent: evt\n\t\t});\n\t},\n\n\t_updateDraggable: function (id) {\n\t\tvar el = this._handles[id];\n\t\tvar left = el.offsetLeft,\n\t\ttop = el.offsetTop;\n\n\t\tif (el.style.marginLeft) {\n\t\t\tleft -= parseInt(el.style.marginLeft);\n\t\t}\n\n\t\tif (el.style.marginTop) {\n\t\t\ttop -= parseInt(el.style.marginTop);\n\t\t}\n\n\t\tL.extend(el.style, {\n\t\t\tleft: '0px', top: '0px'\n\t\t});\n\n\t\tL.DomUtil.setPosition(el, L.point(left, top));\n\t},\n\n\t_updateFrame: function (zoomChanged, maintainHandles) {\n\t\tvar id,\n\t\t    currentPosition = L.DomUtil.getPosition(this._el),\n\t\t    handle,\n\t\t    handlePosition;\n\n\t\tvar bounds = this._path.getBounds();\n\n\t\tvar southEastPoint = this._map.latLngToLayerPoint(bounds.getSouthEast()),\n\t\tnorthWestPoint = this._map.latLngToLayerPoint(bounds.getNorthWest());\n\n\t\tvar computedStyle = getComputedStyle(this._el);\n\n\t\tif (maintainHandles && maintainHandles.length) {\n\n\t\t\tif (currentPosition) {\n\t\t\t\tfor (var i=0; i<maintainHandles.length; i++) {\n\t\t\t\t\t\n\t\t\t\t\thandle = this._handles[maintainHandles[i]];\n\t\t\t\t\tif (handle && (handlePosition = L.DomUtil.getPosition(handle))) {\n\t\t\t\t\t\thandlePosition = handlePosition.add(currentPosition);\n\t\t\t\t\t\tL.DomUtil.setPosition(handle, handlePosition.subtract(northWestPoint));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tL.DomUtil.setPosition(this._el, northWestPoint);\n\n\t\tvar x = parseInt(computedStyle.borderLeftWidth) + parseInt(computedStyle.borderRightWidth),\n\t\ty = parseInt(computedStyle.borderTopWidth) + parseInt(computedStyle.borderBottomWidth);\n\n\t\tvar oldWidth, oldHeight;\n\t\tif (zoomChanged) {\n\t\t\toldWidth = this._el.offsetWidth;\n\t\t\toldHeight = this._el.offsetHeight;\n\t\t}\n\n\t\tthis._el.style.width = (southEastPoint.x - northWestPoint.x - x) + 'px';\n\t\tthis._el.style.height = (southEastPoint.y - northWestPoint.y - y) + 'px';\n\n\t\tif (zoomChanged) {\n\n\t\t\tfor (id in this._handles) {\n\t\t\t\thandle = this._handles[id];\n\t\t\t\thandlePosition = L.DomUtil.getPosition(handle);\n\n\t\t\t\tif (handlePosition) {\n\t\t\t\t\tL.DomUtil.setPosition(handle, handlePosition.scaleBy(L.point(\n\t\t\t\t\t\tthis._el.offsetWidth / oldWidth, \n\t\t\t\t\t\tthis._el.offsetHeight / oldHeight\n\t\t\t\t\t)));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.southEastPoint = southEastPoint;\n\t\tthis.northWestPoint = northWestPoint;\n\t},\n\n\t_updateHandles: function () {\n\t\tvar el, computedStyle, right, bottom, left, top;\n\t\tvar widthOf = L.larva.getWidth, heightOf = L.larva.getHeight;\n\n\t\tcomputedStyle = getComputedStyle(this._el);\n\n\t\tvar borderWidth = {\n\t\t\tbottom: 'borderBottomWidth',\n\t\t\tleft: 'borderLeftWidth',\n\t\t\tright: 'borderRightWidth',\n\t\t\ttop: 'borderTopWidth'\n\t\t};\n\n\t\tfor (var id in borderWidth) {\n\t\t\tborderWidth[id] = parseInt(computedStyle[borderWidth[id]]) / 2;\n\t\t}\n\n\t\tel = this._handles.br;\n\n\t\tright = (- (widthOf(el) / 2) - borderWidth.right) + 'px';\n\t\tbottom = (- (heightOf(el) / 2) - borderWidth.bottom) + 'px';\n\n\t\tL.extend(el.style, {\n\t\t\tright: right,\n\t\t\tbottom: bottom\n\t\t});\n\n\t\tel = this._handles.bm;\n\t\tleft = (-(widthOf(el) / 2)) + 'px';\n\t\tbottom = (- (heightOf(el) / 2) - borderWidth.bottom) + 'px';\n\n\t\tL.extend(el.style, {\n\t\t\tleft: '50%',\n\t\t\t'margin-left': left,\n\t\t\tbottom: bottom\n\t\t});\n\n\t\tel = this._handles.bl;\n\t\tleft = (-(widthOf(el) / 2) - borderWidth.left) + 'px';\n\t\tbottom = (- (heightOf(el) / 2) - borderWidth.bottom) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tleft: left,\n\t\t\tbottom: bottom\n\t\t});\n\n\t\tel = this._handles.mm;\n\t\tleft = -(widthOf(el) / 2) + 'px';\n\t\ttop = -(heightOf(el) / 2) + 'px';\n\t\tL.extend(el.style, {\n\t\t\ttop: '50%',\n\t\t\tleft: '50%',\n\t\t\t'margin-left': left,\n\t\t\t'margin-top': top\n\t\t});\n\n\t\tel = this._handles.ml;\n\t\ttop = -(heightOf(el) / 2) + 'px';\n\t\tleft = (-(widthOf(el) / 2) - borderWidth.left) + 'px';\n\t\tL.extend(el.style, {\n\t\t\ttop: '50%',\n\t\t\t'margin-top': top,\n\t\t\tleft: left\n\t\t});\n\n\t\tel = this._handles.mr;\n\t\tright = (- (widthOf(el) / 2) - borderWidth.right) + 'px';\n\t\ttop = -(heightOf(el) / 2) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tright: right,\n\t\t\ttop: '50%',\n\t\t\t'margin-top': top\n\t\t});\n\n\t\tel = this._handles.tr;\n\t\tright = (-(widthOf(el) / 2) - borderWidth.right) + 'px';\n\t\ttop = (-(heightOf(el) / 2) - borderWidth.top) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tright: right,\n\t\t\ttop: top\n\t\t});\n\n\t\tel = this._handles.tm;\n\t\ttop = (-(heightOf(el) / 2) - borderWidth.top) + 'px';\n\t\tleft = -(widthOf(el) / 2) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tleft: '50%',\n\t\t\t'margin-left': left,\n\t\t\ttop: top\n\t\t});\n\n\t\tel = this._handles.tl;\n\t\ttop = (-(heightOf(el) / 2) - borderWidth.top) + 'px';\n\t\tleft = (-(widthOf(el) / 2) - borderWidth.left) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tleft: left,\n\t\t\ttop: top\n\t\t});\n\t}\n});\n\nL.larva.frame.path = function pathframe (path) {\n\tif (path && path._pathFrame) {\n\t\treturn path._pathFrame;\n\t}\n\n\treturn (path._pathFrame = new L.larva.frame.Path(path));\n};","/**\n * @requires package.js\n */\n\nL.larva.frame.Style = {\n\t\n};\n\nL.larva.frame.Style.Resize = {\n\tclassName: 'llarva-pathframe-resize',\n\tmm: {\n\t\thide: true\n\t}\n};\n\nL.larva.frame.Style.Rotate = {\n\tclassName: 'llarva-pathframe-rotate',\n\ttm: {\n\t\thide: true\n\t},\n\n\tml: {\n\t\thide: true\n\t},\n\n\tmr: {\n\t\thide: true\n\t},\n\n\tbm: {\n\t\thide: true\n\t},\n\n\tmm: {\n\t\tdraggable: true\n\t}\n};","if (!L.Polyline.prototype.forEachLatLng) {\n\tL.Polyline.include({\n\n\t\tforEachLatLng: function (fn, context) {\n\t\t\tvar latlngs = this.getLatLngs();\n\n\t\t\tif (!latlngs.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (Array.isArray(latlngs[0])) {\n\t\t\t\t// nested array\n\n\t\t\t\tlatlngs = latlngs.reduce(function (array, latlngs) {\n\t\t\t\t\treturn array.concat(latlngs);\n\t\t\t\t}, []);\n\t\t\t}\n\n\t\t\tlatlngs.forEach(fn, context);\n\t\t}\n\t});\n}\n\nif (!L.Polyline.prototype.updateBounds) {\n\tL.Polyline.include({\n\n\t\tupdateBounds: function () {\n\t\t\tvar bounds = this._bounds = new L.LatLngBounds();\n\n\t\t\tthis.forEachLatLng(function (latlng) {\n\t\t\t\tbounds.extend(latlng);\n\t\t\t});\n\t\t}\n\n\t});\n}","/**\n * @requires Polyline.js\n * @requires ../frame/Path.js\n * @requires ../frame/Style.js\n * @requires ../ext/L.Polyline.js\n */\n\nL.larva.handler.Polyline.Rotate = L.larva.handler.Polyline.extend({\n\n\taddHooks: function () {\n\t\tthis._frame = L.larva.frame.path(this._path);\n\t\tthis._frame.addTo(this._path._map);\n\n\t\tthis._frame.setStyle(this._frameStyle);\n\n\t\tthis._frame.on('drag:start', this._onStart, this);\n\t},\n\n\t_onEnd: function () {\n\t\tthis._frame\n\t\t\t.off('drag:move', this._onMove, this)\n\t\t\t.off('drag:end', this._onEnd, this);\n\t},\n\n\t_onMove: function (evt) {\n\t\tvar position = evt.sourceEvent.touches ? evt.sourceEvent.touches[0] : evt.sourceEvent;\n\n\t\tvar centerBounding = this._centerElement.getBoundingClientRect();\n\n\t\tvar cx = (centerBounding.left + centerBounding.width / 2),\n\t\t    cy = (centerBounding.top + centerBounding.height / 2);\n\n\t\tvar i = position.clientX - cx,\n\t\t    j = position.clientY - cy;\n\n\t\tvar length = Math.sqrt(i * i + j * j);\n\n\t\t// cross product\n\t\tvar sin = (this._vector.i * j - this._vector.j * i) / length;\n\n\t\t// scalar product\n\t\tvar cos = (this._vector.i * i + this._vector.j * j) / length;\n\n\t\tvar frameBounding = this._frame.getFrameClientRect(),\n\t\t    framePosition = this._frame.getPosition();\n\n\t\tcx = (cx - frameBounding.left) + framePosition.x;\n\t\tcy = (cy - frameBounding.top) + framePosition.y;\n\n\t\tvar dx = cx * (1 - cos) + cy * sin;\n\t\tvar dy = cy * (1 - cos) - cx * sin;\n\n\t\tvar projected, newLatLng, rotated = L.point(0, 0);\n\n\t\tthis._path.forEachLatLng(function (latlng) {\n\t\t\tprojected = this._path._map.latLngToLayerPoint(latlng._original);\n\n\t\t\trotated.x = projected.x * cos - projected.y * sin + dx;\n\t\t\trotated.y = projected.x * sin + projected.y * cos + dy;\n\n\t\t\tnewLatLng = this._path._map.layerPointToLatLng(rotated);\n\t\t\tlatlng.lat = newLatLng.lat;\n\t\t\tlatlng.lng = newLatLng.lng;\n\t\t}, this);\n\n\t\tthis._path.updateBounds();\n\t\tthis._frame.updateBounds(L.larva.frame.Path.MIDDLE_MIDDLE);\n\t\tthis._path.redraw();\n\t},\n\n\t_onStart: function (evt) {\n\t\tif (!evt.handle || evt.handle === L.larva.frame.Path.MIDDLE_MIDDLE) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar centerElement = this._centerElement = this._frame.getHandle(L.larva.frame.Path.MIDDLE_MIDDLE);\n\n\t\tvar centerBounding = centerElement.getBoundingClientRect(),\n\t\t    targetBounding = evt.sourceEvent.target.getBoundingClientRect();\n\n\t\tvar vector = this._vector = {\n\t\t\ti: (targetBounding.left + targetBounding.width / 2) - (centerBounding.left - centerBounding.width / 2),\n\t\t\tj: (targetBounding.top + targetBounding.height / 2) - (centerBounding.top - centerBounding.height / 2)\n\t\t};\n\n\t\tvector.length = Math.sqrt(vector.i * vector.i + vector.j * vector.j);\n\n\t\tvector.i = vector.i / vector.length;\n\t\tvector.j = vector.j / vector.length;\n\n\t\tthis._path.forEachLatLng(function (latlng) {\n\t\t\tlatlng._original = latlng.clone();\n\t\t});\n\n\t\tthis._frame\n\t\t\t.on('drag:move', this._onMove, this)\n\t\t\t.on('drag:end', this._onEnd, this);\n\t}\n\n});\n\nL.Polyline.addInitHook(function () {\n\tthis.larva.rotate = new L.larva.handler.Polyline.Rotate(this, L.larva.frame.Style.Rotate);\n});","/**\n * @requires Polyline.js\n * @requires ../frame/Path.js\n * @requires ../frame/Style.js\n * @requires ../ext/L.Polyline.js\n * \n * @type {[type]}\n */\nL.larva.handler.Polyline.Move = L.larva.handler.Polyline.extend({\n\n\taddHooks: function() {\n\t\tthis._frame = L.larva.frame.path(this._path).addTo(this._path._map);\n\t\tthis._frame.on('drag:start', this._onStart, this);\n\n\t\tthis._previousCursor = this._frame.getComputedStyle().cursor;\n\t\tthis._frame.setElementStyle({\n\t\t\tcursor: 'move'\n\t\t});\n\t},\n\n\t_onEnd: function () {\n\n\t\tthis._frame\n\t\t\t.off('drag:move', this._onMove, this)\n\t\t\t.off('drag:end', this._onEnd);\n\t},\n\n\t_onMove: function (evt) {\n\t\tvar event = evt.sourceEvent.touches ? evt.sourceEvent.touches : evt.sourceEvent;\n\t\tvar dx = event.clientX - this._startPosition.x,\n\t\t    dy = event.clientY - this._startPosition.y;\n\n\t\tif (event.ctrlKey && event.altKey) {\n\t\t\tvar dxy = Math.min(Math.abs(dx), Math.abs(dy));\n\n\t\t\tdx = dx >= 0 ? dxy : -dxy;\n\t\t\tdy = dy >= 0 ? dxy : -dxy;\n\t\t} else if (event.ctrlKey) {\n\t\t\tdy = null;\n\t\t} else if (event.altKey) {\n\t\t\tdx = null;\n\t\t}\n\n\t\tvar projected, newLatLng;\n\n\t\tthis._path.forEachLatLng(function (latlng) {\n\t\t\tprojected = this._path._map.latLngToLayerPoint(latlng._original);\n\n\t\t\tif (dx) {\n\t\t\t\tprojected.x += dx;\n\t\t\t}\n\n\t\t\tif (dy) {\n\t\t\t\tprojected.y += dy;\n\t\t\t}\n\n\t\t\tnewLatLng = this._path._map.layerPointToLatLng(projected);\n\t\t\tlatlng.lat = newLatLng.lat;\n\t\t\tlatlng.lng = newLatLng.lng;\n\t\t}, this);\n\n\t\tthis._path.updateBounds();\n\t\tthis._frame.updateBounds();\n\t\tthis._path.redraw();\n\t},\n\n\t_onStart: function (evt) {\n\t\tif (!evt.handle) {\n\t\t\tthis._path.forEachLatLng(function (latlng) {\n\t\t\t\tlatlng._original = latlng.clone();\n\t\t\t});\n\n\t\t\tvar event = evt.sourceEvent.touches ? \n\t\t\t                    evt.sourceEvent.touches[0] : evt.sourceEvent;\n\n\t\t\tthis._startPosition = {\n\t\t\t\tx: event.clientX,\n\t\t\t\ty: event.clientY\n\t\t\t};\n\n\t\t\tthis._frame\n\t\t\t\t.on('drag:move', this._onMove, this)\n\t\t\t\t.on('drag:end', this._onEnd, this);\n\t\t}\n\n\t}\n\n});\n\nL.Polyline.addInitHook(function () {\n\tthis.larva.move = new L.larva.handler.Polyline.Move(this, L.larva.frame.Style.Move);\n});","/**\n * @requires Polyline.js\n */\nL.larva.handler.Polygon = L.larva.handler.Polyline.extend({\n\n});","/**\n * @requires Polygon.js\n * @requires ../frame/Path.js\n * @requires ../frame/Style.js\n * @requires ../ext/L.Polyline.js\n */\nL.larva.handler.Polyline.Resize = L.larva.handler.Polyline.extend({\n\n\taddHooks: function () {\n\t\tthis._frame = L.larva.frame.path(this._path).addTo(this._path._map);\n\n\t\tthis._frame.setStyle(this._frameStyle);\n\n\t\tthis._frame.on('drag:start', this._onStart, this);\n\t},\n\n\t_onEnd: function () {\n\t\tthis._frame\n\t\t\t.off('drag:move', this._onMove, this)\n\t\t\t.off('drag:end', this._onEnd, this);\n\n\t\tdelete this._origin;\n\t},\n\n\t_onMove: function (evt) {\n\t\tvar position = evt.sourceEvent.touches ? evt.sourceEvent.touches[0] : evt.sourceEvent;\n\n\n\t\tvar xscale = null, yscale = null;\n\n\t\tif (this._origin.screenX !== undefined) {\n\t\t\txscale = (position.clientX - this._origin.screenX) / this._origin.width;\n\t\t}\n\n\t\tif (this._origin.screenY !== undefined) {\n\t\t\tyscale = (position.clientY - this._origin.screenY) / this._origin.height;\n\t\t}\n\n\t\tif (xscale === null && yscale === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (xscale !== null && yscale !== null) {\n\t\t\tif (evt.sourceEvent.ctrlKey) {\n\t\t\t\tvar xyscale = Math.max(Math.abs(xscale), Math.abs(yscale));\n\n\t\t\t\txscale = xscale >= 0 ? xyscale : -xyscale;\n\t\t\t\tyscale = yscale >= 0 ? xyscale : -xyscale;\n\n\t\t\t\tif (this._origin.invertX) {\n\t\t\t\t\txscale = -xscale;\n\t\t\t\t}\n\n\t\t\t\tif (this._origin.invertY) {\n\t\t\t\t\tyscale = -yscale;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar projected, newLatLng;\n\n\t\tthis._path.forEachLatLng(function (latlng) {\n\t\t\tprojected = this._path._map.latLngToLayerPoint(latlng._original);\n\n\t\t\tif (xscale !== null) {\n\t\t\t\tif (this._origin.invertX) {\n\t\t\t\t\tprojected.x = this._origin.x - projected.x;\n\t\t\t\t} else {\n\t\t\t\t\tprojected.x = projected.x - this._origin.x;\n\t\t\t\t}\n\n\t\t\t\tprojected.x = projected.x * xscale + this._origin.x;\n\t\t\t}\n\n\n\t\t\tif (yscale !== null) {\n\n\t\t\t\tif (this._origin.invertY) {\n\t\t\t\t\tprojected.y = this._origin.y - projected.y;\n\t\t\t\t} else {\n\t\t\t\t\tprojected.y = projected.y - this._origin.y;\n\t\t\t\t}\n\n\t\t\t\tprojected.y = projected.y * yscale + this._origin.y;\n\t\t\t}\n\n\t\t\tnewLatLng = this._path._map.layerPointToLatLng(projected);\n\t\t\tlatlng.lat = newLatLng.lat;\n\t\t\tlatlng.lng = newLatLng.lng;\n\t\t}, this);\n\n\t\tthis._path.updateBounds();\n\t\tthis._frame.updateBounds();\n\t\tthis._path.redraw();\n\n\t},\n\n\t_onStart: function (evt) {\n\n\t\tthis._path.forEachLatLng(function (latlng) {\n\t\t\tlatlng._original = latlng.clone();\n\t\t});\n\n\n\t\tvar bounding = this._frame.getFrameClientRect();\n\n\t\tvar origin = this._origin = {\n\t\t\theight: bounding.height,\n\t\t\twidth: bounding.width\n\t\t};\n\n\t\tvar position = this._frame.getPosition();\n\n\t\tswitch (evt.handle) {\n\t\t\tcase L.larva.frame.Path.TOP_LEFT:\n\t\t\t\torigin.x = position.x + bounding.width;\n\t\t\t\torigin.y = position.y + bounding.height;\n\t\t\t\torigin.screenX = bounding.right;\n\t\t\t\torigin.screenY = bounding.bottom;\n\t\t\t\torigin.invertX = true;\n\t\t\t\torigin.invertY = true;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.TOP_MIDDLE:\n\t\t\t\torigin.y = position.y + bounding.height;\n\t\t\t\torigin.screenY = bounding.bottom;\n\t\t\t\torigin.invertY = true;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.TOP_RIGHT:\n\t\t\t\torigin.x = position.x;\n\t\t\t\torigin.y = position.y + bounding.height;\n\t\t\t\torigin.screenX = bounding.left;\n\t\t\t\torigin.screenY = bounding.bottom;\n\t\t\t\torigin.invertY = true;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.MIDDLE_LEFT:\n\t\t\t\torigin.x = position.x + bounding.width;\n\t\t\t\torigin.screenX = bounding.right;\n\t\t\t\torigin.invertX = true;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.MIDDLE_RIGHT:\n\t\t\t\torigin.x = position.x;\n\t\t\t\torigin.screenX = bounding.left;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.BOTTOM_LEFT:\n\t\t\t\torigin.x = position.x + bounding.width;\n\t\t\t\torigin.y = position.y;\n\t\t\t\torigin.screenX = bounding.right;\n\t\t\t\torigin.screenY = bounding.top;\n\t\t\t\torigin.invertX = true;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.BOTTOM_MIDDLE:\n\t\t\t\torigin.y = position.y;\n\t\t\t\torigin.screenY = bounding.top;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.BOTTOM_RIGHT:\n\t\t\t\torigin.x = position.x;\n\t\t\t\torigin.y = position.y;\n\t\t\t\torigin.screenY = bounding.top;\n\t\t\t\torigin.screenX = bounding.left;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tthis._frame\n\t\t\t.on('drag:move', this._onMove, this)\n\t\t\t.on('drag:end', this._onEnd, this);\n\t}\n\n});\n\nL.Polyline.addInitHook(function () {\n\tthis.larva.resize = new L.larva.handler.Polyline.Resize(this, L.larva.frame.Style.Resize);\n});"],"sourceRoot":"/source/"}