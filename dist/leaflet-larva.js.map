{"version":3,"sources":["L.larva.js","package.js","Path.js","Polyline.js","../PathFrame.js","../ext/L.Polyline.js","Polyline.Move.js"],"names":["L","larva","version","handler","Path","Handler","extend","includes","Evented","prototype","initialize","path","options","setOptions","_path","Polyline","PathFrame","Layer","pane","beforeAdd","map","getPane","createPane","getEvents","zoom","_onZoom","getDraggable","_draggable","getPosition","DomUtil","_el","onAdd","el","create","DomEvent","on","stop","Draggable","bounds","getBounds","southEastPoint","_map","latLngToLayerPoint","getSouthEast","northWestPoint","getNorthWest","setPosition","style","width","x","height","y","include","forEachLatLng","fn","context","latlngs","getLatLngs","length","Array","isArray","reduce","array","concat","forEach","Move","addHooks","_frame","addTo","drag","_onDrag","dragstart","_onDragStart","dragend","_onDragEnd","enable","offset","subtract","_layerProjectedPoint","projected","newLatLng","console","log","latlng","_original","layerPointToLatLng","add","lat","lng","setLatLngs","clone","addInitHook","move"],"mappings":"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","file":"leaflet-larva.js","sourcesContent":["L.larva = {\n\tversion: '0.1.0'\n};","L.larva.handler = {\n\n};","/**\n * @requires package.js\n * \n * Base class for Path handlers\n */\nL.larva.handler.Path = L.Handler.extend({\n\n\tincludes: [L.Evented.prototype],\n\n\tinitialize: function (path, options) {\n\t\tL.setOptions(this, options);\n\n\t\tthis._path = path;\n\t}\n\n});","/**\n * @requires Path.js\n */\nL.larva.handler.Polyline = L.larva.handler.Path.extend({\n\n\toptions: {\n\t\t\n\t}\n\n});","L.larva.PathFrame = L.Layer.extend({\n\n\toptions: {\n\t\tpane: 'llarva'\n\t},\n\n\tinitialize: function (path) {\n\t\tthis._path = path;\n\t},\n\n\tbeforeAdd: function (map) {\n\t\tif (!map.getPane(this.options.pane)) {\n\t\t\tmap.createPane(this.options.pane);\n\t\t}\n\t},\n\n\tgetEvents: function () {\n\t\treturn {\n\t\t\tzoom: this._onZoom\n\t\t};\n\t},\n\n\tgetDraggable: function () {\n\t\treturn this._draggable;\n\t},\n\n\tgetPosition: function() {\n\t\treturn L.DomUtil.getPosition(this._el);\n\t},\n\n\tonAdd: function () {\n\t\tvar el = this._el = L.DomUtil.create('div', 'llarva-pathframe', this.getPane());\n\t\tL.DomEvent.on(el, 'mousedown', L.DomEvent.stop);\n\n\t\tthis._draggable = new L.Draggable(el);\n\n\t\tthis._onZoom();\n\t},\n\n\t_onZoom: function () {\n\t\tvar bounds = this._path.getBounds();\n\n\t\tvar southEastPoint = this._map.latLngToLayerPoint(bounds.getSouthEast()),\n\t\tnorthWestPoint = this._map.latLngToLayerPoint(bounds.getNorthWest());\n\n\t\tL.DomUtil.setPosition(this._el, northWestPoint);\n\n\t\tthis._el.style.width = (southEastPoint.x - northWestPoint.x) + 'px';\n\t\tthis._el.style.height = (southEastPoint.y - northWestPoint.y) + 'px';\n\n\t\tthis.southEastPoint = southEastPoint;\n\t\tthis.northWestPoint = northWestPoint;\n\t}\n\n});","L.Polyline.include({\n\n\tforEachLatLng: function (fn, context) {\n\t\tvar latlngs = this.getLatLngs();\n\n\t\tif (!latlngs.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (Array.isArray(latlngs[0])) {\n\t\t\t// nested array\n\n\t\t\tlatlngs = latlngs.reduce(function (array, latlngs) {\n\t\t\t\treturn array.concat(latlngs);\n\t\t\t}, []);\n\t\t}\n\n\t\tlatlngs.forEach(fn, context);\n\t}\n\n});","/**\n * @requires Polyline.js\n * @requires ../PathFrame.js\n * @requires ../ext/L.Polyline.js\n * \n * @type {[type]}\n */\nL.larva.handler.Polyline.Move = L.larva.handler.Polyline.extend({\n\n\taddHooks: function() {\n\t\tthis._frame = new L.larva.PathFrame(this._path).addTo(this._path._map);\n\t\tthis._draggable = this._frame.getDraggable();\n\n\t\tthis._draggable.on({\n\t\t\tdrag: this._onDrag,\n\t\t\tdragstart: this._onDragStart,\n\t\t\tdragend: this._onDragEnd,\n\t\t}, this);\n\n\t\tthis._draggable.enable();\n\t},\n\n\t_onDrag: function () {\n\t\tvar map = this._path._map;\n\t\tvar offset = this._frame.getPosition().subtract(this._layerProjectedPoint);\n\t\tvar projected, newLatLng;\n\n\t\tconsole.log(offset);\n\n\t\tthis._path.forEachLatLng(function (latlng) {\n\n\t\t\tprojected = map.latLngToLayerPoint(latlng._original);\n\t\t\tnewLatLng = map.layerPointToLatLng(projected.add(offset));\n\t\t\tlatlng.lat = newLatLng.lat;\n\t\t\tlatlng.lng = newLatLng.lng;\n\t\t});\n\n\t\tthis._path.setLatLngs(this._path.getLatLngs());\n\t},\n\n\t_onDragEnd: function () {\n\n\t},\n\n\t_onDragStart: function () {\n\t\tthis._layerProjectedPoint = this._path._map.latLngToLayerPoint(this._path.getBounds().getNorthWest());\n\t\tthis._path.forEachLatLng(function (latlng) {\n\t\t\tlatlng._original = latlng.clone();\n\t\t});\n\t}\n\n});\n\nL.Polyline.addInitHook(function () {\n\n\tif (!this.larva) {\n\t\tthis.larva = {};\n\t}\n\n\tthis.larva.move = new L.larva.handler.Polyline.Move(this);\n\n});"],"sourceRoot":"/source/"}