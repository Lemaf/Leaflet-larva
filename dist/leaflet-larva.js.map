{"version":3,"sources":["L.larva.js","package.js","Path.js","Polyline.js","Polygon.js","../frame/package.js","../frame/Path.js","../ext/L.Polyline.js","../frame/Style.js","Polyline.Resize.js","Polyline.Move.js"],"names":["L","larva","version","getHeight","el","offsetHeight","getWidth","offsetWidth","handler","Path","Handler","extend","includes","Evented","prototype","initialize","path","frameStyle","options","setOptions","_path","_frameStyle","addInitHook","Polyline","Polygon","frame","Layer","statics","TOP_LEFT","TOP_MIDDLE","TOP_RIGHT","MIDDLE_LEFT","MIDDLE_MIDDLE","MIDDLE_RIGHT","BOTTOM_LEFT","BOTTOM_MIDDLE","BOTTOM_RIGHT","pane","_pathFrame","beforeAdd","map","getPane","createPane","getEvents","zoom","_updateFrame","getDraggable","_draggable","getFrameClientRect","_el","getBoundingClientRect","getPosition","DomUtil","hideHandle","i","arguments","length","_handles","style","display","onAdd","create","DomEvent","on","_onStart","forEach","id","_id","Draggable","START","join","_draggables","_updateHandles","onRemove","disable","off","stop","remove","empty","setStyle","oldStyle","_style","hide","draggable","enable","_updateDraggable","removeClass","className","addClass","updateBounds","evt","fire","sourceEvent","target","document","MOVE","type","_onMove","END","_onEnd","body","left","offsetLeft","top","offsetTop","marginLeft","parseInt","marginTop","setPosition","point","bounds","getBounds","southEastPoint","_map","latLngToLayerPoint","getSouthEast","northWestPoint","getNorthWest","computedStyle","getComputedStyle","x","borderLeftWidth","borderRightWidth","y","borderTopWidth","borderBottomWidth","width","height","right","bottom","widthOf","heightOf","borderWidth","br","bm","bl","mm","ml","mr","tr","tm","tl","pathframe","forEachLatLng","include","fn","context","latlngs","getLatLngs","Array","isArray","reduce","array","concat","_bounds","LatLngBounds","latlng","Style","Move","Resize","Rotate","addHooks","_frame","addTo","_onDragStart","_onDragMove","_onDragEnd","position","touches","xscale","yscale","_origin","screenX","undefined","clientX","screenY","clientY","ctrlKey","Math","max","abs","invertX","invertY","projected","newLatLng","_original","layerPointToLatLng","lat","lng","redraw","clone","bounding","origin","resize","mouseEvt","pos","dx","dy","_axis","_startPoint","vector","add","_startNorthWest","startPos","move"],"mappings":"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","file":"leaflet-larva.js","sourcesContent":["L.larva = {\n\tversion: '0.1.0',\n\n\tgetHeight: function (el) {\n\t\treturn el.offsetHeight;\n\t},\n\n\tgetWidth: function (el) {\n\t\treturn el.offsetWidth;\n\t}\n};","L.larva.handler = {\n\n};","/**\n * @requires package.js\n * \n * Base class for Path handlers\n */\nL.larva.handler.Path = L.Handler.extend({\n\n\tincludes: [L.Evented.prototype],\n\n\tinitialize: function (path, frameStyle, options) {\n\t\tL.setOptions(this, options);\n\n\t\tthis._path = path;\n\t\tthis._frameStyle = frameStyle;\n\t}\n\n});\n\nL.Path.addInitHook(function () {\n\tthis.larva = {};\n});","/**\n * @requires Path.js\n */\nL.larva.handler.Polyline = L.larva.handler.Path.extend({\n\n\toptions: {\n\t\t\n\t}\n\n});","/**\n * @requires Polyline.js\n */\nL.larva.handler.Polygon = L.larva.handler.Polyline.extend({\n\n});","L.larva.frame = {\n\n};","/**\n * @requires package.js\n */\nL.larva.frame.Path = L.Layer.extend({\n\n\tstatics: {\n\t\tTOP_LEFT: 'tl',\n\t\tTOP_MIDDLE: 'tm',\n\t\tTOP_RIGHT: 'tr',\n\t\tMIDDLE_LEFT: 'ml',\n\t\tMIDDLE_MIDDLE: 'mm',\n\t\tMIDDLE_RIGHT: 'mr',\n\t\tBOTTOM_LEFT: 'bl',\n\t\tBOTTOM_MIDDLE: 'bm',\n\t\tBOTTOM_RIGHT: 'br'\n\t},\n\n\toptions: {\n\t\tpane: 'llarvaPathframe'\n\t},\n\n\tinitialize: function (path) {\n\t\tif (path._pathFrame && path._pathFrame instanceof L.larva.frame.Path) {\n\t\t\treturn path._pathFrame;\n\t\t}\n\n\t\tpath._pathFrame = this;\n\t\tthis._path = path;\n\t},\n\n\tbeforeAdd: function (map) {\n\t\tif (!map.getPane(this.options.pane)) {\n\t\t\tmap.createPane(this.options.pane);\n\t\t}\n\t},\n\n\tgetEvents: function () {\n\t\treturn {\n\t\t\tzoom: this._updateFrame\n\t\t};\n\t},\n\n\tgetDraggable: function () {\n\t\treturn this._draggable;\n\t},\n\n\tgetFrameClientRect: function () {\n\t\treturn this._el.getBoundingClientRect();\n\t},\n\n\tgetPosition: function() {\n\t\treturn L.DomUtil.getPosition(this._el);\n\t},\n\n\thideHandle: function() {\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tif (this._handles[arguments[i]]) {\n\t\t\t\tthis._handles[arguments[i]].style.display = 'none';\n\t\t\t}\n\t\t}\n\t},\n\n\tonAdd: function () {\n\t\tvar el = this._el = L.DomUtil.create('div', 'llarva-pathframe', this.getPane());\n\t\tL.DomEvent.on(el, 'mousedown', this._onStart, this);\n\n\t\tthis._handles = {};\n\n\t\t['tl','tm','tr','ml','mm','mr','bl','bm','br'].forEach(function (id) {\n\n\t\t\tthis._handles[id] = L.DomUtil.create('div', 'llarva-' + id, el);\n\t\t\tthis._handles[id]._id = id;\n\t\t\tL.DomEvent.on(this._handles[id], L.Draggable.START.join(' '), this._onStart, this);\n\n\t\t}, this);\n\n\t\tthis._draggable = new L.Draggable(el);\n\t\tthis._draggables = {};\n\t\tthis._updateFrame();\n\t\tthis._updateHandles();\n\t},\n\n\tonRemove: function() {\n\t\tvar id;\n\n\t\tif (this._draggable) {\n\t\t\tthis._draggable.disable();\n\t\t}\n\n\t\tfor (id in this._draggables) {\n\t\t\tthis._draggables[id].disable();\n\t\t}\n\n\t\tL.DomEvent.off(this._el, 'mousedown click', L.DomEvent.stop);\n\n\t\tfor (id in this._handles) {\n\t\t\tL.DomEvent.off(this._handles[id], 'mousedown click', L.DomEvent.stop);\n\t\t}\n\n\t\tL.DomUtil.remove(this._el);\n\t\tL.DomUtil.empty(this._el);\n\n\t\tdelete this._el;\n\t},\n\n\tsetStyle: function (style) {\n\t\tvar id, el, oldStyle = this._style;\n\n\t\tfor (id in this._handles) {\n\t\t\tel = this._handles[id];\n\t\t\tel.style.display = 'block';\n\n\t\t\tif (this._draggables[id]) {\n\t\t\t\tthis._draggables[id].disable();\n\t\t\t\tdelete this._draggables[id];\n\t\t\t}\n\n\t\t\t// if (oldStyle) {\n\t\t\t// \tL.DomUtil.removeClass(el, oldStyle.className + '-' + id);\n\t\t\t// }\n\n\t\t\t// L.DomUtil.addClass(el, style.className + '-' + id);\n\n\t\t\tif (style[id]) {\n\t\t\t\tif (style[id].hide) {\n\t\t\t\t\tel.style.display = 'none';\n\t\t\t\t}\n\n\t\t\t\tif (style[id].draggable) {\n\t\t\t\t\tthis._draggables[id] = new L.Draggable(el);\n\t\t\t\t\tthis._draggables[id].enable();\n\t\t\t\t\tL.DomEvent.off(el, 'mousedown click', L.DomEvent.stop);\n\n\t\t\t\t\tthis._updateDraggable(id);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (oldStyle) {\n\t\t\tL.DomUtil.removeClass(this._el, oldStyle.className);\n\t\t}\n\n\t\tL.DomUtil.addClass(this._el, style.className);\n\n\t\tthis._style = style;\n\n\t\tthis._updateHandles();\n\t},\n\n\tupdateBounds: function () {\n\t\tthis._updateFrame();\n\t},\n\n\t_onStart: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\n\t\tthis.fire('drag:start', {\n\t\t\tsourceEvent: evt,\n\t\t\tid: evt.target._id\n\t\t});\n\n\t\tL.DomEvent\n\t\t\t.on(document, L.Draggable.MOVE[evt.type], this._onMove, this)\n\t\t\t.on(document, L.Draggable.END[evt.type], this._onEnd, this);\n\n\t\tL.DomUtil.addClass(document.body, 'leaflet-dragging');\n\t},\n\n\t_onMove: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\n\t\tthis.fire('drag:move', {\n\t\t\tsourceEvent: evt\n\t\t});\n\t},\n\n\t_onEnd: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\n\t\tfor (var id in L.Draggable.MOVE) {\n\t\t\tL.DomEvent\n\t\t\t\t.off(document, L.Draggable.MOVE[id], this._onMove, this)\n\t\t\t\t.off(document, L.Draggable.END[id], this._onEnd, this);\n\t\t}\n\n\t\tL.DomUtil.removeClass(document.body, 'leaflet-dragging');\n\n\t\tthis.fire('drag:end', {\n\t\t\tsourceEvent: evt\n\t\t});\n\t},\n\n\t_updateDraggable: function (id) {\n\t\tvar el = this._handles[id];\n\t\tvar left = el.offsetLeft,\n\t\ttop = el.offsetTop;\n\n\t\tif (el.style.marginLeft) {\n\t\t\tleft -= parseInt(el.style.marginLeft);\n\t\t}\n\n\t\tif (el.style.marginTop) {\n\t\t\ttop -= parseInt(el.style.marginTop);\n\t\t}\n\n\t\tL.extend(el.style, {\n\t\t\tleft: '0px', top: '0px'\n\t\t});\n\n\t\tL.DomUtil.setPosition(el, L.point(left, top));\n\t},\n\n\t_updateFrame: function () {\n\t\tvar bounds = this._path.getBounds();\n\n\t\tvar southEastPoint = this._map.latLngToLayerPoint(bounds.getSouthEast()),\n\t\tnorthWestPoint = this._map.latLngToLayerPoint(bounds.getNorthWest());\n\n\t\tvar computedStyle = getComputedStyle(this._el);\n\n\t\tL.DomUtil.setPosition(this._el, northWestPoint);\n\n\n\t\tvar x = parseInt(computedStyle.borderLeftWidth) + parseInt(computedStyle.borderRightWidth),\n\t\ty = parseInt(computedStyle.borderTopWidth) + parseInt(computedStyle.borderBottomWidth);\n\n\t\tthis._el.style.width = (southEastPoint.x - northWestPoint.x - x) + 'px';\n\t\tthis._el.style.height = (southEastPoint.y - northWestPoint.y - y) + 'px';\n\n\t\tthis.southEastPoint = southEastPoint;\n\t\tthis.northWestPoint = northWestPoint;\n\t},\n\n\t_updateHandles: function () {\n\t\tvar el, computedStyle, right, bottom, left, top;\n\t\tvar widthOf = L.larva.getWidth, heightOf = L.larva.getHeight;\n\n\t\tcomputedStyle = getComputedStyle(this._el);\n\n\t\tvar borderWidth = {\n\t\t\tbottom: 'borderBottomWidth',\n\t\t\tleft: 'borderLeftWidth',\n\t\t\tright: 'borderRightWidth',\n\t\t\ttop: 'borderTopWidth'\n\t\t};\n\n\t\tfor (var id in borderWidth) {\n\t\t\tborderWidth[id] = parseInt(computedStyle[borderWidth[id]]) / 2;\n\t\t}\n\n\t\tel = this._handles.br;\n\n\t\tright = (- (widthOf(el) / 2) - borderWidth.right) + 'px';\n\t\tbottom = (- (heightOf(el) / 2) - borderWidth.bottom) + 'px';\n\n\t\tL.extend(el.style, {\n\t\t\tright: right,\n\t\t\tbottom: bottom\n\t\t});\n\n\t\tel = this._handles.bm;\n\t\tleft = (-(widthOf(el) / 2)) + 'px';\n\t\tbottom = (- (heightOf(el) / 2) - borderWidth.bottom) + 'px';\n\n\t\tL.extend(el.style, {\n\t\t\tleft: '50%',\n\t\t\t'margin-left': left,\n\t\t\tbottom: bottom\n\t\t});\n\n\t\tel = this._handles.bl;\n\t\tleft = (-(widthOf(el) / 2) - borderWidth.left) + 'px';\n\t\tbottom = (- (heightOf(el) / 2) - borderWidth.bottom) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tleft: left,\n\t\t\tbottom: bottom\n\t\t});\n\n\t\tel = this._handles.mm;\n\t\tleft = -(widthOf(el) / 2) + 'px';\n\t\ttop = -(heightOf(el) / 2) + 'px';\n\t\tL.extend(el.style, {\n\t\t\ttop: '50%',\n\t\t\tleft: '50%',\n\t\t\t'margin-left': left,\n\t\t\t'margin-top': top\n\t\t});\n\n\t\tel = this._handles.ml;\n\t\ttop = -(heightOf(el) / 2) + 'px';\n\t\tleft = (-(widthOf(el) / 2) - borderWidth.left) + 'px';\n\t\tL.extend(el.style, {\n\t\t\ttop: '50%',\n\t\t\t'margin-top': top,\n\t\t\tleft: left\n\t\t});\n\n\t\tel = this._handles.mr;\n\t\tright = (- (widthOf(el) / 2) - borderWidth.right) + 'px';\n\t\ttop = -(heightOf(el) / 2) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tright: right,\n\t\t\ttop: '50%',\n\t\t\t'margin-top': top\n\t\t});\n\n\t\tel = this._handles.tr;\n\t\tright = (-(widthOf(el) / 2) - borderWidth.right) + 'px';\n\t\ttop = (-(heightOf(el) / 2) - borderWidth.top) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tright: right,\n\t\t\ttop: top\n\t\t});\n\n\t\tel = this._handles.tm;\n\t\ttop = (-(heightOf(el) / 2) - borderWidth.top) + 'px';\n\t\tleft = -(widthOf(el) / 2) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tleft: '50%',\n\t\t\t'margin-left': left,\n\t\t\ttop: top\n\t\t});\n\n\t\tel = this._handles.tl;\n\t\ttop = (-(heightOf(el) / 2) - borderWidth.top) + 'px';\n\t\tleft = (-(widthOf(el) / 2) - borderWidth.left) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tleft: left,\n\t\t\ttop: top\n\t\t});\n\t}\n});\n\nL.larva.frame.path = function pathframe (path) {\n\treturn new L.larva.frame.Path(path);\n};","if (!L.Polyline.prototype.forEachLatLng) {\n\tL.Polyline.include({\n\n\t\tforEachLatLng: function (fn, context) {\n\t\t\tvar latlngs = this.getLatLngs();\n\n\t\t\tif (!latlngs.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (Array.isArray(latlngs[0])) {\n\t\t\t\t// nested array\n\n\t\t\t\tlatlngs = latlngs.reduce(function (array, latlngs) {\n\t\t\t\t\treturn array.concat(latlngs);\n\t\t\t\t}, []);\n\t\t\t}\n\n\t\t\tlatlngs.forEach(fn, context);\n\t\t}\n\t});\n}\n\nif (!L.Polyline.prototype.updateBounds) {\n\tL.Polyline.include({\n\n\t\tupdateBounds: function () {\n\t\t\tvar bounds = this._bounds = new L.LatLngBounds();\n\n\t\t\tthis.forEachLatLng(function (latlng) {\n\t\t\t\tbounds.extend(latlng);\n\t\t\t});\n\t\t}\n\n\t});\n}","/**\n * @requires package.js\n */\n\nL.larva.frame.Style = {\n\t\n};\n\nL.larva.frame.Style.Move = {\n\tclassName: 'llarva-pathframe-move',\n\t\n\ttl: {\n\t\thide: true\n\t},\n\n\ttr: {\n\t\thide: true\n\t},\n\n\tmm: {\n\t\thide: true\n\t},\n\n\tbl: {\n\t\thide: true\n\t},\n\n\tbr: {\n\t\thide: true\n\t}\n};\n\nL.larva.frame.Style.Resize = {\n\tclassName: 'llarva-pathframe-resize',\n\tmm: {\n\t\thide: true\n\t}\n};\n\nL.larva.frame.Style.Rotate = {\n\tclassName: 'llarva-pathframe-rotate',\n\tmm: {\n\t\tdraggable: true\n\t}\n};","/**\n * @requires Polygon.js\n * @requires ../frame/Path.js\n * @requires ../ext/L.Polyline.js\n * @requires ../frame/Style.js\n */\nL.larva.handler.Polyline.Resize = L.larva.handler.Polyline.extend({\n\n\taddHooks: function () {\n\t\tthis._frame = L.larva.frame.path(this._path).addTo(this._path._map);\n\n\t\tthis._frame.setStyle(this._frameStyle);\n\n\t\tthis._frame.on('drag:start', this._onDragStart, this);\n\t\tthis._frame.on('drag:move', this._onDragMove, this);\n\t\tthis._frame.on('drag:end', this._onDragEnd, this);\n\t},\n\n\t_onDragEnd: function () {\n\n\t},\n\n\t_onDragMove: function (evt) {\n\t\tvar position = evt.sourceEvent.touches ? evt.sourceEvent.touches[0] : evt.sourceEvent;\n\n\n\t\tvar xscale = null, yscale = null;\n\n\t\tif (this._origin.screenX !== undefined) {\n\t\t\txscale = (position.clientX - this._origin.screenX) / this._origin.width;\n\t\t}\n\n\t\tif (this._origin.screenY !== undefined) {\n\t\t\tyscale = (position.clientY - this._origin.screenY) / this._origin.height;\n\t\t}\n\n\t\tif (xscale === null && yscale === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (xscale !== null && yscale !== null) {\n\t\t\tif (evt.sourceEvent.ctrlKey) {\n\t\t\t\tyscale = xscale = Math.max(Math.abs(xscale), Math.abs(yscale));\n\n\t\t\t\tif (this._origin.invertX) {\n\t\t\t\t\txscale = -xscale;\n\t\t\t\t}\n\n\t\t\t\tif (this._origin.invertY) {\n\t\t\t\t\tyscale = -yscale;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar projected, newLatLng;\n\n\t\tthis._path.forEachLatLng(function (latlng) {\n\t\t\tprojected = this._path._map.latLngToLayerPoint(latlng._original);\n\n\t\t\tif (xscale !== null) {\n\t\t\t\tif (this._origin.invertX) {\n\t\t\t\t\tprojected.x = this._origin.x - projected.x;\n\t\t\t\t} else {\n\t\t\t\t\tprojected.x = projected.x - this._origin.x;\n\t\t\t\t}\n\n\t\t\t\tprojected.x = projected.x * xscale + this._origin.x;\n\t\t\t}\n\n\n\t\t\tif (yscale !== null) {\n\n\t\t\t\tif (this._origin.invertY) {\n\t\t\t\t\tprojected.y = this._origin.y - projected.y;\n\t\t\t\t} else {\n\t\t\t\t\tprojected.y = projected.y - this._origin.y;\n\t\t\t\t}\n\n\t\t\t\tprojected.y = projected.y * yscale + this._origin.y;\n\t\t\t}\n\n\t\t\tnewLatLng = this._path._map.layerPointToLatLng(projected);\n\t\t\tlatlng.lat = newLatLng.lat;\n\t\t\tlatlng.lng = newLatLng.lng;\n\t\t}, this);\n\n\t\tthis._path.updateBounds();\n\t\tthis._frame.updateBounds();\n\t\tthis._path.redraw();\n\n\t},\n\n\t_onDragStart: function (evt) {\n\n\t\tthis._path.forEachLatLng(function (latlng) {\n\t\t\tlatlng._original = latlng.clone();\n\t\t});\n\n\n\t\tvar bounding = this._frame.getFrameClientRect();\n\n\t\tvar origin = this._origin = {\n\t\t\theight: bounding.height,\n\t\t\twidth: bounding.width\n\t\t};\n\n\t\tvar position = this._frame.getPosition();\n\n\t\tswitch (evt.id) {\n\t\t\tcase L.larva.frame.Path.TOP_LEFT:\n\t\t\t\torigin.x = position.x + bounding.width;\n\t\t\t\torigin.y = position.y + bounding.height;\n\t\t\t\torigin.screenX = bounding.right;\n\t\t\t\torigin.screenY = bounding.bottom;\n\t\t\t\torigin.invertX = true;\n\t\t\t\torigin.invertY = true;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.TOP_MIDDLE:\n\t\t\t\torigin.y = position.y + bounding.height;\n\t\t\t\torigin.screenY = bounding.bottom;\n\t\t\t\torigin.invertY = true;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.TOP_RIGHT:\n\t\t\t\torigin.x = position.x;\n\t\t\t\torigin.y = position.y + bounding.height;\n\t\t\t\torigin.screenX = bounding.left;\n\t\t\t\torigin.screenY = bounding.bottom;\n\t\t\t\torigin.invertY = true;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.MIDDLE_LEFT:\n\t\t\t\torigin.x = position.x + bounding.width;\n\t\t\t\torigin.screenX = bounding.right;\n\t\t\t\torigin.invertX = true;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.MIDDLE_RIGHT:\n\t\t\t\torigin.x = position.x;\n\t\t\t\torigin.screenX = bounding.left;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.BOTTOM_LEFT:\n\t\t\t\torigin.x = position.x + bounding.width;\n\t\t\t\torigin.y = position.y;\n\t\t\t\torigin.screenX = bounding.right;\n\t\t\t\torigin.screenY = bounding.top;\n\t\t\t\torigin.invertX = true;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.BOTTOM_MIDDLE:\n\t\t\t\torigin.y = position.y;\n\t\t\t\torigin.screenY = bounding.top;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.BOTTOM_RIGHT:\n\t\t\t\torigin.x = position.x;\n\t\t\t\torigin.y = position.y;\n\t\t\t\torigin.screenY = bounding.top;\n\t\t\t\torigin.screenX = bounding.left;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n});\n\nL.Polyline.addInitHook(function () {\n\tthis.larva.resize = new L.larva.handler.Polyline.Resize(this, L.larva.frame.Style.Resize);\n});","/**\n * @requires Polyline.js\n * @requires ../frame/Path.js\n * @requires ../ext/L.Polyline.js\n * @requires ../frame/Style.js\n * \n * @type {[type]}\n */\nL.larva.handler.Polyline.Move = L.larva.handler.Polyline.extend({\n\n\taddHooks: function() {\n\t\tthis._frame = L.larva.frame.path(this._path).addTo(this._path._map);\n\n\t\tthis._frame.setStyle(this._frameStyle);\n\n\t\tthis._frame.on('drag:start', this._onDragStart, this);\n\t\tthis._frame.on('drag:move', this._onDragMove, this);\n\t\tthis._frame.on('drag:end', this._onDragEnd, this);\n\t},\n\n\t_onDragEnd: function () {\n\t},\n\n\t_onDragMove: function (evt) {\n\t\tvar mouseEvt = evt.sourceEvent;\n\t\tvar pos = mouseEvt.touches && mouseEvt.touches[0] ? mouseEvt.touches[0] : mouseEvt;\n\n\t\tvar dx = 0, dy = 0;\n\n\t\tif (this._axis === undefined) {\n\t\t\tdx = pos.clientX - this._startPoint.x;\n\t\t\tdy = pos.clientY - this._startPoint.y;\n\t\t} else {\n\t\t\tif (this._axis === 'x') {\n\t\t\t\tdx = pos.clientX - this._startPoint.x;\n\t\t\t} else if (this._axis === 'y') {\n\t\t\t\tdy = pos.clientY - this._startPoint.y;\n\t\t\t}\n\t\t}\n\n\t\tif (dx === 0 && dy === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar vector = L.point(dx, dy), projected, newLatLng;\n\n\t\tthis._path.forEachLatLng(function (latlng) {\n\t\t\tprojected = this._path._map.latLngToLayerPoint(latlng._original);\n\t\t\tprojected = projected.add(vector);\n\t\t\tnewLatLng = this._path._map.layerPointToLatLng(projected);\n\t\t\tlatlng.lat = newLatLng.lat;\n\t\t\tlatlng.lng = newLatLng.lng;\n\t\t}, this);\n\n\t\tthis._path.updateBounds();\n\t\tthis._frame.updateBounds();\n\t\tthis._path.redraw();\n\n\t},\n\n\t_onDragStart: function (evt) {\n\t\tthis._startNorthWest = this._path.getBounds().getNorthWest();\n\t\tvar mouseEvt = evt.sourceEvent;\n\t\tvar startPos = mouseEvt.touches && mouseEvt.touches[0] ? mouseEvt.touches[0]: mouseEvt;\n\t\tthis._startPoint = L.point(startPos.clientX, startPos.clientY);\n\n\t\tthis._path.forEachLatLng(function (latlng) {\n\t\t\tlatlng._original = latlng.clone();\n\t\t});\n\n\t\tswitch (evt.id) {\n\t\t\tcase L.larva.frame.Path.TOP_MIDDLE:\n\t\t\tcase L.larva.frame.Path.BOTTOM_MIDDLE:\n\t\t\t\tthis._axis = 'y';\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.MIDDLE_LEFT:\n\t\t\tcase L.larva.frame.Path.MIDDLE_RIGHT:\n\t\t\t\tthis._axis = 'x';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tdelete this._axis;\n\t\t}\n\t}\n\n});\n\nL.Polyline.addInitHook(function () {\n\tthis.larva.move = new L.larva.handler.Polyline.Move(this, L.larva.frame.Style.Move);\n});"],"sourceRoot":"/source/"}