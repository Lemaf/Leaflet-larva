{"version":3,"sources":["L.larva.js","../frame/package.js","../frame/Rect.js","../frame/RECT_STYLE.js","../ext/L.Polyline.js","package.js","Path.js","Polyline.js","Polyline.Transform.js","Polyline.Rotate.js","Polyline.Move.js","Polyline.Resize.js","../ext/L.Polygon.js","../Style.js","../frame/Vertices.js","Polyline.Edit.js","Polygon.js","../Util.js","New.js","New.Polyline.js","New.Polygon.js","Polygon.Edit.js"],"names":["L","larva","version","CTRL_KEY","NOP","getEventKeyCode","event","keyCode","key","getHeight","el","offsetHeight","getSourceEvent","evt","sourceEvent","touches","getWidth","offsetWidth","isFlat","latlngs","Array","isArray","LatLng","project","latlng","point","Projection","Mercator","y","unproject","clone","frame","Rect","Layer","extend","statics","TOP_LEFT","TOP_MIDDLE","TOP_RIGHT","MIDDLE_LEFT","MIDDLE_MIDDLE","MIDDLE_RIGHT","BOTTOM_LEFT","BOTTOM_MIDDLE","BOTTOM_RIGHT","options","pane","initialize","path","_path","beforeAdd","map","getPane","createPane","getComputedStyle","id","_handles","_el","getEvents","zoom","_onMapZoom","getDraggable","_draggable","getFrameClientRect","getBoundingClientRect","getHandle","getPosition","DomUtil","hideHandle","i","arguments","length","style","display","onAdd","create","DomEvent","on","Draggable","START","join","_onStart","forEach","_id","_draggables","_updateFrame","_updateHandles","onRemove","disable","off","stop","remove","empty","setElementStyle","styles","element","setStyle","oldStyle","_style","hide","draggable","enable","removeClass","className","addClass","_updateDraggable","updateBounds","prototype","slice","call","_onEnd","MOVE","document","_onMove","END","body","fire","handle","target","type","left","offsetLeft","top","offsetTop","marginLeft","parseInt","marginTop","setPosition","zoomChanged","maintainHandles","currentPosition","handlePosition","bounds","getBounds","southEastPoint","_map","latLngToLayerPoint","getSouthEast","northWestPoint","getNorthWest","computedStyle","add","subtract","x","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth","oldWidth","oldHeight","width","height","scaleBy","right","bottom","widthOf","heightOf","borderWidth","br","bm","bl","mm","ml","mr","tr","tm","tl","rect","_rectFrame","RECT_STYLE","RESIZE","ROTATE","Polyline","forEachLatLng","include","fn","context","toVisit","getLatLngs","l","pop","push","_bounds","LatLngBounds","getType","POLYLINE","MULTIPOLYLINE","_latlngs","forEachLine","Error","handler","Path","Handler","includes","Evented","setOptions","getMap","layerPointToWorldPoint","a","b","undefined","layerPointToLatLng","addInitHook","backupLatLngs","_original","Transform","noUpdate","frameStyle","_frameStyle","transform","transformed","original","newLatLng","args","concat","transformPoint","apply","lat","lng","_frame","redraw","Rotate","addHooks","addTo","sin","cos","dx","dy","position","centerBounding","_centerElement","cx","cy","clientX","j","clientY","Math","sqrt","_vector","frameBounding","framePosition","worldCenterPoint","centerElement","targetBounding","vector","rotate","Move","_previousCursor","cursor","_getEventWorldPoint","bounding","worldPoint","_startPosition","ctrlKey","altKey","dxy","min","abs","move","Resize","xscale","yscale","_reference","screenX","invertX","screenY","invertY","xyscale","max","reference","resize","Polygon","POLYGON","MULTIPOLYGON","forEachPolygon","Style","Class","STYLES","TYPE","fillOpacity","opacity","fillColor","color","source","styleName","_transform","cV","d","multiplyBy","transfom","currentValue","delta","rgb","getRGB","convertColorComponent","r","g","substr","component","toString","Vertices","colorFactor","handleClassName","opacityFactor","tolerance","simplifyZoom","moveend","_updateView","zoomend","_onZoomEnd","getLatLng","handleId","_latlng","_layerPoint","_container","offsetParent","createAura","_aura","polyline","latlng0","_isPolygon","_prev","_last","_next","_first","noClip","isPolygon","stopAura","commit","aura","removeLayer","_setLatLng","updateAura","newPoint","_updatePosition","updateHandle","_createHandles","isHole","prev","handles","first","_isHole","stamp","_lines","line","shell","holes","_subtract","_showHandles","pointsToShow","getPixelBounds","pixelOrigin","getPixelOrigin","points","_handle","PolyUtil","clipPolygon","filter","lineClip","LineUtil","clipSegment","doSimplify","getZoom","getMaxZoom","simplify","appendChild","vertices","_verticesFrame","Edit","maxDist","_onDragStart","_onPathDblClick","removeHooks","_searchNearestPoint","found","searchNearestPointIn","_addVertex","founds","splice","index","mouseEventToLayerPoint","originalEvent","_onDragEnd","_onDragMove","_handleId","_startPos","closed","aPoint","bPoint","dist","pointToSegmentDistance","closestPointOnSegment","Util","pointIsInside","isInside","New","allowFireOnMap","fireOnMap","eventName","eventObject","latLng","handleStyle","border","layerOptions","onMove","threshold","_pane","_newLatLng","_previewLayer","_lineLayer","_onMapMouseMove","_onMapMoveStart","_onClick","_onDblClick","addLatLng","_pushLatLng","createLayer","setLatLngs","layer","_newLayer","_getEventLayerPoint","Point","_lastClick","_moving","addLayer","newPolyline","polygon","newPolygon","allowMakeHole","makeHoleCursor","newHoleOptions","_onPathClickHole","search","_onNewHole","_shellHole","_makingHole","layerPoint","_newPolygonHole","_restoreCursor","_setHoleCursor","edit"],"mappings":"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","file":"leaflet-larva.js","sourcesContent":["/**\n * Leaflet namespace\n * @namespace L\n */\n\n/**\n * Leaflet Larva namespace\n *\n * @namespace L.larva\n * \n */\nL.larva = {\n\tversion: '0.1.1',\n\n\tCTRL_KEY: 17,\n\n\tNOP: function () {},\n\n\t/**\n\t * @param  {Event} event\n\t * @return {Number}\n\t */\n\tgetEventKeyCode: function (event) {\n\t\treturn event.keyCode || event.key;\n\t},\n\n\t/**\n\t * @param  {HTMLElement} el\n\t * @return {Number}\n\t */\n\tgetHeight: function (el) {\n\t\treturn el.offsetHeight;\n\t},\n\n\t/**\n\t * @param  {L.Event} evt\n\t * @return {Event}\n\t */\n\tgetSourceEvent: function (evt) {\n\t\tif (evt.sourceEvent) {\n\t\t\tevt = evt.sourceEvent;\n\t\t}\n\n\t\treturn !evt.touches ?\n\t\t        evt : evt.touches[0];\n\t},\n\n\t/**\n\t * @param  {HTMLElement} el\n\t * @return {Number}\n\t */\n\tgetWidth: function (el) {\n\t\treturn el.offsetWidth;\n\t},\n\n\t/**\n\t * @param  {L.LatLng[]}  latlngs\n\t * @return {Boolean}\n\t */\n\tisFlat: function (latlngs) {\n\n\t\tif (Array.isArray(latlngs)) {\n\t\t\tif (latlngs[0] instanceof L.LatLng) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t},\n\n\tproject: function (latlng) {\n\t\tvar point = L.Projection.Mercator.project(latlng);\n\t\tpoint.y = 0 - point.y;\n\t\treturn point;\n\t},\n\n\tunproject: function (point) {\n\t\tpoint = point.clone();\n\t\tpoint.y = 0 - point.y;\n\t\treturn L.Projection.Mercator.unproject(point);\n\t}\n};","/**\n * @namespace L.larva.frame\n */\nL.larva.frame = {\n\n};","/**\n * @requires package.js\n *\n */\n\n/**\n * @class \n * Rectangle frame, create a frame to layer edition with handlers\n * \n * @extends L.Layer\n *\n * @param {L.Path} path\n * @param {Object} [options]\n * @param {String} options.pane Where in leaflet pane\n */\nL.larva.frame.Rect = L.Layer.extend(\n/** @lends L.larva.frame.Rect.prototype */\n{\n\n\tstatics: {\n\t\tTOP_LEFT: 'tl',\n\t\tTOP_MIDDLE: 'tm',\n\t\tTOP_RIGHT: 'tr',\n\t\tMIDDLE_LEFT: 'ml',\n\t\tMIDDLE_MIDDLE: 'mm',\n\t\tMIDDLE_RIGHT: 'mr',\n\t\tBOTTOM_LEFT: 'bl',\n\t\tBOTTOM_MIDDLE: 'bm',\n\t\tBOTTOM_RIGHT: 'br'\n\t},\n\n\toptions: {\n\t\tpane: 'llarva-frame'\n\t},\n\n\tinitialize: function (path) {\n\t\tthis._path = path;\n\t},\n\n\tbeforeAdd: function (map) {\n\t\tif (!map.getPane(this.options.pane)) {\n\t\t\tmap.createPane(this.options.pane);\n\t\t}\n\t},\n\n\t/**\n\t * Returns Computed CSS Style of an handler\n\t * @param  {String} id\n\t * @return {CSSStyleDeclaration}\n\t */\n\tgetComputedStyle: function(id) {\n\t\tif (id) {\n\t\t\tif (this._handles[id]) {\n\t\t\t\treturn getComputedStyle(this._handles[id]);\n\t\t\t}\n\t\t} else {\n\t\t\treturn getComputedStyle(this._el);\n\t\t}\n\t},\n\n\tgetEvents: function () {\n\t\treturn {\n\t\t\tzoom: this._onMapZoom\n\t\t};\n\t},\n\n\tgetDraggable: function () {\n\t\treturn this._draggable;\n\t},\n\n\tgetFrameClientRect: function () {\n\t\treturn this._el.getBoundingClientRect();\n\t},\n\n\tgetHandle: function (id) {\n\t\treturn this._handles[id];\n\t},\n\n\tgetPosition: function(id) {\n\t\tif (id) {\n\t\t\treturn L.DomUtil.getPosition(this._handles[id]);\n\t\t} else {\n\t\t\treturn L.DomUtil.getPosition(this._el);\n\t\t}\n\t},\n\n\thideHandle: function() {\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tif (this._handles[arguments[i]]) {\n\t\t\t\tthis._handles[arguments[i]].style.display = 'none';\n\t\t\t}\n\t\t}\n\t},\n\n\tonAdd: function () {\n\t\tvar el = this._el = L.DomUtil.create('div', 'llarva-pathframe', this.getPane());\n\t\tL.DomEvent.on(el, L.Draggable.START.join(' '), this._onStart, this);\n\n\t\tthis._handles = {};\n\n\t\t['tl','tm','tr','ml','mm','mr','bl','bm','br'].forEach(function (id) {\n\n\t\t\tthis._handles[id] = L.DomUtil.create('div', 'llarva-' + id, el);\n\t\t\tthis._handles[id]._id = id;\n\t\t\tL.DomEvent.on(this._handles[id], L.Draggable.START.join(' '), this._onStart, this);\n\n\t\t}, this);\n\n\t\tthis._draggable = new L.Draggable(el);\n\t\tthis._draggables = {};\n\t\tthis._updateFrame(false);\n\t\tthis._updateHandles();\n\t},\n\n\tonRemove: function() {\n\t\tvar id;\n\n\t\tif (this._draggable) {\n\t\t\tthis._draggable.disable();\n\t\t}\n\n\t\tfor (id in this._draggables) {\n\t\t\tthis._draggables[id].disable();\n\t\t}\n\n\t\tL.DomEvent.off(this._el, 'mousedown click', L.DomEvent.stop);\n\n\t\tfor (id in this._handles) {\n\t\t\tL.DomEvent.off(this._handles[id], 'mousedown click', L.DomEvent.stop);\n\t\t}\n\n\t\tL.DomUtil.remove(this._el);\n\t\tL.DomUtil.empty(this._el);\n\n\t\tdelete this._el;\n\t},\n\n\tsetElementStyle: function (styles, element) {\n\t\tif (!element) {\n\t\t\tL.extend(this._el.style, styles);\n\t\t} else {\n\t\t\telement = this._handles[element];\n\n\t\t\tif (element) {\n\t\t\t\tL.extend(element.style, styles);\n\t\t\t}\n\t\t}\n\t},\n\n\tsetStyle: function (style) {\n\t\tvar id, el, oldStyle = this._style;\n\n\t\tfor (id in this._handles) {\n\t\t\tel = this._handles[id];\n\t\t\tel.style.display = 'block';\n\n\t\t\tif (this._draggables[id]) {\n\t\t\t\tthis._draggables[id].disable();\n\t\t\t\tdelete this._draggables[id];\n\t\t\t}\n\n\t\t\t// if (oldStyle) {\n\t\t\t// \tL.DomUtil.removeClass(el, oldStyle.className + '-' + id);\n\t\t\t// }\n\n\t\t\t// L.DomUtil.addClass(el, style.className + '-' + id);\n\n\t\t\tif (style[id]) {\n\t\t\t\tif (style[id].hide) {\n\t\t\t\t\tel.style.display = 'none';\n\t\t\t\t}\n\n\t\t\t\tif (style[id].draggable) {\n\t\t\t\t\tthis._draggables[id] = new L.Draggable(el);\n\t\t\t\t\tthis._draggables[id].enable();\n\t\t\t\t\tL.DomEvent.off(el, 'mousedown click', L.DomEvent.stop);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (oldStyle) {\n\t\t\tL.DomUtil.removeClass(this._el, oldStyle.className);\n\t\t}\n\n\t\tL.DomUtil.addClass(this._el, style.className);\n\n\t\tthis._style = style;\n\n\t\tthis._updateHandles();\n\n\t\tfor (id in this._draggables) {\n\t\t\tthis._updateDraggable(id);\n\t\t}\n\t},\n\n\tupdateBounds: function () {\n\t\tthis._updateFrame(false, Array.prototype.slice.call(arguments, 0));\n\t},\n\n\t_onEnd: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\n\t\tfor (var id in L.Draggable.MOVE) {\n\t\t\tL.DomEvent\n\t\t\t\t.off(document, L.Draggable.MOVE[id], this._onMove, this)\n\t\t\t\t.off(document, L.Draggable.END[id], this._onEnd, this);\n\t\t}\n\n\t\tL.DomUtil.removeClass(document.body, 'leaflet-dragging');\n\n\t\tthis.fire('drag:end', {\n\t\t\tsourceEvent: evt\n\t\t});\n\t},\n\n\t_onMapZoom: function () {\n\t\tthis._updateFrame(true);\n\t},\n\n\t_onMove: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\n\t\tthis.fire('drag:move', {\n\t\t\tsourceEvent: evt\n\t\t});\n\t},\n\n\t_onStart: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\n\t\tthis.fire('drag:start', {\n\t\t\tsourceEvent: evt,\n\t\t\thandle: evt.target._id\n\t\t});\n\n\t\tL.DomEvent\n\t\t\t.on(document, L.Draggable.MOVE[evt.type], this._onMove, this)\n\t\t\t.on(document, L.Draggable.END[evt.type], this._onEnd, this);\n\n\t\tL.DomUtil.addClass(document.body, 'leaflet-dragging');\n\t},\n\n\t_updateDraggable: function (id) {\n\t\tvar el = this._handles[id];\n\t\tvar left = el.offsetLeft,\n\t\ttop = el.offsetTop;\n\n\t\tif (el.style.marginLeft) {\n\t\t\tleft -= parseInt(el.style.marginLeft);\n\t\t}\n\n\t\tif (el.style.marginTop) {\n\t\t\ttop -= parseInt(el.style.marginTop);\n\t\t}\n\n\t\tL.extend(el.style, {\n\t\t\tleft: '0px', top: '0px'\n\t\t});\n\n\t\tL.DomUtil.setPosition(el, L.point(left, top));\n\t},\n\n\t_updateFrame: function (zoomChanged, maintainHandles) {\n\t\tvar id,\n\t\t    currentPosition = L.DomUtil.getPosition(this._el),\n\t\t    handle,\n\t\t    handlePosition;\n\n\t\tvar bounds = this._path.getBounds();\n\n\t\tvar southEastPoint = this._map.latLngToLayerPoint(bounds.getSouthEast()),\n\t\tnorthWestPoint = this._map.latLngToLayerPoint(bounds.getNorthWest());\n\n\t\tvar computedStyle = getComputedStyle(this._el);\n\n\t\tif (maintainHandles && maintainHandles.length) {\n\n\t\t\tif (currentPosition) {\n\t\t\t\tfor (var i=0; i<maintainHandles.length; i++) {\n\t\t\t\t\t\n\t\t\t\t\thandle = this._handles[maintainHandles[i]];\n\t\t\t\t\tif (handle && (handlePosition = L.DomUtil.getPosition(handle))) {\n\t\t\t\t\t\thandlePosition = handlePosition.add(currentPosition);\n\t\t\t\t\t\tL.DomUtil.setPosition(handle, handlePosition.subtract(northWestPoint));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tL.DomUtil.setPosition(this._el, northWestPoint);\n\n\t\tvar x = parseInt(computedStyle.borderLeftWidth) + parseInt(computedStyle.borderRightWidth),\n\t\ty = parseInt(computedStyle.borderTopWidth) + parseInt(computedStyle.borderBottomWidth);\n\n\t\tvar oldWidth, oldHeight;\n\t\tif (zoomChanged) {\n\t\t\toldWidth = L.larva.getWidth(this._el);\n\t\t\toldHeight = L.larva.getHeight(this._el);\n\t\t}\n\n\t\tthis._el.style.width = (southEastPoint.x - northWestPoint.x - x) + 'px';\n\t\tthis._el.style.height = (southEastPoint.y - northWestPoint.y - y) + 'px';\n\n\t\tif (zoomChanged) {\n\n\t\t\tfor (id in this._handles) {\n\t\t\t\thandle = this._handles[id];\n\t\t\t\thandlePosition = L.DomUtil.getPosition(handle);\n\n\t\t\t\tif (handlePosition) {\n\t\t\t\t\tL.DomUtil.setPosition(handle, handlePosition.scaleBy(L.point(\n\t\t\t\t\t\tL.larva.getWidth(this._el) / oldWidth, \n\t\t\t\t\t\tL.larva.getHeight(this._el) / oldHeight\n\t\t\t\t\t)));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.southEastPoint = southEastPoint;\n\t\tthis.northWestPoint = northWestPoint;\n\t},\n\n\t_updateHandles: function () {\n\t\tvar el, computedStyle, right, bottom, left, top;\n\t\tvar widthOf = L.larva.getWidth, heightOf = L.larva.getHeight;\n\n\t\tcomputedStyle = getComputedStyle(this._el);\n\n\t\tvar borderWidth = {\n\t\t\tbottom: 'borderBottomWidth',\n\t\t\tleft: 'borderLeftWidth',\n\t\t\tright: 'borderRightWidth',\n\t\t\ttop: 'borderTopWidth'\n\t\t};\n\n\t\tfor (var id in borderWidth) {\n\t\t\tborderWidth[id] = parseInt(computedStyle[borderWidth[id]]) / 2;\n\t\t}\n\n\t\tel = this._handles.br;\n\n\t\tright = (- (widthOf(el) / 2) - borderWidth.right) + 'px';\n\t\tbottom = (- (heightOf(el) / 2) - borderWidth.bottom) + 'px';\n\n\t\tL.extend(el.style, {\n\t\t\tright: right,\n\t\t\tbottom: bottom\n\t\t});\n\n\t\tel = this._handles.bm;\n\t\tleft = (-(widthOf(el) / 2)) + 'px';\n\t\tbottom = (- (heightOf(el) / 2) - borderWidth.bottom) + 'px';\n\n\t\tL.extend(el.style, {\n\t\t\tleft: '50%',\n\t\t\t'margin-left': left,\n\t\t\tbottom: bottom\n\t\t});\n\n\t\tel = this._handles.bl;\n\t\tleft = (-(widthOf(el) / 2) - borderWidth.left) + 'px';\n\t\tbottom = (- (heightOf(el) / 2) - borderWidth.bottom) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tleft: left,\n\t\t\tbottom: bottom\n\t\t});\n\n\t\tel = this._handles.mm;\n\t\tleft = -(widthOf(el) / 2) + 'px';\n\t\ttop = -(heightOf(el) / 2) + 'px';\n\t\tL.extend(el.style, {\n\t\t\ttop: '50%',\n\t\t\tleft: '50%',\n\t\t\t'margin-left': left,\n\t\t\t'margin-top': top\n\t\t});\n\n\t\tel = this._handles.ml;\n\t\ttop = -(heightOf(el) / 2) + 'px';\n\t\tleft = (-(widthOf(el) / 2) - borderWidth.left) + 'px';\n\t\tL.extend(el.style, {\n\t\t\ttop: '50%',\n\t\t\t'margin-top': top,\n\t\t\tleft: left\n\t\t});\n\n\t\tel = this._handles.mr;\n\t\tright = (- (widthOf(el) / 2) - borderWidth.right) + 'px';\n\t\ttop = -(heightOf(el) / 2) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tright: right,\n\t\t\ttop: '50%',\n\t\t\t'margin-top': top\n\t\t});\n\n\t\tel = this._handles.tr;\n\t\tright = (-(widthOf(el) / 2) - borderWidth.right) + 'px';\n\t\ttop = (-(heightOf(el) / 2) - borderWidth.top) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tright: right,\n\t\t\ttop: top\n\t\t});\n\n\t\tel = this._handles.tm;\n\t\ttop = (-(heightOf(el) / 2) - borderWidth.top) + 'px';\n\t\tleft = -(widthOf(el) / 2) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tleft: '50%',\n\t\t\t'margin-left': left,\n\t\t\ttop: top\n\t\t});\n\n\t\tel = this._handles.tl;\n\t\ttop = (-(heightOf(el) / 2) - borderWidth.top) + 'px';\n\t\tleft = (-(widthOf(el) / 2) - borderWidth.left) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tleft: left,\n\t\t\ttop: top\n\t\t});\n\t}\n});\n\nL.larva.frame.rect = function (path) {\n\tif (path && path._rectFrame) {\n\t\treturn path._rectFrame;\n\t}\n\n\treturn (path._rectFrame = new L.larva.frame.Rect(path));\n};","/**\n * @requires package.js\n */\n\n/**\n * \n * **L.larva.frame.RECT_STYLE.RESIZE**\n *\n * *Resizable* frame properties\n *\n * **L.larva.frame.RECT_STYLE.ROTATE**\n *\n * *Rotateable* frame properties\n * \n */\nL.larva.frame.RECT_STYLE = {};\n\nL.larva.frame.RECT_STYLE.RESIZE = {\n\tclassName: 'llarva-pathframe-resize',\n\tmm: {\n\t\thide: true\n\t}\n};\n\nL.larva.frame.RECT_STYLE.ROTATE = {\n\tclassName: 'llarva-pathframe-rotate',\n\ttm: {\n\t\thide: true\n\t},\n\n\tml: {\n\t\thide: true\n\t},\n\n\tmr: {\n\t\thide: true\n\t},\n\n\tbm: {\n\t\thide: true\n\t},\n\n\tmm: {\n\t\tdraggable: true\n\t}\n};","/**\n * @external \"L.Polyline\"\n */\nif (!L.Polyline.prototype.forEachLatLng) {\n\tL.Polyline.include({\n\n\t\t/**\n\t\t * @memberOf external:\"L.Polyline\"\n\t\t * @instance\n\t\t * @param  {Function} fn\n\t\t * @param  {Any}   context\n\t\t */\n\t\tforEachLatLng: function (fn, context) {\n\t\t\tvar toVisit = [this.getLatLngs()],\n\t\t\t    latlngs, i, l;\n\n\t\t\tvar call = context ? function(latlng) {\n\t\t\t\tfn.call(context, latlng);\n\t\t\t} : fn;\n\n\t\t\twhile (toVisit.length) {\n\t\t\t\tlatlngs = toVisit.pop();\n\n\t\t\t\tfor (i=0, l=latlngs.length; i<l; i++) {\n\t\t\t\t\tif (Array.isArray(latlngs[i])) {\n\t\t\t\t\t\ttoVisit.push(latlngs[i]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcall(latlngs[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n}\n\nif (!L.Polyline.prototype.updateBounds) {\n\tL.Polyline.include({\n\n\t\t/**\n\t\t * @memberOf external:\"L.Polyline\"\n\t\t * @instance\n\t\t */\n\t\tupdateBounds: function () {\n\t\t\tvar bounds = this._bounds = new L.LatLngBounds();\n\n\t\t\tthis.forEachLatLng(function (latlng) {\n\t\t\t\tbounds.extend(latlng);\n\t\t\t});\n\t\t}\n\n\t});\n}\n\nif (!L.Polyline.prototype.getType) {\n\n\tL.extend(L.Polyline, {\n\t\tPOLYLINE: 1,\n\t\tMULTIPOLYLINE: 2\n\t});\n\n\tL.Polyline.include({\n\t\t/**\n\t\t * @memberOf external:\"L.Polyline\"\n\t\t * @instance\n\t\t * @returns {Number}\n\t\t *\n\t\t * Value | Type\n\t\t * ------|-----\n\t\t * 1 | Polyline\n\t\t * 2 | MultiPolyline\n\t\t */\n\t\tgetType: function () {\n\t\t\treturn Array.isArray(this._latlngs[0]) ?\n\t\t\t       L.Polyline.MULTIPOLYLINE : L.Polyline.POLYLINE;\n\t\t}\n\t});\n}\n\nL.Polyline.include({\n\t/**\n\t * @memberOf external:\"L.Polyline\"\n\t * @instance\n\t * @param  {Function} fn\n\t * @param  {Any}   context\n\t */\n\tforEachLine: function (fn, context) {\n\n\t\tswitch (this.getType()) {\n\t\t\tcase L.Polyline.POLYLINE:\n\t\t\tcase L.Polyline.MULTIPOLYLINE:\n\n\t\t\t\tif (!Array.isArray(this._latlngs[0])) {\n\t\t\t\t\tfn.call(context, this._latlngs);\n\t\t\t\t} else {\n\t\t\t\t\tfor (var i=0; i<this._latlngs.length; i++) {\n\t\t\t\t\t\tfn.call(context, this._latlngs[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Invalid geometry type!');\n\t\t}\n\t}\n});","/**\n * All larva handlers\n * \n * @namespace L.larva.handler\n */\nL.larva.handler = {\n\n};","/**\n * @requires package.js\n */\n\n/**\n * @class Base class for layers handlers\n * \n * @extends L.Handler\n * @mixes L.Evented\n *\n * @param {L.Path} path layer to handle\n * @param {Object} options\n */\nL.larva.handler.Path = L.Handler.extend(\n/** @lends L.larva.handler.Path.prototype */\n{\n\n\tincludes: [L.Evented.prototype],\n\n\tinitialize: function (path, options) {\n\t\tL.setOptions(this, options);\n\n\t\tthis._path = path;\n\t},\n\n\t/**\n\t * @return {L.Map}\n\t */\n\tgetMap: function () {\n\t\treturn this._path._map;\n\t},\n\n\t/**\n\t * @param  {Number} x\n\t * @param  {Number} y\n\t * @return {L.Point} \n\t */\n\tlayerPointToWorldPoint: function (a, b) {\n\t\treturn L.larva.project(this.unproject(a, b));\n\t},\n\n\t/**\n\t * @param  {Number} x layer x\n\t * @param  {Number} y layer y\n\t * @return {L.LatLng}\n\t */\n\tunproject: function (a, b) {\n\t\tif (b !== undefined) {\n\t\t\treturn this.getMap().layerPointToLatLng(L.point(a, b));\n\t\t} else {\n\t\t\treturn this.getMap().layerPointToLatLng(a);\n\t\t}\n\t}\n\n});\n\nL.Path.addInitHook(function () {\n\tthis.larva = {};\n});","/**\n * @requires Path.js\n */\n\n/**\n * @class Polyline Handler base class\n *\n * @extends {L.larva.handler.Path}\n */\nL.larva.handler.Polyline = L.larva.handler.Path.extend(\n/** @lends L.larva.handler.Polyline.prototype */\n{\n\t/**\n\t * Backup all latlngs\n\t */\n\tbackupLatLngs: function () {\n\t\tthis._path.forEachLatLng(function (latlng) {\n\t\t\tlatlng._original = latlng.clone();\n\t\t});\n\t}\n\n});","/**\n * @requires Polyline.js\n */\n\n/**\n * @class Base class for every LatLng transformer\n *\n * @extends {L.larva.handler.Polyline}\n *\n * @param {L.Path} path Layer to transform\n * @param {L.larva.frame.Style} frameStyle, @see {L.larva.frame}\n * @param {Object} options\n */\nL.larva.handler.Polyline.Transform = L.larva.handler.Polyline.extend(\n/** @lends L.larva.handler.Polyline.Transform.prototype */\n{\n\toptions: {\n\t\tnoUpdate: []\n\t},\n\n\tinitialize: function (path, frameStyle, options) {\n\t\tL.larva.handler.Polyline.prototype.initialize.call(this, path, options);\n\n\t\tthis._frameStyle = frameStyle;\n\t},\n\n\t/**\n\t * Transform each layer point\n\t * @param {...Object}\n\t */\n\ttransform: function () {\n\n\t\tvar transformed = L.point(0, 0),\n\t\t    original,\n\t\t    newLatLng;\n\n\t\tvar args = [null, transformed].concat(Array.prototype.slice.call(arguments, 0));\n\n\t\tthis._path.forEachLatLng(function (latlng) {\n\n\t\t\toriginal = args[0] = L.larva.project(latlng._original);\n\n\t\t\ttransformed.x = original.x;\n\t\t\ttransformed.y = original.y;\n\n\t\t\tthis.transformPoint.apply(this, args);\n\n\t\t\tnewLatLng = L.larva.unproject(transformed);\n\t\t\tlatlng.lat = newLatLng.lat;\n\t\t\tlatlng.lng = newLatLng.lng;\n\n\t\t}, this);\n\n\t\tthis._path.updateBounds();\n\n\t\tthis._frame.updateBounds.apply(this._frame, this.options.noUpdate);\n\t\tthis._path.redraw();\n\t},\n\n\t/**\n\t * @abstract\n\t * @param {L.Point} original Original point\n\t * @param {L.Point} transformed Point transformed\n\t * @param {...Object}\n\t */\n\ttransformPoint: function () {\n\t\tthrow new Error('Unsupported Operation!');\n\t}\n});","/**\n * @requires ../frame/Rect.js\n * @requires ../frame/RECT_STYLE.js\n * @requires ../ext/L.Polyline.js\n * \n * @requires Polyline.Transform.js\n */\n\n/**\n * @class Rotate polygon\n *\n * @extends {L.larva.handler.Polyline.Transform}\n */\nL.larva.handler.Polyline.Rotate = L.larva.handler.Polyline.Transform.extend(\n/** @lends L.larva.handler.Polyline.Transform.prototype */\n{\n\n\toptions: {\n\t\tnoUpdate: [L.larva.frame.Rect.MIDDLE_MIDDLE]\n\t},\n\n\taddHooks: function () {\n\t\tthis._frame = L.larva.frame.rect(this._path);\n\t\tthis._frame.addTo(this.getMap());\n\n\t\tthis._frame.setStyle(this._frameStyle);\n\n\t\tthis._frame.on('drag:start', this._onStart, this);\n\t},\n\n\t/**\n\t * @param  {L.Point} original\n\t * @param  {L.Point} transformed\n\t * @param  {Number} sin\n\t * @param  {Number} cos\n\t * @param  {Number} dx\n\t * @param  {Number} dy\n\t */\n\ttransformPoint: function (original, transformed, sin, cos, dx, dy) {\n\t\ttransformed.x = original.x * cos - original.y * sin + dx;\n\t\ttransformed.y = original.x * sin + original.y * cos + dy;\n\t},\n\n\t_onEnd: function () {\n\t\tthis._frame\n\t\t\t.off('drag:move', this._onMove, this)\n\t\t\t.off('drag:end', this._onEnd, this);\n\t},\n\n\t_onMove: function (evt) {\n\t\tvar position = L.larva.getSourceEvent(evt);\n\n\t\tvar centerBounding = this._centerElement.getBoundingClientRect();\n\n\t\tvar cx = (centerBounding.left + centerBounding.width / 2),\n\t\t    cy = (centerBounding.top + centerBounding.height / 2);\n\n\t\tvar i = position.clientX - cx,\n\t\t    j = position.clientY - cy;\n\n\t\tvar length = Math.sqrt(i * i + j * j);\n\n\t\t// cross product\n\t\tvar sin = (this._vector.i * j - this._vector.j * i) / length;\n\n\t\t// scalar product\n\t\tvar cos = (this._vector.i * i + this._vector.j * j) / length;\n\n\t\tvar frameBounding = this._frame.getFrameClientRect(),\n\t\t    framePosition = this._frame.getPosition();\n\n\t\tcx = (cx - frameBounding.left) + framePosition.x;\n\t\tcy = (cy - frameBounding.top) + framePosition.y;\n\n\t\tvar worldCenterPoint = this.layerPointToWorldPoint(cx, cy);\n\n\t\tvar dx = worldCenterPoint.x * (1 - cos) + worldCenterPoint.y * sin;\n\t\tvar dy = worldCenterPoint.y * (1 - cos) - worldCenterPoint.x * sin;\n\n\t\tthis.transform(sin, cos, dx, dy);\n\t},\n\n\t_onStart: function (evt) {\n\t\tif (!evt.handle || evt.handle === L.larva.frame.Rect.MIDDLE_MIDDLE) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar centerElement = this._centerElement = this._frame.getHandle(L.larva.frame.Rect.MIDDLE_MIDDLE);\n\n\t\tvar centerBounding = centerElement.getBoundingClientRect(),\n\t\t    targetBounding = evt.sourceEvent.target.getBoundingClientRect();\n\n\t\tvar vector = this._vector = {\n\t\t\ti: (targetBounding.left + targetBounding.width / 2) - (centerBounding.left - centerBounding.width / 2),\n\t\t\tj: (targetBounding.top + targetBounding.height / 2) - (centerBounding.top - centerBounding.height / 2)\n\t\t};\n\n\t\tvector.length = Math.sqrt(vector.i * vector.i + vector.j * vector.j);\n\n\t\tvector.i = vector.i / vector.length;\n\t\tvector.j = vector.j / vector.length;\n\t\tvector.length = 1;\n\n\t\tthis.backupLatLngs();\n\n\t\tthis._frame\n\t\t\t.on('drag:move', this._onMove, this)\n\t\t\t.on('drag:end', this._onEnd, this);\n\t}\n\n});\n\nL.Polyline.addInitHook(function () {\n\tthis.larva.rotate = new L.larva.handler.Polyline.Rotate(this, L.larva.frame.RECT_STYLE.ROTATE);\n});","/**\n * @requires ../frame/Rect.js\n * @requires ../frame/RECT_STYLE.js\n * @requires ../ext/L.Polyline.js\n * \n * @requires Polyline.Transform.js\n */\n\n/**\n * @class Move layer\n *\n * @extends {L.larva.handler.Polyline.Transform}\n */\nL.larva.handler.Polyline.Move = L.larva.handler.Polyline.Transform.extend(\n/** @lends L.larva.handler.Polyline.Move.prototype */\n{\n\n\taddHooks: function() {\n\t\tthis._frame = L.larva.frame.rect(this._path).addTo(this.getMap());\n\t\tthis._frame.on('drag:start', this._onStart, this);\n\n\t\tthis._previousCursor = this._frame.getComputedStyle().cursor;\n\t\tthis._frame.setElementStyle({\n\t\t\tcursor: 'move'\n\t\t});\n\t},\n\n\t/**\n\t * @param  {L.Point} original\n\t * @param  {L.Point} transformed\n\t * @param  {Number} dx\n\t * @param  {Number} dy\n\t */\n\ttransformPoint: function (original, transformed, dx, dy) {\n\t\tif (dx) {\n\t\t\ttransformed.x = original.x + dx;\n\t\t}\n\n\t\tif (dy) {\n\t\t\ttransformed.y = original.y + dy;\n\t\t}\n\t},\n\n\t_getEventWorldPoint: function(event) {\n\t\tvar bounding = this._frame.getFrameClientRect(),\n\t\t    position = this._frame.getPosition();\n\n\t\treturn L.larva.project(\n\t\t\tthis.unproject(\n\t\t\t\tevent.clientX - bounding.left + position.x,\n\t\t\t\tevent.clientY - bounding.top + position.y\n\t\t\t)\n\t\t);\n\t},\n\n\t_onEnd: function () {\n\n\t\tthis._frame\n\t\t\t.off('drag:move', this._onMove, this)\n\t\t\t.off('drag:end', this._onEnd);\n\t},\n\n\t_onMove: function (evt) {\n\n\t\tvar event = L.larva.getSourceEvent(evt);\n\t\tvar worldPoint = this._getEventWorldPoint(event);\n\n\t\tvar dx = worldPoint.x - this._startPosition.x,\n\t\t    dy = worldPoint.y - this._startPosition.y;\n\n\t\tif (event.ctrlKey && event.altKey) {\n\t\t\tvar dxy = Math.min(Math.abs(dx), Math.abs(dy));\n\n\t\t\tdx = dx >= 0 ? dxy : -dxy;\n\t\t\tdy = dy >= 0 ? dxy : -dxy;\n\t\t} else if (event.altKey) {\n\t\t\tdy = null;\n\t\t} else if (event.ctrlKey) {\n\t\t\tdx = null;\n\t\t}\n\n\t\tthis.transform(dx, dy);\n\t},\n\n\t_onStart: function (evt) {\n\t\tif (!evt.handle) {\n\t\t\tthis.backupLatLngs();\n\n\t\t\tthis._startPosition = this._getEventWorldPoint(L.larva.getSourceEvent(evt));\n\n\t\t\tthis._frame\n\t\t\t\t.on('drag:move', this._onMove, this)\n\t\t\t\t.on('drag:end', this._onEnd, this);\n\t\t}\n\n\t}\n\n});\n\nL.Polyline.addInitHook(function () {\n\tthis.larva.move = new L.larva.handler.Polyline.Move(this);\n});","/**\n * @requires ../frame/Rect.js\n * @requires ../frame/RECT_STYLE.js\n * @requires ../ext/L.Polyline.js\n * \n * @requires Polyline.Transform.js\n */\n\n/**\n * @class Resize layer\n *\n * @extends {L.larva.handler.Polyline.Transform}\n * \n */\nL.larva.handler.Polyline.Resize = L.larva.handler.Polyline.Transform.extend(\n/** @lends L.larva.handler.Polyline.Resize.prototype */\n{\n\n\taddHooks: function () {\n\t\tthis._frame = L.larva.frame.rect(this._path).addTo(this.getMap());\n\n\t\tthis._frame.setStyle(this._frameStyle);\n\n\t\tthis._frame.on('drag:start', this._onStart, this);\n\t},\n\n\t/**\n\t * @param  {L.Point} original\n\t * @param  {L.Point} transformed\n\t * @param  {Number} [xscale=null]\n\t * @param  {Number} [yscale=null]\n\t */\n\ttransformPoint: function (original, transformed, xscale, yscale) {\n\n\t\tif (xscale !== null) {\n\t\t\ttransformed.x = this._reference.point.x + xscale * (original.x - this._reference.point.x);\n\t\t}\n\n\t\tif (yscale !== null) {\n\t\t\ttransformed.y = this._reference.point.y + yscale * (original.y - this._reference.point.y);\n\t\t}\n\t},\n\n\t_onEnd: function () {\n\t\tthis._frame\n\t\t\t.off('drag:move', this._onMove, this)\n\t\t\t.off('drag:end', this._onEnd, this);\n\n\t\tdelete this._reference;\n\t},\n\n\t_onMove: function (evt) {\n\n\t\tvar event = L.larva.getSourceEvent(evt);\n\n\t\tvar xscale = null, yscale = null;\n\n\t\tif (this._reference.screenX !== undefined) {\n\t\t\txscale = (event.clientX - this._reference.screenX) / this._reference.width;\n\t\t\tif (this._reference.invertX) {\n\t\t\t\txscale = -xscale;\n\t\t\t}\n\t\t}\n\n\t\tif (this._reference.screenY !== undefined) {\n\t\t\tyscale = (event.clientY - this._reference.screenY) / this._reference.height;\n\t\t\tif (this._reference.invertY) {\n\t\t\t\tyscale = -yscale;\n\t\t\t}\n\t\t}\n\n\t\tif (xscale !== null && yscale !== null && event.ctrlKey) {\n\t\t\tvar xyscale = Math.max(Math.abs(xscale), Math.abs(yscale));\n\n\t\t\txscale = xscale >= 0 ? xyscale : -xyscale;\n\t\t\tyscale = yscale >= 0 ? xyscale : -xyscale;\n\t\t}\n\n\t\tthis.transform(xscale, yscale);\n\t},\n\n\t_onStart: function (evt) {\n\n\t\tif (!evt.handle || evt.handle === L.larva.frame.Rect.MIDDLE_MIDDLE) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar bounding = this._frame.getFrameClientRect(),\n\t\t    position = this._frame.getPosition();\n\n\t\tvar reference = this._reference = {\n\t\t\theight: bounding.height,\n\t\t\twidth: bounding.width,\n\t\t};\n\n\t\t// x\n\t\tswitch (evt.handle) {\n\t\t\tcase L.larva.frame.Rect.TOP_LEFT:\n\t\t\tcase L.larva.frame.Rect.MIDDLE_LEFT:\n\t\t\tcase L.larva.frame.Rect.BOTTOM_LEFT:\n\t\t\t\treference.screenX = bounding.right;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Rect.TOP_MIDDLE:\n\t\t\tcase L.larva.frame.Rect.BOTTOM_MIDDLE:\n\t\t\t\treference.screenX = bounding.left + reference.width / 2;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Rect.TOP_RIGHT:\n\t\t\tcase L.larva.frame.Rect.MIDDLE_RIGHT:\n\t\t\tcase L.larva.frame.Rect.BOTTOM_RIGHT:\n\t\t\t\treference.screenX = bounding.left;\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// y\n\t\tswitch (evt.handle) {\n\t\t\tcase L.larva.frame.Rect.TOP_LEFT:\n\t\t\tcase L.larva.frame.Rect.TOP_MIDDLE:\n\t\t\tcase L.larva.frame.Rect.TOP_RIGHT:\n\t\t\t\treference.screenY = bounding.bottom;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Rect.MIDDLE_LEFT:\n\t\t\tcase L.larva.frame.Rect.MIDDLE_RIGHT:\n\t\t\t\treference.screenY = bounding.top + reference.height / 2;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Rect.BOTTOM_LEFT:\n\t\t\tcase L.larva.frame.Rect.BOTTOM_MIDDLE:\n\t\t\tcase L.larva.frame.Rect.BOTTOM_RIGHT:\n\t\t\t\treference.screenY = bounding.top;\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// invertX\n\t\tswitch (evt.handle) {\n\t\t\tcase L.larva.frame.Rect.TOP_LEFT:\n\t\t\tcase L.larva.frame.Rect.MIDDLE_LEFT:\n\t\t\tcase L.larva.frame.Rect.BOTTOM_LEFT:\n\t\t\t\treference.invertX = true;\n\t\t}\n\n\t\t// invertY\n\t\tswitch (evt.handle) {\n\t\t\tcase L.larva.frame.Rect.TOP_LEFT:\n\t\t\tcase L.larva.frame.Rect.TOP_MIDDLE:\n\t\t\tcase L.larva.frame.Rect.TOP_RIGHT:\n\t\t\t\treference.invertY = true;\n\t\t}\n\n\n\t\treference.point = this.layerPointToWorldPoint(\n\t\t\treference.screenX - bounding.left + position.x,\n\t\t\treference.screenY - bounding.top + position.y\n\t\t);\n\n\t\tswitch (evt.handle) {\n\t\t\tcase L.larva.frame.Rect.TOP_MIDDLE:\n\t\t\tcase L.larva.frame.Rect.BOTTOM_MIDDLE:\n\t\t\t\tdelete reference.screenX;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Rect.MIDDLE_LEFT:\n\t\t\tcase L.larva.frame.Rect.MIDDLE_RIGHT:\n\t\t\t\tdelete reference.screenY;\n\t\t\t\tbreak;\n\t\t}\n\n\n\t\tthis.backupLatLngs();\n\n\t\tthis._frame\n\t\t\t.on('drag:move', this._onMove, this)\n\t\t\t.on('drag:end', this._onEnd, this);\n\t}\n\n});\n\nL.Polyline.addInitHook(function () {\n\tthis.larva.resize = new L.larva.handler.Polyline.Resize(this, L.larva.frame.RECT_STYLE.RESIZE);\n});","/**\n * @requires L.Polyline.js\n */\n\n/**\n * @external \"L.Polygon\"\n * @see {@link external:\"L.Polyline\" Extends L.Polyline}\n */\n\nL.extend(L.Polygon, {\n\tPOLYGON: 3,\n\tMULTIPOLYGON: 4\n});\n\nL.Polygon.include({\n\n\t/**\n\t * @memberOf external:\"L.Polygon\"\n\t * @instance\n\t * @returns {Number}\n\t *\n\t * Value|Type\n\t * -----|----\n\t * 3| Polygon\n\t * 4| MultiPolygon\n\t */\n\tgetType: function () {\n\t\tvar latlngs = this._latlngs;\n\n\t\tif (latlngs.length) {\n\t\t\tif (!L.larva.isFlat(latlngs[0])) {\n\t\t\t\treturn L.Polygon.MULTIPOLYGON;\n\t\t\t}\n\t\t}\n\n\t\treturn L.Polygon.POLYGON;\n\t},\n\n\tforEachPolygon: function (fn, context) {\n\t\tvar latlngs = this._latlngs;\n\n\t\tswitch (this.getType()) {\n\t\t\tcase L.Polygon.POLYGON:\n\n\t\t\t\tif (context) {\n\t\t\t\t\tfn.call(context, latlngs[0], latlngs.slice(1));\n\t\t\t\t} else {\n\t\t\t\t\tfn(latlngs[0], latlngs.slice(1));\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase L.Polygon.MULTIPOLYGON:\n\n\t\t\t\tfor (var i=0, l=latlngs.length; i<l; i++) {\n\t\t\t\t\tif (context) {\n\t\t\t\t\t\tfn.call(context, latlngs[i][0], latlngs[i].slice(1));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfn(latlngs[i][0], latlngs[i].slice(1));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n});","/**\n * @class\n *\n * Style class with helper methods\n *\n * Example:\n * \n * ```js\n *\n * \tvar polygon = L.polygon(latlngs, {\n * \t\tfillOpacity: 0.5,\n * \t\tfillColor: '#ABABAB'\n * \t});\n * \n * \tvar style = L.larva.style(polygon);\n *\n * \tstyle.multiplyBy({\n * \t\tfillColor: [1, 0.5, 2],\n  * \t}).subtract({\n  * \t\tfillOpacity: 0.2\n  * \t});\n *\n * \tpolygon.setStyle(style);\n * \n * ```\n * @param {(L.Path | L.larva.Style)} source\n *\n */\nL.larva.Style = L.Class.extend(\n/** @lends L.larva.Style.prototype */\n{\n\n\tstatics: {\n\n\t\tSTYLES: ['fillOpacity', 'fillColor', 'color', 'opacity'],\n\n\t\tTYPE: {\n\t\t\tfillOpacity: 'number',\n\t\t\topacity: 'number',\n\t\t\tfillColor: 'color',\n\t\t\tcolor: 'color'\n\t\t}\n\t},\n\n\tinitialize: function (source) {\n\n\t\tif (source instanceof L.Path) {\n\t\t\tsource = source.options;\n\t\t}\n\n\t\tL.larva.Style.STYLES.forEach(function (styleName) {\n\t\t\tthis[styleName] = source[styleName];\n\t\t}, this);\n\t},\n\n\t/**\n\t * @param  {Object} style\n\t * @return {L.larva.Style} this\n\t */\n\tsubtract: function (styles) {\n\t\treturn this._transform(styles, function (cV, d) {\n\t\t\treturn cV - d;\n\t\t});\n\t},\n\n\t/**\n\t * @param  {Object} style\n\t * @return {L.larva.Style} this\n\t */\n\tmultiplyBy: function(styles) {\n\t\treturn this._transform(styles, function (cV, d) {\n\t\t\treturn cV * d;\n\t\t});\n\t},\n\n\t_transform: function (styles, transfom) {\n\t\tvar styleName, currentValue, delta;\n\n\t\tfor (styleName in styles) {\n\t\t\tif (styleName in this) {\n\n\t\t\t\tcurrentValue = this[styleName];\n\t\t\t\tdelta = styles[styleName];\n\n\t\t\t\tswitch (L.larva.Style.TYPE[styleName]) {\n\t\t\t\t\tcase 'color':\n\t\t\t\t\t\tvar rgb = L.larva.Style.getRGB(currentValue);\n\t\t\t\t\t\tif (rgb) {\n\t\t\t\t\t\t\trgb[0] = transfom(rgb[0], delta[0]);\n\t\t\t\t\t\t\trgb[1] = transfom(rgb[1], delta[1]);\n\t\t\t\t\t\t\trgb[2] = transfom(rgb[2], delta[2]);\n\n\t\t\t\t\t\t\trgb = rgb.map(L.larva.Style.convertColorComponent);\n\n\t\t\t\t\t\t\tcurrentValue = '#' + rgb.join('');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'number':\n\t\t\t\t\t\tcurrentValue = transfom(currentValue, delta);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tthis[styleName] = currentValue;\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n});\n\n/**\n * @memberOf L.larva.Style\n * @param  {String} color\n * @return {Array} [r, g, b]\n */\nL.larva.Style.getRGB = function (color) {\n\n\tif (!color) {\n\t\treturn;\n\t}\n\n\tvar r,g,b;\n\n\tif (color.length === 4) {\n\t\tr = parseInt(color[1], 16);\n\t\tg = parseInt(color[2], 16);\n\t\tb = parseInt(color[3], 16);\n\t} else if (color.length === 7) {\n\t\tr = parseInt(color.substr(1, 2), 16);\n\t\tg = parseInt(color.substr(3, 2), 16);\n\t\tb = parseInt(color.substr(5, 2), 16);\n\t} else {\n\t\treturn;\n\t}\n\n\treturn [r,g,b];\n};\n\nL.larva.Style.convertColorComponent = function (component) {\n\tif (component < 0) {\n\t\tcomponent = 0;\n\t} else if (component > 255) {\n\t\tcomponent = 255;\n\t}\n\n\tcomponent = parseInt(component).toString(16);\n\n\treturn component.length === 2 ? component : '0' + component;\n};\n\nL.larva.style = function (source) {\n\treturn new L.larva.Style(source);\n};","/**\n * @requires package.js\n *\n * @requires ../ext/L.Polygon.js\n * @requires ../Style.js\n */\n\n/**\n * @class\n *\n * Frame for handle point by point editor\n * \n */\nL.larva.frame.Vertices = L.Layer.extend(\n/** @lends L.larva.frame.Vertices.prototype */\n{\n\n\tstatics: {\n\t\tMULTIPOLYGON: 4,\n\t\tMULTIPOLYLINE: 3,\n\t\tPOLYGON: 2,\n\t\tPOLYLINE: 1\n\t},\n\n\toptions: {\n\t\tcolorFactor: [2, 0.5, 2],\n\t\thandleClassName: 'llarva-vertex',\n\t\topacityFactor: 0.5,\n\t\tpane: 'llarva-frame',\n\t\ttolerance: 10,\n\t\tsimplifyZoom: -1\n\t},\n\n\tinitialize: function (path) {\n\t\tthis._path = path;\n\t},\n\n\tbeforeAdd: function (map) {\n\t\tif (!map.getPane(this.options.pane)) {\n\t\t\tmap.createPane(this.options.pane);\n\t\t}\n\t},\n\n\tgetEvents: function () {\n\t\treturn {\n\t\t\tmoveend: this._updateView,\n\t\t\tzoomend: this._onZoomEnd\n\t\t};\n\t},\n\n\t/**\n\t * Returns handle L.LatLng\n\t * @param  {String} handleId\n\t * @return {L.LatLng}\n\t */\n\tgetLatLng: function (handleId) {\n\t\tif (this._handles && this._handles[handleId]) {\n\t\t\treturn this._handles[handleId]._latlng;\n\t\t}\n\t},\n\n\t/**\n\t * Returns handle layer position\n\t * @param  {String} handleId\n\t * @return {L.Point}\n\t */\n\tgetPosition: function (handleId) {\n\t\tif (this._handles && this._handles[handleId]) {\n\t\t\treturn this._handles[handleId]._layerPoint;\n\t\t}\n\t},\n\n\tonAdd: function () {\n\t\tthis._container = this.getPane();\n\t\tthis._updateHandles();\n\t\tthis._updateView();\n\t},\n\n\tonRemove: function () {\n\t\tvar id, handle;\n\n\t\tif (this._handles) {\n\n\t\t\tfor (id in this._handles) {\n\t\t\t\thandle = this._handles[id];\n\n\t\t\t\tif (handle.offsetParent) {\n\t\t\t\t\tL.DomUtil.remove(handle);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdelete this._handles;\n\t\t}\n\t},\n\n\t/**\n\t * @param  {String} handleId\n\t */\n\tcreateAura: function (handleId) {\n\t\tvar handle = this._handles[handleId];\n\n\t\tif (!handle) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!this._aura) {\n\t\t\tthis._aura = {};\n\t\t}\n\n\t\tif (!this._aura[handleId]) {\n\n\t\t\tvar polyline;\n\n\t\t\tvar latlngs = [],\n\t\t\t    latlng = handle._latlng.clone(),\n\t\t\t    style = L.larva.style(this._path).multiplyBy({\n\t\t\t    \tcolor: this.options.colorFactor,\n\t\t\t    \topacity: this.options.opacityFactor\n\t\t\t    }),\n\t\t\t    latlng0;\n\n\t\t\tif (handle._isPolygon) {\n\n\t\t\t\tif (handle._prev) {\n\t\t\t\t\tlatlng0 = handle._prev._latlng;\n\t\t\t\t} else {\n\t\t\t\t\tlatlng0 = handle._last._latlng;\n\t\t\t\t}\n\n\t\t\t\tlatlngs.push(latlng0.clone());\n\n\t\t\t\tlatlngs.push(latlng);\n\n\t\t\t\tif (handle._next) {\n\t\t\t\t\tlatlng0 = handle._next._latlng;\n\t\t\t\t} else {\n\t\t\t\t\tlatlng0 = handle._first._latlng;\n\t\t\t\t}\n\n\t\t\t\tlatlngs.push(latlng0.clone());\n\n\t\t\t} else {\n\n\t\t\t\tif (handle._prev) {\n\t\t\t\t\tlatlngs.push(handle._prev._latlng.clone());\n\t\t\t\t}\n\n\t\t\t\tlatlngs.push(latlng);\n\n\t\t\t\tif (handle._next) {\n\t\t\t\t\tlatlngs.push(handle._next._latlng.clone());\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tpolyline = L.polyline(latlngs, L.extend({}, style, {\n\t\t\t\tnoClip: true\n\t\t\t})).addTo(this._map);\n\n\t\t\tthis._aura[handleId] = {\n\t\t\t\tisPolygon: !!handle._isPolygon,\n\t\t\t\tpolyline: polyline,\n\t\t\t\tlatlng: latlng\n\t\t\t};\n\t\t}\n\n\t\treturn true;\n\t},\n\n\tredraw: function () {\n\t\tthis._updateHandles();\n\t\tthis._updateView();\n\t\treturn this;\n\t},\n\n\t/**\n\t * @param  {String} handleId\n\t * @param  {Boolean} commit\n\t */\n\tstopAura: function (handleId, commit) {\n\t\tvar aura;\n\t\tif (this._aura && (aura = this._aura[handleId])) {\n\t\t\tthis._map.removeLayer(this._aura[handleId].polyline);\n\t\t\tdelete this._aura[handleId];\n\n\t\t\tif (commit) {\n\t\t\t\tthis._setLatLng(handleId, aura.latlng);\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * @param  {String} handleId\n\t * @param  {L.Point} new layer position\n\t */\n\tupdateAura: function (handleId, newPoint) {\n\t\tvar aura = this._aura ? this._aura[handleId] : null;\n\n\t\tif (aura) {\n\n\t\t\tvar newLatLng = this._map.layerPointToLatLng(newPoint);\n\t\t\taura.latlng.lat = newLatLng.lat;\n\t\t\taura.latlng.lng = newLatLng.lng;\n\n\t\t\taura.polyline.updateBounds();\n\t\t\taura.polyline.redraw();\n\n\t\t\tthis._updatePosition(this._handles[handleId], newPoint);\n\t\t}\n\t},\n\n\t/**\n\t * @param  {String} handleId\n\t */\n\tupdateHandle: function (handleId) {\n\t\tvar handle = this._handles[handleId];\n\t\tif (handle) {\n\t\t\tdelete handle._layerPoint;\n\t\t\tthis._updatePosition(handle);\n\t\t}\n\t},\n\n\t_setLatLng: function (handleId, newLatLng) {\n\n\t\tvar handle = this._handles[handleId];\n\n\t\tif (handle) {\n\t\t\thandle._latlng.lat = newLatLng.lat;\n\t\t\thandle._latlng.lng = newLatLng.lng;\n\t\t\tdelete handle._layerPoint;\n\n\t\t\tthis._updatePosition(handle);\n\n\t\t\tthis._path.updateBounds();\n\t\t\tthis._path.redraw();\n\t\t}\n\t},\n\n\t_createHandles: function (latlngs, isPolygon, isHole) {\n\n\t\tvar i, handle, prev, handles = [], first;\n\n\t\tfor (i=0; i<latlngs.length; i++) {\n\t\t\thandle = L.DomUtil.create('div', this.options.handleClassName);\n\n\t\t\tif (isPolygon) {\n\t\t\t\thandle._isPolygon = true;\n\t\t\t}\n\n\t\t\tif (isHole) {\n\t\t\t\thandle._isHole = true;\n\t\t\t}\n\n\t\t\thandle._latlng = latlngs[i];\n\t\t\thandle._layerPoint = this._map.latLngToLayerPoint(handle._latlng);\n\n\t\t\tL.DomEvent.on(handle, L.Draggable.START.join(' '), this._onStart, this);\n\n\t\t\tthis._handles[L.stamp(handle)] = handle;\n\n\t\t\tif (prev) {\n\t\t\t\tprev._next = handle;\n\t\t\t\thandle._prev = prev;\n\t\t\t\tprev = handle;\n\n\t\t\t\tif (isPolygon && first) {\n\t\t\t\t\thandle._first = first;\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tfirst = handle;\n\t\t\t\tprev = handle;\n\t\t\t}\n\n\t\t\thandles.push(handle);\n\t\t}\n\n\t\tif (isPolygon) {\n\t\t\tfirst._last = handle;\n\t\t}\n\n\t\tthis._lines.push({\n\t\t\thandles: handles,\n\t\t\tisHole: !!isHole,\n\t\t\tisPolygon: !!isPolygon\n\t\t});\n\n\t\treturn handles;\n\t},\n\n\t_onEnd: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\n\t\tfor (var id in L.Draggable.MOVE) {\n\t\t\tL.DomEvent\n\t\t\t\t.off(document, L.Draggable.MOVE[id], this._onMove, this)\n\t\t\t\t.off(document, L.Draggable.END[id], this._onEnd, this);\n\t\t}\n\n\t\tL.DomUtil.removeClass(document.body, 'leaflet-dragging');\n\n\t\tthis.fire('drag:end', {\n\t\t\tsourceEvent: evt\n\t\t});\n\t},\n\n\t_onMove: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\n\t\tthis.fire('drag:move', {\n\t\t\tsourceEvent: evt\n\t\t});\n\t},\n\n\t_onStart: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\n\t\tthis.fire('drag:start', {\n\t\t\tid: L.stamp(evt.target),\n\t\t\tsourceEvent: evt\n\t\t});\n\n\t\tL.DomEvent\n\t\t\t.on(document, L.Draggable.MOVE[evt.type], this._onMove, this)\n\t\t\t.on(document, L.Draggable.END[evt.type], this._onEnd, this);\n\n\t\tL.DomUtil.addClass(document.body, 'leaflet-dragging');\n\t},\n\n\t_onZoomEnd: function () {\n\n\t\tvar id, handle;\n\n\t\tfor (id in this._handles) {\n\t\t\thandle = this._handles[id];\n\t\t\thandle._layerPoint = this._map.latLngToLayerPoint(handle._latlng);\n\t\t}\n\t},\n\n\t_updateHandles: function () {\n\t\tvar id, handle;\n\n\t\tif (this._handles) {\n\t\t\tfor (id in this._handles) {\n\t\t\t\thandle = this._handles[id];\n\n\t\t\t\tL.DomUtil.remove(handle);\n\t\t\t}\n\t\t}\n\n\t\tthis._handles = {};\n\t\tthis._lines = [];\n\n\t\tvar type = this._path.getType();\n\n\t\tswitch (type) {\n\t\t\tcase L.Polyline.POLYLINE:\n\t\t\tcase L.Polyline.MULTIPOLYLINE:\n\n\t\t\t\tthis._path.forEachLine(function (line) {\n\t\t\t\t\tthis._createHandles(line);\n\t\t\t\t}, this);\n\n\t\t\t\tbreak;\n\n\t\t\tcase L.Polygon.POLYGON:\n\t\t\tcase L.Polygon.MULTIPOLYGON:\n\n\t\t\t\tthis._path.forEachPolygon(function (shell, holes) {\n\n\t\t\t\t\tthis._createHandles(shell, true);\n\n\t\t\t\t\tholes.forEach(function (latlngs) {\n\t\t\t\t\t\tthis._createHandles(latlngs, true, true);\n\t\t\t\t\t}, this);\n\n\t\t\t\t}, this);\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Invalid geometry type');\n\t\t}\n\t},\n\n\t_updatePosition: function (handle, target) {\n\t\tvar point;\n\n\t\tif (target) {\n\t\t\tpoint = target.clone();\n\t\t} else if (handle._layerPoint) {\n\t\t\tpoint = handle._layerPoint.clone();\n\t\t} else {\n\t\t\thandle._layerPoint = this._map.latLngToLayerPoint(handle._latlng);\n\t\t\tpoint = handle._layerPoint.clone();\n\t\t}\n\n\t\tif (handle.offsetParent) {\n\t\t\tpoint._subtract({\n\t\t\t\tx: L.larva.getWidth(handle) / 2,\n\t\t\t\ty: L.larva.getHeight(handle) / 2\n\t\t\t});\n\t\t}\n\n\t\tL.DomUtil.setPosition(handle, point);\n\t},\n\n\t_showHandles: function (handles, isPolygon) {\n\t\tvar pointsToShow;\n\n\t\tvar bounds = this._map.getPixelBounds(),\n\t\t    pixelOrigin = this._map.getPixelOrigin();\n\n\t\tvar points = handles.map(function (handle) {\n\t\t\tvar point = handle._layerPoint.add(pixelOrigin);\n\t\t\tpoint._handle = handle;\n\t\t\treturn point;\n\t\t});\n\n\t\tif (isPolygon) {\n\n\t\t\tpointsToShow = L.PolyUtil.clipPolygon(points, bounds).filter(function (point) {\n\t\t\t\treturn !!point._handle;\n\t\t\t});\n\n\t\t} else {\n\n\t\t\tvar i,l, lineClip;\n\n\t\t\tpointsToShow = [];\n\n\t\t\tfor (i=0, l = points.length - 1; i<l; i++) {\n\t\t\t\tlineClip = L.LineUtil.clipSegment(points[i], points[i + 1], bounds);\n\t\t\t\tif (lineClip) {\n\t\t\t\t\tif (lineClip[0]._handle) {\n\t\t\t\t\t\tpointsToShow.push(lineClip[0]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (lineClip[1]._handle) {\n\t\t\t\t\t\tpointsToShow.push(lineClip[1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar doSimplify = false;\n\n\t\tif (this.options.simplifyZoom > 0) {\n\n\t\t\tdoSimplify = this._map.getZoom() < this.options.simplifyZoom;\n\n\t\t} else if (this.options.simplifyZoom < 0) {\n\n\t\t\tdoSimplify = this._map.getZoom() < (this._map.getMaxZoom() + this.options.simplifyZoom);\n\n\t\t}\n\n\t\tif (doSimplify) {\n\t\t\tpointsToShow = L.LineUtil.simplify(pointsToShow, this.options.tolerance);\n\t\t}\n\n\t\tpointsToShow.forEach(function (point) {\n\n\t\t\tif (!point.offsetParent) {\n\t\t\t\tthis._container.appendChild(point._handle);\n\t\t\t}\n\n\t\t\tthis._updatePosition(point._handle);\n\t\t}, this);\n\t},\n\n\t_updateView: function () {\n\t\tvar id, handle;\n\n\t\tfor (id in this._handles) {\n\t\t\thandle = this._handles[id];\n\n\t\t\tif (handle.offsetParent) {\n\t\t\t\tL.DomUtil.remove(handle);\n\t\t\t}\n\t\t}\n\n\t\tthis._lines.forEach(function (line) {\n\t\t\tthis._showHandles(line.handles, line.isPolygon, line.isHole);\n\t\t}, this);\n\t}\n});\n\nL.larva.frame.vertices = function (path) {\n\tif (path._verticesFrame) {\n\t\treturn path._verticesFrame;\n\t}\n\n\treturn (path._verticesFrame = new L.larva.frame.Vertices(path));\n};","/**\n * @requires Polyline.js\n * @requires ../frame/Vertices.js\n */\n\n/**\n * @class Hand point by point of a layer\n *\n * @extends {L.larva.handler.Polyline}\n */\nL.larva.handler.Polyline.Edit = L.larva.handler.Polyline.extend(\n/** @lends L.larva.handler.Polyline.prototype */\n{\n\n\toptions: {\n\t\taura: true,\n\t\tmaxDist: 10\n\t},\n\n\taddHooks: function () {\n\t\tthis._frame = L.larva.frame.vertices(this._path).addTo(this.getMap());\n\t\tthis._frame.on('drag:start', this._onDragStart, this);\n\t\tthis._path.on('dblclick', this._onPathDblClick, this);\n\t},\n\n\tremoveHooks: function () {\n\t\tthis.getMap().removeLayer(this._frame);\n\t\tthis._frame\n\t\t\t.off('drag:start', this._onDragStart, this)\n\t\t\t.off('dblclick', this._onPathDblClick, this);\n\t},\n\n\t_searchNearestPoint: function (point) {\n\t\tvar found = [], map = this.getMap();\n\n\t\tthis._path.forEachLine(function (latlngs) {\n\t\t\tfound = found.concat(L.larva.handler.Polyline.Edit.searchNearestPointIn(point, this.options.maxDist, latlngs, map));\n\t\t}, this);\n\n\t\treturn found;\n\t},\n\n\t_addVertex: function (point) {\n\t\tvar founds, found, newLatLng;\n\n\t\tfounds = this._searchNearestPoint(point);\n\n\t\tif (founds.length) {\n\t\t\tif (founds.length === 1) {\n\t\t\t\tfound = founds[0];\n\t\t\t\tnewLatLng = this.getMap().layerPointToLatLng(found.point);\n\n\t\t\t\tfound.latlngs.splice(found.index, 0, newLatLng);\n\n\t\t\t\tthis._path.updateBounds();\n\t\t\t\tthis._path.redraw();\n\t\t\t\tthis._frame.redraw();\n\t\t\t}\n\t\t}\n\t},\n\n\t_onPathDblClick: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\t\tthis._addVertex(this.getMap().mouseEventToLayerPoint(evt.originalEvent));\n\t},\n\n\t_onDragEnd: function () {\n\t\tthis._frame\n\t\t\t.off('drag:move', this._onDragMove, this)\n\t\t\t.off('drag:end', this._onDragEnd, this);\n\n\t\tif (this.options.aura) {\n\t\t\tthis._frame.stopAura(this._handleId, true);\n\t\t\tthis._path.updateBounds();\n\t\t\tthis._path.redraw();\n\t\t}\n\t},\n\n\t_onDragMove: function (evt) {\n\t\tvar sourceEvent = L.larva.getSourceEvent(evt);\n\n\t\tvar dx = sourceEvent.clientX - this._startPos.x,\n\t\t    dy = sourceEvent.clientY - this._startPos.y;\n\n\t\tvar newPoint = this._original.add(L.point(dx, dy));\n\n\t\tif (this._aura) {\n\t\t\tthis._frame.updateAura(this._handleId, newPoint);\n\t\t} else {\n\n\t\t\tvar latlng = this._frame.getLatLng(this._handleId),\n\t\t\t\t newLatLng = this.getMap().layerPointToLatLng(newPoint);\n\n\t\t\tlatlng.lat = newLatLng.lat;\n\t\t\tlatlng.lng = newLatLng.lng;\n\n\t\t\tthis._path.updateBounds();\n\t\t\tthis._frame.updateHandle(this._handleId);\n\t\t\tthis._path.redraw();\n\t\t}\n\n\t},\n\n\t_onDragStart: function (evt) {\n\t\tvar sourceEvent = L.larva.getSourceEvent(evt);\n\n\t\tthis._original = this._frame.getPosition(evt.id).clone();\n\t\tthis._handleId = evt.id;\n\n\t\tthis._startPos = {\n\t\t\tx: sourceEvent.clientX, y: sourceEvent.clientY\n\t\t};\n\n\t\tif (this.options.aura) {\n\t\t\tthis._aura = this._frame.createAura(evt.id);\n\t\t} else {\n\t\t\t// TODO:\n\t\t\tdelete this._aura;\n\t\t}\n\n\t\tthis._frame\n\t\t\t.on('drag:move', this._onDragMove, this)\n\t\t\t.on('drag:end', this._onDragEnd, this);\n\n\t}\n\n});\n\n/**\n * @memberOf L.larva.handler.Polyline.Edit\n * @param  {L.Point} point\n * @param  {Number} maxDist\n * @param  {LatLng[]} latlngs\n * @param  {L.Map} map\n * @param  {Boolean} closed\n * @return {Object[]}\n */\nL.larva.handler.Polyline.Edit.searchNearestPointIn = function (point, maxDist, latlngs, map, closed) {\n\tvar found = [],\n\t    aPoint, bPoint,\n\t    i, index, l, dist;\n\n\tif (closed) {\n\t\tl = latlngs.length;\n\t} else {\n\t\tl = latlngs.length - 1;\n\t}\n\n\tfor (i = 0; i < l; i++) {\n\n\t\tindex = (i + 1) % latlngs.length;\n\n\t\taPoint = map.latLngToLayerPoint(latlngs[i]);\n\t\tbPoint = map.latLngToLayerPoint(latlngs[index]);\n\n\t\tdist = L.LineUtil.pointToSegmentDistance(point, aPoint, bPoint);\n\n\t\tif (dist <= maxDist) {\n\t\t\tfound.push({\n\t\t\t\tpoint: L.LineUtil.closestPointOnSegment(point, aPoint, bPoint),\n\t\t\t\tindex: index,\n\t\t\t\tlatlngs: latlngs\n\t\t\t});\n\t\t}\n\t}\n\n\treturn found;\n\n};","/**\n * @requires Path.js\n */\n\n/**\n * @class Polygon handler\n *\n * @extends L.larva.handler.Path\n */\nL.larva.handler.Polygon = L.larva.handler.Path.extend({\n\n});","/**\n * @namespace\n */\nL.larva.Util = {\n\n\t/**\n\t * @see {@link https://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html#The%20C%20Code Reference}\n\t *\n\t * @param {L.Point} point\n\t * @param {L.Point[]} points\n\t *\n\t * @returns {Boolean} Point inside points?\n\t */\n\tpointIsInside: function (point, points) {\n\t\tvar i, j, isInside = false;\n\n\t\tfor (i=0, j = points.length - 1; i < points.length; j = i++) {\n\t\t\tif ( ((points[i].y > point.y) !== (points[j].y > point.y)) &&\n\t\t\t\t (point.x < (points[j].x - points[i].x) * (point.y - points[i].y) / (points[j].y - points[i].y) + points[i].x)) {\n\t\t\t\tisInside = !isInside;\n\t\t\t}\n\t\t}\n\n\t\treturn isInside;\n\t}\n\n};","/**\n * @requires package.js\n */\n\n/**\n * @class Base type to creators\n * @param {L.Map} map\n * @param {Object} options\n * \n * @extends L.Handler\n * @mixes L.Evented\n */\nL.larva.handler.New = L.Handler.extend(\n/** @lends L.larva.handler.New.prototype */\n{\n\tincludes: [L.Evented.prototype],\n\n\toptions: {\n\t\tallowFireOnMap: true\n\t},\n\n\tinitialize: function (map, options) {\n\t\tL.Handler.prototype.initialize.call(this, map);\n\n\t\tif (options) {\n\t\t\tL.setOptions(this, options);\n\t\t}\n\t},\n\n\t/**\n\t * Fire a event on map\n\t * @param  {String} eventName\n\t * @param  {Object} eventObject\n\t */\n\tfireOnMap: function (eventName, eventObject) {\n\t\tif (this.options.allowFireOnMap) {\n\t\t\tthis._map.fire(eventName, eventObject);\n\t\t}\n\t},\n\n\t/**\n\t * Project a (lat, lng) to a layer point\n\t * @param  {number} lat\n\t * @param  {number} lng\n\t * @return {L.Point}\n\t */\n\tproject: function (a, b) {\n\t\tif (b !== undefined) {\n\t\t\treturn this._map.latLngToLayerPoint(L.latLng(a, b));\n\t\t} else {\n\t\t\treturn this._map.latLngToLayerPoint(a);\n\t\t}\n\t}\n\n});","/**\n * @requires New.js\n */\n\n/**\n * @class Polyline creator\n * @extends L.larva.handler.New\n */\nL.larva.handler.New.Polyline = L.larva.handler.New.extend(\n/** @lends L.larva.handler.New.Polyline.prototype */\n{\n\n\toptions: {\n\n\t\thandleStyle: {\n\t\t\tborder: '1px solid #0f0',\n\t\t\tcursor: 'crosshair',\n\t\t\theight: '20px',\n\t\t\tposition: 'absolute',\n\t\t\twidth: '20px'\n\t\t},\n\n\t\tlayerOptions: {\n\n\t\t},\n\n\t\t// Snap here?\n\t\tonMove: L.larva.NOP,\n\n\t\tthreshold: 1\n\t},\n\n\taddHooks: function() {\n\n\t\tthis._latlngs = [];\n\n\t\tthis._pane = this._map.getPane('popupPane');\n\n\t\tvar handle = this._handle = L.DomUtil.create('div', 'llarva-new-vertex-handle', this._pane);\n\t\tL.extend(handle.style, this.options.handleStyle);\n\n\t\tthis._newLatLng = new L.LatLng(0, 0);\n\t\tthis._previewLayer = this._lineLayer = L.polyline([], L.extend({}, this.options, {\n\t\t\tnoClip: true\n\t\t}));\n\n\t\tthis._map\n\t\t\t.on('mousemove', this._onMapMouseMove, this)\n\t\t\t.on('movestart', this._onMapMoveStart, this);\n\n\t\tL.DomEvent\n\t\t\t.on(handle, 'click', this._onClick, this)\n\t\t\t.on(handle, 'dblclick', this._onDblClick, this);\n\t},\n\n\taddLatLng: function (latlng) {\n\t\tthis._newLatLng = latlng.clone();\n\t\tthis._pushLatLng();\n\t},\n\n\t/**\n\t * Create an empty Polyline layer\n\t * @return {L.Polyline}\n\t */\n\tcreateLayer: function () {\n\t\treturn L.polyline([], L.extend({}, this.options.layerOptions, {\n\t\t\tnoClip: true\n\t\t}));\n\t},\n\n\t_next: function () {\n\n\t\tthis._latlngs.pop();\n\n\t\tif (this._latlngs.length >= this.options.threshold) {\n\t\t\ttry {\n\n\t\t\t\tthis._map.removeLayer(this._previewLayer);\n\t\t\t\tthis._previewLayer.setLatLngs(this._latlngs);\n\n\t\t\t\tthis.fire('ldraw:created', {\n\t\t\t\t\tlayer: this._previewLayer\n\t\t\t\t});\n\n\t\t\t\tthis.fireOnMap('ldraw:created', {\n\t\t\t\t\thandler: this,\n\t\t\t\t\tlayer: this._previewLayer\n\t\t\t\t});\n\n\t\t\t} finally {\n\t\t\t\tthis._lineLayer.setLatLngs([]);\n\t\t\t\tthis._latlngs = [];\n\t\t\t\tthis._previewLayer = this._lineLayer;\n\t\t\t\tdelete this._newLayer;\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveHooks: function () {\n\t\tL.DomEvent\n\t\t\t.off(this._handle, 'click', this._onClick, this)\n\t\t\t.off(this._handle, 'dblclick', this._onDblClick, this);\n\n\t\tthis._map\n\t\t\t.off('mousemove', this._onMapMouseMove, this)\n\t\t\t.off('movestart', this._onMapMoveStart, this);\n\n\t\tL.DomUtil.remove(this._handle);\n\n\t\tif (this._previewLayer) {\n\t\t\tthis._map.removeLayer(this._previewLayer);\n\t\t}\n\t},\n\n\t_getEventLayerPoint: function (evt) {\n\t\tvar bounding = this._pane.getBoundingClientRect();\n\t\tevt = L.larva.getSourceEvent(evt);\n\n\t\treturn new L.Point(\n\t\t\tevt.clientX - bounding.left,\n\t\t\tevt.clientY - bounding.top\n\t\t);\n\t},\n\n\t_onClick: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\n\t\tif (this._lastClick) {\n\t\t\tevt = L.larva.getSourceEvent(evt);\n\t\t\tvar dx = evt.clientX - this._lastClick.x,\n\t\t\t    dy = evt.clientY - this._lastClick.y;\n\n\t\t\tif ((dx * dx + dy * dy) < 100) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._lastClick = {};\n\t\t}\n\n\t\tthis._lastClick.x = evt.clientX;\n\t\tthis._lastClick.y = evt.clientY;\n\n\t\tif (!this._moving) {\n\t\t\tthis._pushLatLng();\n\t\t} else {\n\t\t\tdelete this._moving;\n\t\t}\n\t},\n\n\t_onDblClick: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\t\tthis._pushLatLng();\n\t\tthis._next();\n\t},\n\n\t_onMapMouseMove: function (evt) {\n\t\tvar latlng = evt.latlng;\n\n\t\tif (this.options.onMove) {\n\t\t\tthis.options.onMove(latlng);\n\t\t}\n\n\t\tthis._newLatLng.lat = latlng.lat;\n\t\tthis._newLatLng.lng = latlng.lng;\n\n\t\tvar point = this._map.latLngToLayerPoint(latlng);\n\n\t\tL.DomUtil.setPosition(this._handle, point.subtract(new L.Point(\n\t\t\tthis._handle.offsetWidth / 2,\n\t\t\tthis._handle.offsetHeight / 2\n\t\t)));\n\n\t\tif (this._latlngs.length) {\n\t\t\tthis._previewLayer.redraw();\n\t\t}\n\t},\n\n\t_onMapMoveStart: function () {\n\t\tthis._moving = true;\n\t},\n\n\t_pushLatLng: function () {\n\n\t\tthis._latlngs.push(this._newLatLng.clone());\n\n\t\tif (this._latlngs.length === this.options.threshold) {\n\t\t\tthis._map.removeLayer(this._lineLayer);\n\t\t\tthis._newLayer = this.createLayer().addTo(this._map);\n\t\t\tthis._previewLayer = this._newLayer;\n\t\t}\n\n\t\tif (!this._previewLayer._map) {\n\t\t\tthis._map.addLayer(this._previewLayer);\n\t\t}\n\n\t\tthis._previewLayer.setLatLngs(this._latlngs.concat(this._newLatLng));\n\t\tthis._previewLayer.redraw();\n\t}\n\n});\n\nL.larva.handler.newPolyline = function (map, options) {\n\treturn new L.larva.handler.New.Polyline(map, options);\n};","/**\n * @requires  New.Polyline.js\n */\n\n/**\n * @class Polygon creator\n * @extends {L.larva.handler.New.Polyline}\n */\nL.larva.handler.New.Polygon = L.larva.handler.New.Polyline.extend(\n\t/** @lends L.larva.handler.New.Polygon.prototype */\n{\n\n\toptions: {\n\t\tthreshold: 2\n\t},\n\n\t/**\n\t * @return {L.Polygon} Creates blank layer\n\t */\n\tcreateLayer: function () {\n\t\treturn L.polygon([], this.options.layerOptions);\n\t}\n\n});\n\n/**\n * @memberOf L.larva.handler.New.Polygon\n * @param  {L.Map} map\n * @param  {Object} options\n * @return {L.larva.handler.New.Polygon}\n */\nL.larva.handler.newPolygon = function (map, options) {\n\treturn new L.larva.handler.New.Polygon(map, options);\n};","/**\n * @requires Polygon.js\n * @requires Polyline.Edit.js\n * @requires ../Util.js\n * @requires New.Polygon.js\n */\nL.larva.handler.Polygon.Edit = L.larva.handler.Polyline.Edit.extend({\n\n\toptions: {\n\t\tallowMakeHole: true,\n\t\tmakeHoleCursor: 'crosshair',\n\t\tnewHoleOptions: {\n\n\t\t}\n\t},\n\n\taddHooks: function () {\n\t\tL.larva.handler.Polyline.Edit.prototype.addHooks.call(this);\n\n\t\tif (this.options.allowMakeHole) {\n\t\t\tthis._path\n\t\t\t\t.on('click', this._onPathClickHole, this);\n\t\t}\n\t},\n\n\t_searchNearestPoint: function (point) {\n\t\tvar found = [],\n\t\t    map = this.getMap(),\n\t\t    maxDist = this.options.maxDist;\n\n\t\tvar search = L.larva.handler.Polyline.Edit.searchNearestPointIn;\n\n\t\tthis._path.forEachPolygon(function (shell, holes) {\n\t\t\tfound = found.concat(search(point, maxDist, shell, map, true));\n\n\t\t\tholes.forEach(function (latlngs) {\n\t\t\t\tfound = found.concat(search(point, maxDist, latlngs, map, true));\n\t\t\t}, this);\n\t\t}, this);\n\n\t\treturn found;\n\t},\n\n\t_onNewHole: function () {\n\t\tif (this._shellHole) {\n\t\t\t// var holeLatlngs = evt.layer.getLatLngs().slice(0);\n\t\t\t// var latlngs = this._path.getLatLngs();\n\t\t}\n\t},\n\n\t_onPathClickHole: function (evt) {\n\n\t\tif (!this._makingHole && evt.originalEvent.ctrlKey) {\n\t\t\tthis._makingHole = true;\n\n\t\t\tvar point = evt.layerPoint, points, found = [];\n\n\t\t\tthis._path.forEachPolygon(function (shell) {\n\t\t\t\tpoints = shell.map(this.getMap().latLngToLayerPoint, this.getMap());\n\n\t\t\t\tif (L.larva.Util.pointIsInside(point, points)) {\n\t\t\t\t\tfound.push(shell);\n\t\t\t\t}\n\t\t\t}, this);\n\n\t\t\tif (found.length === 1) {\n\t\t\t\tthis._shellHole = found[0];\n\t\t\t\tthis._newPolygonHole = new L.larva.handler.New.Polygon(this.getMap(), L.extend({}, this.options.newHoleOptions, {\n\t\t\t\t\tallowFireOnMap: false\n\t\t\t\t}));\n\n\t\t\t\tthis._newPolygonHole\n\t\t\t\t\t.on('ldraw:created', this._onNewHole, this)\n\t\t\t\t\t.enable();\n\n\t\t\t\tthis._newPolygonHole.addLatLng(evt.latlng);\n\t\t\t}\n\t\t}\n\t},\n\n\t_restoreCursor: function () {\n\n\t},\n\n\t_setHoleCursor: function () {\n\n\t}\n\n});\n\nL.Polyline.addInitHook(function () {\n\n\tif (this instanceof L.Polygon) {\n\t\tthis.larva.edit = new L.larva.handler.Polygon.Edit(this);\n\t} else {\n\t\tthis.larva.edit = new L.larva.handler.Polyline.Edit(this);\n\t}\n\n});"],"sourceRoot":"/source/"}