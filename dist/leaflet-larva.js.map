{"version":3,"sources":["L.larva.js","frame/package.js","frame/Rect.js","frame/RECT_STYLE.js","ext/L.Polyline.js","handler/package.js","handler/Path.js","handler/Polyline.js","handler/Polyline.Transform.js","handler/Polyline.Rotate.js","handler/Polyline.Move.js","handler/Polyline.Resize.js","ext/L.Polygon.js","Style.js","frame/Vertices.js","handler/Polyline.Edit.js","handler/Polygon.js","Util.js","handler/New.js","ext/L.LatLngBounds.js","UndoRedo.js","Command.js","Undoable.js","l10n.js","handler/New.Polyline.js","handler/New.Polygon.js","handler/Polygon.Edit.js"],"names":["L","larva","version","CTRL_KEY","NOP","getEventKeyCode","event","keyCode","key","getHeight","el","offsetHeight","getSourceEvent","evt","sourceEvent","touches","getWidth","offsetWidth","isFlat","latlngs","Array","isArray","LatLng","project","latlng","point","Projection","Mercator","y","unproject","clone","Map","addInitHook","frame","Rect","Layer","extend","statics","TOP_LEFT","TOP_MIDDLE","TOP_RIGHT","MIDDLE_LEFT","MIDDLE_MIDDLE","MIDDLE_RIGHT","BOTTOM_LEFT","BOTTOM_MIDDLE","BOTTOM_RIGHT","options","pane","initialize","path","_path","beforeAdd","map","getPane","createPane","getComputedStyle","id","_handles","_el","getEvents","zoom","_onMapZoom","getDraggable","_draggable","getFrameClientRect","getBoundingClientRect","getHandle","getPosition","DomUtil","hideHandle","i","arguments","length","style","display","onAdd","create","DomEvent","on","Draggable","START","join","_onStart","forEach","_id","_draggables","_updateFrame","_updateHandles","onRemove","disable","off","stop","remove","empty","setElementStyle","styles","element","setStyle","oldStyle","_style","hide","draggable","enable","removeClass","className","addClass","_updateDraggable","updateBounds","prototype","slice","call","_onEnd","MOVE","document","_onMove","END","body","fire","handle","target","type","left","offsetLeft","top","offsetTop","marginLeft","parseInt","marginTop","setPosition","zoomChanged","maintainHandles","currentPosition","handlePosition","bounds","getBounds","southEastPoint","_map","latLngToLayerPoint","getSouthEast","northWestPoint","getNorthWest","computedStyle","add","subtract","x","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth","oldWidth","oldHeight","width","height","scaleBy","right","bottom","widthOf","heightOf","borderWidth","br","bm","bl","mm","ml","mr","tr","tm","tl","rect","_rectFrame","RECT_STYLE","RESIZE","ROTATE","Polyline","forEachLatLng","include","fn","context","j","getLatLngs","_bounds","LatLngBounds","getType","POLYLINE","MULTIPOLYLINE","_latlngs","forEachLine","Error","setBounds","handler","Path","Handler","includes","Evented","setOptions","getMap","layerPointToWorldPoint","a","b","undefined","layerPointToLatLng","backupLatLngs","_original","Transform","noUpdate","frameStyle","_frameStyle","transform","transformed","original","newLatLng","args","concat","transformPoint","apply","lat","lng","_frame","redraw","Rotate","addHooks","addTo","sin","cos","dx","dy","position","centerBounding","_centerElement","cx","cy","clientX","clientY","Math","sqrt","_vector","frameBounding","framePosition","worldCenterPoint","centerElement","targetBounding","vector","rotate","Move","_previousCursor","cursor","_getEventWorldPoint","bounding","worldPoint","_startPosition","ctrlKey","altKey","dxy","min","abs","move","Resize","xscale","yscale","_reference","screenX","invertX","screenY","invertY","xyscale","max","reference","resize","Polygon","POLYGON","MULTIPOLYGON","k","polygons","polygon","hole","push","forEachPolygon","l","Style","Class","STYLES","TYPE","fillOpacity","opacity","fillColor","color","source","styleName","_transform","cV","d","multiplyBy","transfom","currentValue","delta","rgb","getRGB","convertColorComponent","r","g","substr","component","toString","Vertices","colorFactor","handleClassName","opacityFactor","tolerance","simplifyZoom","moveend","_updateView","zoomend","_onZoomEnd","getLatLng","handleId","_latlng","getPathType","getPoint","_point","_container","offsetParent","removeHandle","evtName","_onHandleDblclick","prev","_prev","next","_next","_isPolygon","_first","_last","first","index","_lines","handles","indexOf","splice","_aura","removeLayer","polyline","startAura","latlng0","noClip","isPolygon","_position","stopAura","aura","updateHandle","_updateHandlePosition","_createHandles","isHole","_isHole","_handle","stamp","originalEvent","newPoint","line","shell","holes","_subtract","_showHandles","pointsToShow","getPixelBounds","pixelOrigin","getPixelOrigin","points","PolyUtil","clipPolygon","filter","lineClip","LineUtil","clipSegment","doSimplify","getZoom","getMaxZoom","simplify","appendChild","vertices","_verticesFrame","Edit","maxDist","_onHandleStart","_onHandleDbclick","_onDblclick","removeHooks","_searchNearestPoint","found","searchNearestPointIn","_addVertex","founds","_removeLatLng","_onAuraEnd","mouseEventToLayerPoint","shiftKey","_onHandleEnd","_onHandleMove","_origin","_originalPoint","_handleId","closed","aPoint","bPoint","dist","pointToSegmentDistance","closestPointOnSegment","Util","pointIsInside","isInside","New","allowFireOnMap","fireOnMap","eventName","eventObject","latLng","latLngBounds","getSouthWest","getNorthEast","UndoRedo","limit","REDO","UNDO","_onDo","_bottom","_current","_top","_total","_state","undo","current","unapply","redo","command","_push","_pop","newBottom","Mixin","undoRedo","allowUndo","undoOptions","Command","APPLY","UNAPPLY","undoable","desc","doFn","undoFn","_undoable","_desc","_doFn","_undoFn","_args","_nextState","nextState","Undoable","_do","l10n","newPolylinePushLatLng","maxDragCount","minSqrDistance","handleStyle","border","layerOptions","onMove","threshold","addLatLng","_toAddLatLng","_pushLatLng","_pane","_halfHandleSize","Point","_newLatLng","_previewLayer","_lineLayer","_onMapMouseMove","_onMapDragStart","_onMapDrag","_onHandleMousedown","_onHandleMouseup","_onHandleDblClick","_lastDown","createLayer","setLatLngs","layer","_newLayer","_currentBounds","eventPoint","_dragCount","_previewBounds","_doPushLatLng","_undoPushLatLng","toAddLatLng","addLayer","pop","newPolyline","newPolygon","allowMakeHole","makeHoleCursor","newHoleOptions","_onPathClickHole","search","_onNewHole","_shellHole","_makingHole","_newPolygonHole","p","layerPoint","_restoreCursor","_setHoleCursor","edit"],"mappings":"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","file":"leaflet-larva.js","sourcesContent":["/**\n * Leaflet namespace\n * @namespace L\n */\n\n/**\n * Leaflet Larva namespace\n *\n * @namespace L.larva\n * \n */\nL.larva = {\n\tversion: '0.1.1',\n\n\tCTRL_KEY: 17,\n\n\tNOP: function () {},\n\n\t/**\n\t * @param  {Event} event\n\t * @return {Number}\n\t */\n\tgetEventKeyCode: function (event) {\n\t\treturn event.keyCode || event.key;\n\t},\n\n\t/**\n\t * @param  {HTMLElement} el\n\t * @return {Number}\n\t */\n\tgetHeight: function (el) {\n\t\treturn el.offsetHeight;\n\t},\n\n\t/**\n\t * @param  {L.Event} evt\n\t * @return {Event}\n\t */\n\tgetSourceEvent: function (evt) {\n\t\tif (evt.sourceEvent) {\n\t\t\tevt = evt.sourceEvent;\n\t\t}\n\n\t\treturn !evt.touches ?\n\t\t        evt : evt.touches[0];\n\t},\n\n\t/**\n\t * @param  {HTMLElement} el\n\t * @return {Number}\n\t */\n\tgetWidth: function (el) {\n\t\treturn el.offsetWidth;\n\t},\n\n\t/**\n\t * @param  {L.LatLng[]}  latlngs\n\t * @return {Boolean}\n\t */\n\tisFlat: function (latlngs) {\n\n\t\tif (Array.isArray(latlngs)) {\n\t\t\tif (latlngs[0] instanceof L.LatLng) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t},\n\n\tproject: function (latlng) {\n\t\tvar point = L.Projection.Mercator.project(latlng);\n\t\tpoint.y = 0 - point.y;\n\t\treturn point;\n\t},\n\n\tunproject: function (point) {\n\t\tpoint = point.clone();\n\t\tpoint.y = 0 - point.y;\n\t\treturn L.Projection.Mercator.unproject(point);\n\t}\n};\n\nL.Map.addInitHook(function () {\n\tthis.larva = {};\n});","/**\n * @namespace L.larva.frame\n */\nL.larva.frame = {\n\n};","/**\n * @requires package.js\n *\n */\n\n/**\n * @class \n * Rectangle frame, create a frame to layer edition with handlers\n * \n * @extends L.Layer\n *\n * @param {L.Path} path\n * @param {Object} [options]\n * @param {String} options.pane Where in leaflet pane\n */\nL.larva.frame.Rect = L.Layer.extend(\n/** @lends L.larva.frame.Rect.prototype */\n{\n\n\tstatics: {\n\t\tTOP_LEFT: 'tl',\n\t\tTOP_MIDDLE: 'tm',\n\t\tTOP_RIGHT: 'tr',\n\t\tMIDDLE_LEFT: 'ml',\n\t\tMIDDLE_MIDDLE: 'mm',\n\t\tMIDDLE_RIGHT: 'mr',\n\t\tBOTTOM_LEFT: 'bl',\n\t\tBOTTOM_MIDDLE: 'bm',\n\t\tBOTTOM_RIGHT: 'br'\n\t},\n\n\toptions: {\n\t\tpane: 'llarva-frame'\n\t},\n\n\tinitialize: function (path) {\n\t\tthis._path = path;\n\t},\n\n\tbeforeAdd: function (map) {\n\t\tif (!map.getPane(this.options.pane)) {\n\t\t\tmap.createPane(this.options.pane);\n\t\t}\n\t},\n\n\t/**\n\t * Returns Computed CSS Style of an handler\n\t * @param  {String} id\n\t * @return {CSSStyleDeclaration}\n\t */\n\tgetComputedStyle: function(id) {\n\t\tif (id) {\n\t\t\tif (this._handles[id]) {\n\t\t\t\treturn getComputedStyle(this._handles[id]);\n\t\t\t}\n\t\t} else {\n\t\t\treturn getComputedStyle(this._el);\n\t\t}\n\t},\n\n\tgetEvents: function () {\n\t\treturn {\n\t\t\tzoom: this._onMapZoom\n\t\t};\n\t},\n\n\tgetDraggable: function () {\n\t\treturn this._draggable;\n\t},\n\n\tgetFrameClientRect: function () {\n\t\treturn this._el.getBoundingClientRect();\n\t},\n\n\tgetHandle: function (id) {\n\t\treturn this._handles[id];\n\t},\n\n\tgetPosition: function(id) {\n\t\tif (id) {\n\t\t\treturn L.DomUtil.getPosition(this._handles[id]);\n\t\t} else {\n\t\t\treturn L.DomUtil.getPosition(this._el);\n\t\t}\n\t},\n\n\thideHandle: function() {\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tif (this._handles[arguments[i]]) {\n\t\t\t\tthis._handles[arguments[i]].style.display = 'none';\n\t\t\t}\n\t\t}\n\t},\n\n\tonAdd: function () {\n\t\tvar el = this._el = L.DomUtil.create('div', 'llarva-pathframe', this.getPane());\n\t\tL.DomEvent.on(el, L.Draggable.START.join(' '), this._onStart, this);\n\n\t\tthis._handles = {};\n\n\t\t['tl','tm','tr','ml','mm','mr','bl','bm','br'].forEach(function (id) {\n\n\t\t\tthis._handles[id] = L.DomUtil.create('div', 'llarva-' + id, el);\n\t\t\tthis._handles[id]._id = id;\n\t\t\tL.DomEvent.on(this._handles[id], L.Draggable.START.join(' '), this._onStart, this);\n\n\t\t}, this);\n\n\t\tthis._draggable = new L.Draggable(el);\n\t\tthis._draggables = {};\n\t\tthis._updateFrame(false);\n\t\tthis._updateHandles();\n\t},\n\n\tonRemove: function() {\n\t\tvar id;\n\n\t\tif (this._draggable) {\n\t\t\tthis._draggable.disable();\n\t\t}\n\n\t\tfor (id in this._draggables) {\n\t\t\tthis._draggables[id].disable();\n\t\t}\n\n\t\tL.DomEvent.off(this._el, 'mousedown click', L.DomEvent.stop);\n\n\t\tfor (id in this._handles) {\n\t\t\tL.DomEvent.off(this._handles[id], 'mousedown click', L.DomEvent.stop);\n\t\t}\n\n\t\tL.DomUtil.remove(this._el);\n\t\tL.DomUtil.empty(this._el);\n\n\t\tdelete this._el;\n\t},\n\n\tsetElementStyle: function (styles, element) {\n\t\tif (!element) {\n\t\t\tL.extend(this._el.style, styles);\n\t\t} else {\n\t\t\telement = this._handles[element];\n\n\t\t\tif (element) {\n\t\t\t\tL.extend(element.style, styles);\n\t\t\t}\n\t\t}\n\t},\n\n\tsetStyle: function (style) {\n\t\tvar id, el, oldStyle = this._style;\n\n\t\tfor (id in this._handles) {\n\t\t\tel = this._handles[id];\n\t\t\tel.style.display = 'block';\n\n\t\t\tif (this._draggables[id]) {\n\t\t\t\tthis._draggables[id].disable();\n\t\t\t\tdelete this._draggables[id];\n\t\t\t}\n\n\t\t\t// if (oldStyle) {\n\t\t\t// \tL.DomUtil.removeClass(el, oldStyle.className + '-' + id);\n\t\t\t// }\n\n\t\t\t// L.DomUtil.addClass(el, style.className + '-' + id);\n\n\t\t\tif (style[id]) {\n\t\t\t\tif (style[id].hide) {\n\t\t\t\t\tel.style.display = 'none';\n\t\t\t\t}\n\n\t\t\t\tif (style[id].draggable) {\n\t\t\t\t\tthis._draggables[id] = new L.Draggable(el);\n\t\t\t\t\tthis._draggables[id].enable();\n\t\t\t\t\tL.DomEvent.off(el, 'mousedown click', L.DomEvent.stop);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (oldStyle) {\n\t\t\tL.DomUtil.removeClass(this._el, oldStyle.className);\n\t\t}\n\n\t\tL.DomUtil.addClass(this._el, style.className);\n\n\t\tthis._style = style;\n\n\t\tthis._updateHandles();\n\n\t\tfor (id in this._draggables) {\n\t\t\tthis._updateDraggable(id);\n\t\t}\n\t},\n\n\tupdateBounds: function () {\n\t\tthis._updateFrame(false, Array.prototype.slice.call(arguments, 0));\n\t},\n\n\t_onEnd: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\n\t\tfor (var id in L.Draggable.MOVE) {\n\t\t\tL.DomEvent\n\t\t\t\t.off(document, L.Draggable.MOVE[id], this._onMove, this)\n\t\t\t\t.off(document, L.Draggable.END[id], this._onEnd, this);\n\t\t}\n\n\t\tL.DomUtil.removeClass(document.body, 'leaflet-dragging');\n\n\t\tthis.fire('drag:end', {\n\t\t\tsourceEvent: evt\n\t\t});\n\t},\n\n\t_onMapZoom: function () {\n\t\tthis._updateFrame(true);\n\t},\n\n\t_onMove: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\n\t\tthis.fire('drag:move', {\n\t\t\tsourceEvent: evt\n\t\t});\n\t},\n\n\t_onStart: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\n\t\tthis.fire('drag:start', {\n\t\t\tsourceEvent: evt,\n\t\t\thandle: evt.target._id\n\t\t});\n\n\t\tL.DomEvent\n\t\t\t.on(document, L.Draggable.MOVE[evt.type], this._onMove, this)\n\t\t\t.on(document, L.Draggable.END[evt.type], this._onEnd, this);\n\n\t\tL.DomUtil.addClass(document.body, 'leaflet-dragging');\n\t},\n\n\t_updateDraggable: function (id) {\n\t\tvar el = this._handles[id];\n\t\tvar left = el.offsetLeft,\n\t\ttop = el.offsetTop;\n\n\t\tif (el.style.marginLeft) {\n\t\t\tleft -= parseInt(el.style.marginLeft);\n\t\t}\n\n\t\tif (el.style.marginTop) {\n\t\t\ttop -= parseInt(el.style.marginTop);\n\t\t}\n\n\t\tL.extend(el.style, {\n\t\t\tleft: '0px', top: '0px'\n\t\t});\n\n\t\tL.DomUtil.setPosition(el, L.point(left, top));\n\t},\n\n\t_updateFrame: function (zoomChanged, maintainHandles) {\n\t\tvar id,\n\t\t    currentPosition = L.DomUtil.getPosition(this._el),\n\t\t    handle,\n\t\t    handlePosition;\n\n\t\tvar bounds = this._path.getBounds();\n\n\t\tvar southEastPoint = this._map.latLngToLayerPoint(bounds.getSouthEast()),\n\t\tnorthWestPoint = this._map.latLngToLayerPoint(bounds.getNorthWest());\n\n\t\tvar computedStyle = getComputedStyle(this._el);\n\n\t\tif (maintainHandles && currentPosition && maintainHandles.length) {\n\t\t\tfor (var i=0; i<maintainHandles.length; i++) {\n\t\t\t\thandle = this._handles[maintainHandles[i]];\n\t\t\t\tif (handle && (handlePosition = L.DomUtil.getPosition(handle))) {\n\t\t\t\t\thandlePosition = handlePosition.add(currentPosition);\n\t\t\t\t\tL.DomUtil.setPosition(handle, handlePosition.subtract(northWestPoint));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tL.DomUtil.setPosition(this._el, northWestPoint);\n\n\t\tvar x = parseInt(computedStyle.borderLeftWidth) + parseInt(computedStyle.borderRightWidth),\n\t\ty = parseInt(computedStyle.borderTopWidth) + parseInt(computedStyle.borderBottomWidth);\n\n\t\tvar oldWidth, oldHeight;\n\t\tif (zoomChanged) {\n\t\t\toldWidth = L.larva.getWidth(this._el);\n\t\t\toldHeight = L.larva.getHeight(this._el);\n\t\t}\n\n\t\tthis._el.style.width = (southEastPoint.x - northWestPoint.x - x) + 'px';\n\t\tthis._el.style.height = (southEastPoint.y - northWestPoint.y - y) + 'px';\n\n\t\tif (zoomChanged) {\n\n\t\t\tfor (id in this._handles) {\n\t\t\t\thandle = this._handles[id];\n\t\t\t\thandlePosition = L.DomUtil.getPosition(handle);\n\n\t\t\t\tif (handlePosition) {\n\t\t\t\t\tL.DomUtil.setPosition(handle, handlePosition.scaleBy(L.point(\n\t\t\t\t\t\tL.larva.getWidth(this._el) / oldWidth, \n\t\t\t\t\t\tL.larva.getHeight(this._el) / oldHeight\n\t\t\t\t\t)));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.southEastPoint = southEastPoint;\n\t\tthis.northWestPoint = northWestPoint;\n\t},\n\n\t_updateHandles: function () {\n\t\tvar el, computedStyle, right, bottom, left, top;\n\t\tvar widthOf = L.larva.getWidth, heightOf = L.larva.getHeight;\n\n\t\tcomputedStyle = getComputedStyle(this._el);\n\n\t\tvar borderWidth = {\n\t\t\tbottom: 'borderBottomWidth',\n\t\t\tleft: 'borderLeftWidth',\n\t\t\tright: 'borderRightWidth',\n\t\t\ttop: 'borderTopWidth'\n\t\t};\n\n\t\tfor (var id in borderWidth) {\n\t\t\tborderWidth[id] = parseInt(computedStyle[borderWidth[id]]) / 2;\n\t\t}\n\n\t\tel = this._handles.br;\n\n\t\tright = (- (widthOf(el) / 2) - borderWidth.right) + 'px';\n\t\tbottom = (- (heightOf(el) / 2) - borderWidth.bottom) + 'px';\n\n\t\tL.extend(el.style, {\n\t\t\tright: right,\n\t\t\tbottom: bottom\n\t\t});\n\n\t\tel = this._handles.bm;\n\t\tleft = (-(widthOf(el) / 2)) + 'px';\n\t\tbottom = (- (heightOf(el) / 2) - borderWidth.bottom) + 'px';\n\n\t\tL.extend(el.style, {\n\t\t\tleft: '50%',\n\t\t\t'margin-left': left,\n\t\t\tbottom: bottom\n\t\t});\n\n\t\tel = this._handles.bl;\n\t\tleft = (-(widthOf(el) / 2) - borderWidth.left) + 'px';\n\t\tbottom = (- (heightOf(el) / 2) - borderWidth.bottom) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tleft: left,\n\t\t\tbottom: bottom\n\t\t});\n\n\t\tel = this._handles.mm;\n\t\tleft = -(widthOf(el) / 2) + 'px';\n\t\ttop = -(heightOf(el) / 2) + 'px';\n\t\tL.extend(el.style, {\n\t\t\ttop: '50%',\n\t\t\tleft: '50%',\n\t\t\t'margin-left': left,\n\t\t\t'margin-top': top\n\t\t});\n\n\t\tel = this._handles.ml;\n\t\ttop = -(heightOf(el) / 2) + 'px';\n\t\tleft = (-(widthOf(el) / 2) - borderWidth.left) + 'px';\n\t\tL.extend(el.style, {\n\t\t\ttop: '50%',\n\t\t\t'margin-top': top,\n\t\t\tleft: left\n\t\t});\n\n\t\tel = this._handles.mr;\n\t\tright = (- (widthOf(el) / 2) - borderWidth.right) + 'px';\n\t\ttop = -(heightOf(el) / 2) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tright: right,\n\t\t\ttop: '50%',\n\t\t\t'margin-top': top\n\t\t});\n\n\t\tel = this._handles.tr;\n\t\tright = (-(widthOf(el) / 2) - borderWidth.right) + 'px';\n\t\ttop = (-(heightOf(el) / 2) - borderWidth.top) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tright: right,\n\t\t\ttop: top\n\t\t});\n\n\t\tel = this._handles.tm;\n\t\ttop = (-(heightOf(el) / 2) - borderWidth.top) + 'px';\n\t\tleft = -(widthOf(el) / 2) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tleft: '50%',\n\t\t\t'margin-left': left,\n\t\t\ttop: top\n\t\t});\n\n\t\tel = this._handles.tl;\n\t\ttop = (-(heightOf(el) / 2) - borderWidth.top) + 'px';\n\t\tleft = (-(widthOf(el) / 2) - borderWidth.left) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tleft: left,\n\t\t\ttop: top\n\t\t});\n\t}\n});\n\nL.larva.frame.rect = function (path) {\n\tif (path && path._rectFrame) {\n\t\treturn path._rectFrame;\n\t}\n\n\treturn (path._rectFrame = new L.larva.frame.Rect(path));\n};","/**\n * @requires package.js\n */\n\n/**\n * \n * **L.larva.frame.RECT_STYLE.RESIZE**\n *\n * *Resizable* frame properties\n *\n * **L.larva.frame.RECT_STYLE.ROTATE**\n *\n * *Rotateable* frame properties\n * \n */\nL.larva.frame.RECT_STYLE = {};\n\nL.larva.frame.RECT_STYLE.RESIZE = {\n\tclassName: 'llarva-pathframe-resize',\n\tmm: {\n\t\thide: true\n\t}\n};\n\nL.larva.frame.RECT_STYLE.ROTATE = {\n\tclassName: 'llarva-pathframe-rotate',\n\ttm: {\n\t\thide: true\n\t},\n\n\tml: {\n\t\thide: true\n\t},\n\n\tmr: {\n\t\thide: true\n\t},\n\n\tbm: {\n\t\thide: true\n\t},\n\n\tmm: {\n\t\tdraggable: true\n\t}\n};","/**\n * @external \"L.Polyline\"\n */\nif (!L.Polyline.prototype.forEachLatLng) {\n\tL.Polyline.include({\n\n\t\t/**\n\t\t * @memberOf external:\"L.Polyline\"\n\t\t * @instance\n\t\t * @param  {Function} fn ({L.LatLng}, {L.LatLng[]})\n\t\t * @param  {Any}   context\n\t\t */\n\t\tforEachLatLng: function (fn, context) {\n\t\t\tvar i=0, j, latlngs = this.getLatLngs();\n\n\t\t\tif (L.larva.isFlat(latlngs)) {\n\t\t\t\tfor (; i<latlngs.length; i++) {\n\t\t\t\t\tfn.call(context, latlngs[i], latlngs);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor (; i<latlngs.length; i++) {\n\t\t\t\t\tfor (j=0; j<latlngs[i].length; j++) {\n\t\t\t\t\t\tfn.call(context, latlngs[i][j], latlngs[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n}\n\nif (!L.Polyline.prototype.updateBounds) {\n\tL.Polyline.include({\n\n\t\t/**\n\t\t * @memberOf external:\"L.Polyline\"\n\t\t * @instance\n\t\t */\n\t\tupdateBounds: function () {\n\t\t\tvar bounds = this._bounds = new L.LatLngBounds();\n\n\t\t\tthis.forEachLatLng(function (latlng) {\n\t\t\t\tbounds.extend(latlng);\n\t\t\t});\n\t\t}\n\n\t});\n}\n\nif (!L.Polyline.prototype.getType) {\n\n\tL.extend(L.Polyline, {\n\t\tPOLYLINE: 1,\n\t\tMULTIPOLYLINE: 2\n\t});\n\n\tL.Polyline.include({\n\t\t/**\n\t\t * @memberOf external:\"L.Polyline\"\n\t\t * @instance\n\t\t * @returns {Number}\n\t\t *\n\t\t * Value | Type\n\t\t * ------|-----\n\t\t * 1 | Polyline\n\t\t * 2 | MultiPolyline\n\t\t */\n\t\tgetType: function () {\n\t\t\treturn Array.isArray(this._latlngs[0]) ?\n\t\t\t       L.Polyline.MULTIPOLYLINE : L.Polyline.POLYLINE;\n\t\t}\n\t});\n}\n\nL.Polyline.include({\n\t/**\n\t * @memberOf external:\"L.Polyline\"\n\t * @instance\n\t * @param  {Function} fn\n\t * @param  {Any}   context\n\t */\n\tforEachLine: function (fn, context) {\n\n\t\tswitch (this.getType()) {\n\t\t\tcase L.Polyline.POLYLINE:\n\t\t\tcase L.Polyline.MULTIPOLYLINE:\n\n\t\t\t\tif (!Array.isArray(this._latlngs[0])) {\n\t\t\t\t\tfn.call(context, this._latlngs);\n\t\t\t\t} else {\n\t\t\t\t\tfor (var i=0; i<this._latlngs.length; i++) {\n\t\t\t\t\t\tfn.call(context, this._latlngs[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Invalid geometry type!');\n\t\t}\n\t},\n\n\t/**\n\t * @memberOf external:\"L.Polyline\"\n\t * @instance\n\t * @param {L.LatLngBounds} bounds\n\t */\n\tsetBounds: function (bounds) {\n\t\tthis._bounds = bounds;\n\t}\n});","/**\n * All larva handlers\n * \n * @namespace L.larva.handler\n */\nL.larva.handler = {\n\n};","/**\n * @requires package.js\n */\n\n/**\n * @class Base class for layers handlers\n * \n * @extends L.Handler\n * @mixes L.Evented\n *\n * @param {L.Path} path layer to handle\n * @param {Object} options\n */\nL.larva.handler.Path = L.Handler.extend(\n/** @lends L.larva.handler.Path.prototype */\n{\n\n\tincludes: [L.Evented.prototype],\n\n\tinitialize: function (path, options) {\n\t\tL.setOptions(this, options);\n\n\t\tthis._path = path;\n\t},\n\n\t/**\n\t * @return {L.Map}\n\t */\n\tgetMap: function () {\n\t\treturn this._path._map;\n\t},\n\n\t/**\n\t * @param  {Number} x\n\t * @param  {Number} y\n\t * @return {L.Point} \n\t */\n\tlayerPointToWorldPoint: function (a, b) {\n\t\treturn L.larva.project(this.unproject(a, b));\n\t},\n\n\t/**\n\t * @param  {Number} x layer x\n\t * @param  {Number} y layer y\n\t * @return {L.LatLng}\n\t */\n\tunproject: function (a, b) {\n\t\tif (b !== undefined) {\n\t\t\treturn this.getMap().layerPointToLatLng(L.point(a, b));\n\t\t} else {\n\t\t\treturn this.getMap().layerPointToLatLng(a);\n\t\t}\n\t}\n\n});\n\nL.Path.addInitHook(function () {\n\tthis.larva = {};\n});","/**\n * @requires Path.js\n */\n\n/**\n * @class Polyline Handler base class\n *\n * @extends {L.larva.handler.Path}\n */\nL.larva.handler.Polyline = L.larva.handler.Path.extend(\n/** @lends L.larva.handler.Polyline.prototype */\n{\n\t/**\n\t * Backup all latlngs\n\t */\n\tbackupLatLngs: function () {\n\t\tthis._path.forEachLatLng(function (latlng) {\n\t\t\tlatlng._original = latlng.clone();\n\t\t});\n\t}\n\n});","/**\n * @requires Polyline.js\n */\n\n/**\n * @class Base class for every LatLng transformer\n *\n * @extends {L.larva.handler.Polyline}\n *\n * @param {L.Path} path Layer to transform\n * @param {L.larva.frame.Style} frameStyle, @see {L.larva.frame}\n * @param {Object} options\n */\nL.larva.handler.Polyline.Transform = L.larva.handler.Polyline.extend(\n/** @lends L.larva.handler.Polyline.Transform.prototype */\n{\n\toptions: {\n\t\tnoUpdate: []\n\t},\n\n\tinitialize: function (path, frameStyle, options) {\n\t\tL.larva.handler.Polyline.prototype.initialize.call(this, path, options);\n\n\t\tthis._frameStyle = frameStyle;\n\t},\n\n\t/**\n\t * Transform each layer point\n\t * @param {...Object}\n\t */\n\ttransform: function () {\n\n\t\tvar transformed = L.point(0, 0),\n\t\t    original,\n\t\t    newLatLng;\n\n\t\tvar args = [null, transformed].concat(Array.prototype.slice.call(arguments, 0));\n\n\t\tthis._path.forEachLatLng(function (latlng) {\n\n\t\t\toriginal = args[0] = L.larva.project(latlng._original);\n\n\t\t\ttransformed.x = original.x;\n\t\t\ttransformed.y = original.y;\n\n\t\t\tthis.transformPoint.apply(this, args);\n\n\t\t\tnewLatLng = L.larva.unproject(transformed);\n\t\t\tlatlng.lat = newLatLng.lat;\n\t\t\tlatlng.lng = newLatLng.lng;\n\n\t\t}, this);\n\n\t\tthis._path.updateBounds();\n\n\t\tthis._frame.updateBounds.apply(this._frame, this.options.noUpdate);\n\t\tthis._path.redraw();\n\t},\n\n\t/**\n\t * @abstract\n\t * @param {L.Point} original Original point\n\t * @param {L.Point} transformed Point transformed\n\t * @param {...Object}\n\t */\n\ttransformPoint: function () {\n\t\tthrow new Error('Unsupported Operation!');\n\t}\n});","/**\n * @requires ../frame/Rect.js\n * @requires ../frame/RECT_STYLE.js\n * @requires ../ext/L.Polyline.js\n * \n * @requires Polyline.Transform.js\n */\n\n/**\n * @class Rotate polygon\n *\n * @extends {L.larva.handler.Polyline.Transform}\n */\nL.larva.handler.Polyline.Rotate = L.larva.handler.Polyline.Transform.extend(\n/** @lends L.larva.handler.Polyline.Transform.prototype */\n{\n\n\toptions: {\n\t\tnoUpdate: [L.larva.frame.Rect.MIDDLE_MIDDLE]\n\t},\n\n\taddHooks: function () {\n\t\tthis._frame = L.larva.frame.rect(this._path);\n\t\tthis._frame.addTo(this.getMap());\n\n\t\tthis._frame.setStyle(this._frameStyle);\n\n\t\tthis._frame.on('drag:start', this._onStart, this);\n\t},\n\n\t/**\n\t * @param  {L.Point} original\n\t * @param  {L.Point} transformed\n\t * @param  {Number} sin\n\t * @param  {Number} cos\n\t * @param  {Number} dx\n\t * @param  {Number} dy\n\t */\n\ttransformPoint: function (original, transformed, sin, cos, dx, dy) {\n\t\ttransformed.x = original.x * cos - original.y * sin + dx;\n\t\ttransformed.y = original.x * sin + original.y * cos + dy;\n\t},\n\n\t_onEnd: function () {\n\t\tthis._frame\n\t\t\t.off('drag:move', this._onMove, this)\n\t\t\t.off('drag:end', this._onEnd, this);\n\t},\n\n\t_onMove: function (evt) {\n\t\tvar position = L.larva.getSourceEvent(evt);\n\n\t\tvar centerBounding = this._centerElement.getBoundingClientRect();\n\n\t\tvar cx = (centerBounding.left + centerBounding.width / 2),\n\t\t    cy = (centerBounding.top + centerBounding.height / 2);\n\n\t\tvar i = position.clientX - cx,\n\t\t    j = position.clientY - cy;\n\n\t\tvar length = Math.sqrt(i * i + j * j);\n\n\t\t// cross product\n\t\tvar sin = (this._vector.i * j - this._vector.j * i) / length;\n\n\t\t// scalar product\n\t\tvar cos = (this._vector.i * i + this._vector.j * j) / length;\n\n\t\tvar frameBounding = this._frame.getFrameClientRect(),\n\t\t    framePosition = this._frame.getPosition();\n\n\t\tcx = (cx - frameBounding.left) + framePosition.x;\n\t\tcy = (cy - frameBounding.top) + framePosition.y;\n\n\t\tvar worldCenterPoint = this.layerPointToWorldPoint(cx, cy);\n\n\t\tvar dx = worldCenterPoint.x * (1 - cos) + worldCenterPoint.y * sin;\n\t\tvar dy = worldCenterPoint.y * (1 - cos) - worldCenterPoint.x * sin;\n\n\t\tthis.transform(sin, cos, dx, dy);\n\t},\n\n\t_onStart: function (evt) {\n\t\tif (!evt.handle || evt.handle === L.larva.frame.Rect.MIDDLE_MIDDLE) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar centerElement = this._centerElement = this._frame.getHandle(L.larva.frame.Rect.MIDDLE_MIDDLE);\n\n\t\tvar centerBounding = centerElement.getBoundingClientRect(),\n\t\t    targetBounding = evt.sourceEvent.target.getBoundingClientRect();\n\n\t\tvar vector = this._vector = {\n\t\t\ti: (targetBounding.left + targetBounding.width / 2) - (centerBounding.left - centerBounding.width / 2),\n\t\t\tj: (targetBounding.top + targetBounding.height / 2) - (centerBounding.top - centerBounding.height / 2)\n\t\t};\n\n\t\tvector.length = Math.sqrt(vector.i * vector.i + vector.j * vector.j);\n\n\t\tvector.i = vector.i / vector.length;\n\t\tvector.j = vector.j / vector.length;\n\t\tvector.length = 1;\n\n\t\tthis.backupLatLngs();\n\n\t\tthis._frame\n\t\t\t.on('drag:move', this._onMove, this)\n\t\t\t.on('drag:end', this._onEnd, this);\n\t}\n\n});\n\nL.Polyline.addInitHook(function () {\n\tthis.larva.rotate = new L.larva.handler.Polyline.Rotate(this, L.larva.frame.RECT_STYLE.ROTATE);\n});","/**\n * @requires ../frame/Rect.js\n * @requires ../frame/RECT_STYLE.js\n * @requires ../ext/L.Polyline.js\n * \n * @requires Polyline.Transform.js\n */\n\n/**\n * @class Move layer\n *\n * @extends {L.larva.handler.Polyline.Transform}\n */\nL.larva.handler.Polyline.Move = L.larva.handler.Polyline.Transform.extend(\n/** @lends L.larva.handler.Polyline.Move.prototype */\n{\n\n\taddHooks: function() {\n\t\tthis._frame = L.larva.frame.rect(this._path).addTo(this.getMap());\n\t\tthis._frame.on('drag:start', this._onStart, this);\n\n\t\tthis._previousCursor = this._frame.getComputedStyle().cursor;\n\t\tthis._frame.setElementStyle({\n\t\t\tcursor: 'move'\n\t\t});\n\t},\n\n\t/**\n\t * @param  {L.Point} original\n\t * @param  {L.Point} transformed\n\t * @param  {Number} dx\n\t * @param  {Number} dy\n\t */\n\ttransformPoint: function (original, transformed, dx, dy) {\n\t\tif (dx) {\n\t\t\ttransformed.x = original.x + dx;\n\t\t}\n\n\t\tif (dy) {\n\t\t\ttransformed.y = original.y + dy;\n\t\t}\n\t},\n\n\t_getEventWorldPoint: function(event) {\n\t\tvar bounding = this._frame.getFrameClientRect(),\n\t\t    position = this._frame.getPosition();\n\n\t\treturn L.larva.project(\n\t\t\tthis.unproject(\n\t\t\t\tevent.clientX - bounding.left + position.x,\n\t\t\t\tevent.clientY - bounding.top + position.y\n\t\t\t)\n\t\t);\n\t},\n\n\t_onEnd: function () {\n\n\t\tthis._frame\n\t\t\t.off('drag:move', this._onMove, this)\n\t\t\t.off('drag:end', this._onEnd);\n\t},\n\n\t_onMove: function (evt) {\n\n\t\tvar event = L.larva.getSourceEvent(evt);\n\t\tvar worldPoint = this._getEventWorldPoint(event);\n\n\t\tvar dx = worldPoint.x - this._startPosition.x,\n\t\t    dy = worldPoint.y - this._startPosition.y;\n\n\t\tif (event.ctrlKey && event.altKey) {\n\t\t\tvar dxy = Math.min(Math.abs(dx), Math.abs(dy));\n\n\t\t\tdx = dx >= 0 ? dxy : -dxy;\n\t\t\tdy = dy >= 0 ? dxy : -dxy;\n\t\t} else if (event.altKey) {\n\t\t\tdy = null;\n\t\t} else if (event.ctrlKey) {\n\t\t\tdx = null;\n\t\t}\n\n\t\tthis.transform(dx, dy);\n\t},\n\n\t_onStart: function (evt) {\n\t\tif (!evt.handle) {\n\t\t\tthis.backupLatLngs();\n\n\t\t\tthis._startPosition = this._getEventWorldPoint(L.larva.getSourceEvent(evt));\n\n\t\t\tthis._frame\n\t\t\t\t.on('drag:move', this._onMove, this)\n\t\t\t\t.on('drag:end', this._onEnd, this);\n\t\t}\n\n\t}\n\n});\n\nL.Polyline.addInitHook(function () {\n\tthis.larva.move = new L.larva.handler.Polyline.Move(this);\n});","/**\n * @requires ../frame/Rect.js\n * @requires ../frame/RECT_STYLE.js\n * @requires ../ext/L.Polyline.js\n * \n * @requires Polyline.Transform.js\n */\n\n/**\n * @class Resize layer\n *\n * @extends {L.larva.handler.Polyline.Transform}\n * \n */\nL.larva.handler.Polyline.Resize = L.larva.handler.Polyline.Transform.extend(\n/** @lends L.larva.handler.Polyline.Resize.prototype */\n{\n\n\taddHooks: function () {\n\t\tthis._frame = L.larva.frame.rect(this._path).addTo(this.getMap());\n\n\t\tthis._frame.setStyle(this._frameStyle);\n\n\t\tthis._frame.on('drag:start', this._onStart, this);\n\t},\n\n\t/**\n\t * @param  {L.Point} original\n\t * @param  {L.Point} transformed\n\t * @param  {Number} [xscale=null]\n\t * @param  {Number} [yscale=null]\n\t */\n\ttransformPoint: function (original, transformed, xscale, yscale) {\n\n\t\tif (xscale !== null) {\n\t\t\ttransformed.x = this._reference.point.x + xscale * (original.x - this._reference.point.x);\n\t\t}\n\n\t\tif (yscale !== null) {\n\t\t\ttransformed.y = this._reference.point.y + yscale * (original.y - this._reference.point.y);\n\t\t}\n\t},\n\n\t_onEnd: function () {\n\t\tthis._frame\n\t\t\t.off('drag:move', this._onMove, this)\n\t\t\t.off('drag:end', this._onEnd, this);\n\n\t\tdelete this._reference;\n\t},\n\n\t_onMove: function (evt) {\n\n\t\tvar event = L.larva.getSourceEvent(evt);\n\n\t\tvar xscale = null, yscale = null;\n\n\t\tif (this._reference.screenX !== undefined) {\n\t\t\txscale = (event.clientX - this._reference.screenX) / this._reference.width;\n\t\t\tif (this._reference.invertX) {\n\t\t\t\txscale = -xscale;\n\t\t\t}\n\t\t}\n\n\t\tif (this._reference.screenY !== undefined) {\n\t\t\tyscale = (event.clientY - this._reference.screenY) / this._reference.height;\n\t\t\tif (this._reference.invertY) {\n\t\t\t\tyscale = -yscale;\n\t\t\t}\n\t\t}\n\n\t\tif (xscale !== null && yscale !== null && event.ctrlKey) {\n\t\t\tvar xyscale = Math.max(Math.abs(xscale), Math.abs(yscale));\n\n\t\t\txscale = xscale >= 0 ? xyscale : -xyscale;\n\t\t\tyscale = yscale >= 0 ? xyscale : -xyscale;\n\t\t}\n\n\t\tthis.transform(xscale, yscale);\n\t},\n\n\t_onStart: function (evt) {\n\n\t\tif (!evt.handle || evt.handle === L.larva.frame.Rect.MIDDLE_MIDDLE) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar bounding = this._frame.getFrameClientRect(),\n\t\t    position = this._frame.getPosition();\n\n\t\tvar reference = this._reference = {\n\t\t\theight: bounding.height,\n\t\t\twidth: bounding.width,\n\t\t};\n\n\t\t// x\n\t\tswitch (evt.handle) {\n\t\t\tcase L.larva.frame.Rect.TOP_LEFT:\n\t\t\tcase L.larva.frame.Rect.MIDDLE_LEFT:\n\t\t\tcase L.larva.frame.Rect.BOTTOM_LEFT:\n\t\t\t\treference.screenX = bounding.right;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Rect.TOP_MIDDLE:\n\t\t\tcase L.larva.frame.Rect.BOTTOM_MIDDLE:\n\t\t\t\treference.screenX = bounding.left + reference.width / 2;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Rect.TOP_RIGHT:\n\t\t\tcase L.larva.frame.Rect.MIDDLE_RIGHT:\n\t\t\tcase L.larva.frame.Rect.BOTTOM_RIGHT:\n\t\t\t\treference.screenX = bounding.left;\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// y\n\t\tswitch (evt.handle) {\n\t\t\tcase L.larva.frame.Rect.TOP_LEFT:\n\t\t\tcase L.larva.frame.Rect.TOP_MIDDLE:\n\t\t\tcase L.larva.frame.Rect.TOP_RIGHT:\n\t\t\t\treference.screenY = bounding.bottom;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Rect.MIDDLE_LEFT:\n\t\t\tcase L.larva.frame.Rect.MIDDLE_RIGHT:\n\t\t\t\treference.screenY = bounding.top + reference.height / 2;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Rect.BOTTOM_LEFT:\n\t\t\tcase L.larva.frame.Rect.BOTTOM_MIDDLE:\n\t\t\tcase L.larva.frame.Rect.BOTTOM_RIGHT:\n\t\t\t\treference.screenY = bounding.top;\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// invertX\n\t\tswitch (evt.handle) {\n\t\t\tcase L.larva.frame.Rect.TOP_LEFT:\n\t\t\tcase L.larva.frame.Rect.MIDDLE_LEFT:\n\t\t\tcase L.larva.frame.Rect.BOTTOM_LEFT:\n\t\t\t\treference.invertX = true;\n\t\t}\n\n\t\t// invertY\n\t\tswitch (evt.handle) {\n\t\t\tcase L.larva.frame.Rect.TOP_LEFT:\n\t\t\tcase L.larva.frame.Rect.TOP_MIDDLE:\n\t\t\tcase L.larva.frame.Rect.TOP_RIGHT:\n\t\t\t\treference.invertY = true;\n\t\t}\n\n\n\t\treference.point = this.layerPointToWorldPoint(\n\t\t\treference.screenX - bounding.left + position.x,\n\t\t\treference.screenY - bounding.top + position.y\n\t\t);\n\n\t\tswitch (evt.handle) {\n\t\t\tcase L.larva.frame.Rect.TOP_MIDDLE:\n\t\t\tcase L.larva.frame.Rect.BOTTOM_MIDDLE:\n\t\t\t\tdelete reference.screenX;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Rect.MIDDLE_LEFT:\n\t\t\tcase L.larva.frame.Rect.MIDDLE_RIGHT:\n\t\t\t\tdelete reference.screenY;\n\t\t\t\tbreak;\n\t\t}\n\n\n\t\tthis.backupLatLngs();\n\n\t\tthis._frame\n\t\t\t.on('drag:move', this._onMove, this)\n\t\t\t.on('drag:end', this._onEnd, this);\n\t}\n\n});\n\nL.Polyline.addInitHook(function () {\n\tthis.larva.resize = new L.larva.handler.Polyline.Resize(this, L.larva.frame.RECT_STYLE.RESIZE);\n});","/**\n * @requires L.Polyline.js\n */\n\n/**\n * @external \"L.Polygon\"\n * @see {@link external:\"L.Polyline\" Extends L.Polyline}\n */\n\nL.extend(L.Polygon, {\n\tPOLYGON: 3,\n\tMULTIPOLYGON: 4\n});\n\nL.Polygon.include({\n\t/**\n\t * @memberOf external:\"L.Polygon\"\n\t * @instance\n\t * @returns {Number}\n\t *\n\t * Value|Type\n\t * -----|----\n\t * 3| Polygon\n\t * 4| MultiPolygon\n\t */\n\tgetType: function () {\n\t\tvar latlngs = this._latlngs;\n\n\t\tif (latlngs.length) {\n\t\t\tif (!L.larva.isFlat(latlngs[0])) {\n\t\t\t\treturn L.Polygon.MULTIPOLYGON;\n\t\t\t}\n\t\t}\n\n\t\treturn L.Polygon.POLYGON;\n\t},\n\t/**\n\t * @memberOf external:\"L.Polygon\"\n\t * @instance\n\t * @param  {Function} fn      ({L.LatLng}, {L.LatLng[]}, hole? {Boolean})\n\t * @param  {Any}   context\n\t */\n\tforEachLatLng: function (fn, context) {\n\t\tvar i=0, j, k, polygons = [], polygon, hole, latlngs = this.getLatLngs();\n\n\t\tif (L.larva.isFlat(latlngs[0])) {\n\t\t\tpolygons.push(latlngs);\n\t\t} else {\n\t\t\tpolygons = latlngs;\n\t\t}\n\n\t\tfor (; i<polygons.length; i++) {\n\t\t\tpolygon = polygons[i];\n\n\t\t\tfor (j=0; j<polygon.length; j++) {\n\t\t\t\thole = j > 0;\n\t\t\t\tfor (k=0; k<polygon[j].length; k++) {\n\t\t\t\t\tfn.call(context, polygon[j][k], polygon[j], hole);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t/**\n\t * @memberOf external:\"L.Polygon\"\n\t * @instance\n\t * @param  {Function} fn\n\t * @param  {Any}   context\n\t */\n\tforEachPolygon: function (fn, context) {\n\t\tvar latlngs = this._latlngs;\n\n\t\tswitch (this.getType()) {\n\t\t\tcase L.Polygon.POLYGON:\n\n\t\t\t\tif (context) {\n\t\t\t\t\tfn.call(context, latlngs[0], latlngs.slice(1));\n\t\t\t\t} else {\n\t\t\t\t\tfn(latlngs[0], latlngs.slice(1));\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase L.Polygon.MULTIPOLYGON:\n\n\t\t\t\tfor (var i=0, l=latlngs.length; i<l; i++) {\n\t\t\t\t\tif (context) {\n\t\t\t\t\t\tfn.call(context, latlngs[i][0], latlngs[i].slice(1));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfn(latlngs[i][0], latlngs[i].slice(1));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n});","/**\n * @class\n *\n * Style class with helper methods\n *\n * Example:\n * \n * ```js\n *\n * \tvar polygon = L.polygon(latlngs, {\n * \t\tfillOpacity: 0.5,\n * \t\tfillColor: '#ABABAB'\n * \t});\n * \n * \tvar style = L.larva.style(polygon);\n *\n * \tstyle.multiplyBy({\n * \t\tfillColor: [1, 0.5, 2],\n  * \t}).subtract({\n  * \t\tfillOpacity: 0.2\n  * \t});\n *\n * \tpolygon.setStyle(style);\n * \n * ```\n * @param {(L.Path | L.larva.Style | Object)} source\n *\n */\nL.larva.Style = L.Class.extend(\n/** @lends L.larva.Style.prototype */\n{\n\n\tstatics: {\n\n\t\tSTYLES: ['fillOpacity', 'fillColor', 'color', 'opacity'],\n\n\t\tTYPE: {\n\t\t\tfillOpacity: 'number',\n\t\t\topacity: 'number',\n\t\t\tfillColor: 'color',\n\t\t\tcolor: 'color'\n\t\t}\n\t},\n\n\tinitialize: function (source) {\n\n\t\tif (source instanceof L.Path) {\n\t\t\tsource = source.options;\n\t\t}\n\n\t\tL.larva.Style.STYLES.forEach(function (styleName) {\n\t\t\tthis[styleName] = source[styleName];\n\t\t}, this);\n\t},\n\n\t/**\n\t * @param  {Object} style\n\t * @return {L.larva.Style} this\n\t */\n\tsubtract: function (styles) {\n\t\treturn this._transform(styles, function (cV, d) {\n\t\t\treturn cV - d;\n\t\t});\n\t},\n\n\t/**\n\t * @param  {Object} style\n\t * @return {L.larva.Style} this\n\t */\n\tmultiplyBy: function(styles) {\n\t\treturn this._transform(styles, function (cV, d) {\n\t\t\treturn cV * d;\n\t\t});\n\t},\n\n\t_transform: function (styles, transfom) {\n\t\tvar styleName, currentValue, delta;\n\n\t\tfor (styleName in styles) {\n\t\t\tif (styleName in this) {\n\n\t\t\t\tcurrentValue = this[styleName];\n\t\t\t\tdelta = styles[styleName];\n\n\t\t\t\tswitch (L.larva.Style.TYPE[styleName]) {\n\t\t\t\t\tcase 'color':\n\t\t\t\t\t\tvar rgb = L.larva.Style.getRGB(currentValue);\n\t\t\t\t\t\tif (rgb) {\n\t\t\t\t\t\t\trgb[0] = transfom(rgb[0], delta[0]);\n\t\t\t\t\t\t\trgb[1] = transfom(rgb[1], delta[1]);\n\t\t\t\t\t\t\trgb[2] = transfom(rgb[2], delta[2]);\n\n\t\t\t\t\t\t\trgb = rgb.map(L.larva.Style.convertColorComponent);\n\n\t\t\t\t\t\t\tcurrentValue = '#' + rgb.join('');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'number':\n\t\t\t\t\t\tcurrentValue = transfom(currentValue, delta);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tthis[styleName] = currentValue;\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n});\n\n/**\n * @memberOf L.larva.Style\n * @param  {String} color\n * @return {Array} [r, g, b]\n */\nL.larva.Style.getRGB = function (color) {\n\n\tif (!color) {\n\t\treturn;\n\t}\n\n\tvar r,g,b;\n\n\tif (color.length === 4) {\n\t\tr = parseInt(color[1], 16);\n\t\tg = parseInt(color[2], 16);\n\t\tb = parseInt(color[3], 16);\n\t} else if (color.length === 7) {\n\t\tr = parseInt(color.substr(1, 2), 16);\n\t\tg = parseInt(color.substr(3, 2), 16);\n\t\tb = parseInt(color.substr(5, 2), 16);\n\t} else {\n\t\treturn;\n\t}\n\n\treturn [r,g,b];\n};\n\nL.larva.Style.convertColorComponent = function (component) {\n\tif (component < 0) {\n\t\tcomponent = 0;\n\t} else if (component > 255) {\n\t\tcomponent = 255;\n\t}\n\n\tcomponent = parseInt(component).toString(16);\n\n\treturn component.length === 2 ? component : '0' + component;\n};\n\nL.larva.style = function (source) {\n\treturn new L.larva.Style(source);\n};","/**\n * @requires package.js\n *\n * @requires ../ext/L.Polygon.js\n * @requires ../Style.js\n */\n\n/**\n * @class\n *\n * Frame for handle point by point editor\n * \n */\nL.larva.frame.Vertices = L.Layer.extend(\n/** @lends L.larva.frame.Vertices.prototype */\n{\n\toptions: {\n\t\tcolorFactor: [0.8, 1.3, 0.8],\n\t\thandleClassName: 'llarva-vertex',\n\t\topacityFactor: 0.8,\n\t\tpane: 'llarva-frame',\n\t\ttolerance: 10,\n\t\tsimplifyZoom: -1\n\t},\n\n\tinitialize: function (path) {\n\t\tthis._path = path;\n\t},\n\n\tbeforeAdd: function (map) {\n\t\tif (!map.getPane(this.options.pane)) {\n\t\t\tmap.createPane(this.options.pane);\n\t\t}\n\t},\n\n\tgetEvents: function () {\n\t\treturn {\n\t\t\tmoveend: this._updateView,\n\t\t\tzoomend: this._onZoomEnd\n\t\t};\n\t},\n\n\t/**\n\t * Returns handle L.LatLng\n\t * @param  {String}  handleId\n\t * @return {L.LatLng}\n\t */\n\tgetLatLng: function (handleId) {\n\t\tif (this._handles && this._handles[handleId]) {\n\t\t\treturn this._handles[handleId]._latlng;\n\t\t}\n\t},\n\t/**\n\t * @return {Number}\n\t *\n\t * @see {@link external:\"L.Polygon\" L.Polygon}\n\t */\n\tgetPathType: function () {\n\t\treturn this._path.getType();\n\t},\n\n\t/**\n\t * Returns handle layer point\n\t * @param  {String} handleId\n\t * @return {L.Point}\n\t */\n\tgetPoint: function (handleId) {\n\t\tif (this._handles && this._handles[handleId]) {\n\t\t\treturn this._handles[handleId]._point;\n\t\t}\n\t},\n\n\tonAdd: function () {\n\t\tthis._container = this.getPane();\n\t\tthis._updateHandles();\n\t\tthis._updateView();\n\t},\n\n\tonRemove: function () {\n\t\tvar id, handle;\n\n\t\tif (this._handles) {\n\n\t\t\tfor (id in this._handles) {\n\t\t\t\thandle = this._handles[id];\n\n\t\t\t\tif (handle.offsetParent) {\n\t\t\t\t\tL.DomUtil.remove(handle);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdelete this._handles;\n\t\t}\n\n\t\tfor (id in L.Draggable.MOVE) {\n\t\t\tL.DomEvent\n\t\t\t\t.off(document, L.Draggable.MOVE[id], this._onMove, this)\n\t\t\t\t.off(document, L.Draggable.END[id], this._onEnd, this);\n\t\t}\n\t},\n\n\t/**\n\t * @param  {String} handleId\n\t */\n\tremoveHandle: function (handleId) {\n\t\tif (this._handles && this._handles[handleId]) {\n\t\t\tvar handle = this._handles[handleId];\n\n\t\t\tL.Draggable.START.forEach(function (evtName) {\n\t\t\t\tL.DomEvent.off(handle, evtName, this._onStart, this);\n\t\t\t}, this);\n\n\t\t\tL.DomEvent.off(handle, 'dblclick', this._onHandleDblclick, this);\n\n\t\t\tif (handle.offsetParent) {\n\t\t\t\tL.DomUtil.remove(handle);\n\t\t\t}\n\n\t\t\tvar prev = handle._prev, next = handle._next;\n\n\t\t\tif (prev && next) {\n\n\t\t\t\tprev._next = next;\n\t\t\t\tnext._prev = prev;\n\n\t\t\t} else if (prev !== next) {\n\t\t\t\tif (prev) {\n\t\t\t\t\t// handle is last\n\t\t\t\t\tdelete prev._next;\n\n\t\t\t\t\tif (handle._isPolygon) {\n\t\t\t\t\t\tprev._first._last = prev;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// handle is first\n\t\t\t\t\tdelete next._prev;\n\n\t\t\t\t\tif (handle._isPolygon) {\n\t\t\t\t\t\tvar first = next;\n\t\t\t\t\t\tdo  {\n\t\t\t\t\t\t\tnext._first = first;\n\t\t\t\t\t\t} while ((next = next._next));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var i=0, index; i<this._lines.length; i++) {\n\t\t\t\tif ((index = this._lines[i].handles.indexOf(handle)) >= 0) {\n\t\t\t\t\tthis._lines[i].handles.splice(index, 1);\n\t\t\t\t\tif (this._lines[i].handles.length === 0) {\n\t\t\t\t\t\tthis._lines.splice(i, 1);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdelete this._handles[handleId];\n\n\t\t\tif (this._aura && this._aura[handleId]) {\n\t\t\t\tthis._map.removeLayer(this._aura[handleId].polyline);\n\t\t\t\tdelete this._aura[handleId];\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * @param  {String} handleId\n\t * @returns {Boolean} Does the aura was created?\n\t */\n\tstartAura: function (handleId) {\n\t\tvar handle = this._handles[handleId];\n\n\t\tif (!handle) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!this._aura) {\n\t\t\tthis._aura = {};\n\t\t}\n\n\t\tif (!this._aura[handleId]) {\n\n\t\t\tvar polyline;\n\n\t\t\tvar latlngs = [],\n\t\t\t    latlng = handle._latlng.clone(),\n\t\t\t    style = L.larva.style(this._path).multiplyBy({\n\t\t\t    \tcolor: this.options.colorFactor,\n\t\t\t    \topacity: this.options.opacityFactor\n\t\t\t    }),\n\t\t\t    latlng0;\n\n\t\t\tif (handle._isPolygon) {\n\n\t\t\t\tif (handle._prev) {\n\t\t\t\t\tlatlng0 = handle._prev._latlng;\n\t\t\t\t} else {\n\t\t\t\t\tlatlng0 = handle._last._latlng;\n\t\t\t\t}\n\n\t\t\t\tlatlngs.push(latlng0.clone());\n\n\t\t\t\tlatlngs.push(latlng);\n\n\t\t\t\tif (handle._next) {\n\t\t\t\t\tlatlng0 = handle._next._latlng;\n\t\t\t\t} else {\n\t\t\t\t\tlatlng0 = handle._first._latlng;\n\t\t\t\t}\n\n\t\t\t\tlatlngs.push(latlng0.clone());\n\n\t\t\t} else {\n\n\t\t\t\tif (handle._prev) {\n\t\t\t\t\tlatlngs.push(handle._prev._latlng.clone());\n\t\t\t\t}\n\n\t\t\t\tlatlngs.push(latlng);\n\n\t\t\t\tif (handle._next) {\n\t\t\t\t\tlatlngs.push(handle._next._latlng.clone());\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tpolyline = L.polyline(latlngs, L.extend({}, style, {\n\t\t\t\tnoClip: true\n\t\t\t})).addTo(this._map);\n\n\t\t\tthis._aura[handleId] = {\n\t\t\t\tisPolygon: !!handle._isPolygon,\n\t\t\t\tpoint: handle._point.clone(),\n\t\t\t\tpolyline: polyline,\n\t\t\t\tlatlng: latlng,\n\t\t\t\tx: this._position.x,\n\t\t\t\ty: this._position.y\n\t\t\t};\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t/**\n\t * \n\t */\n\tredraw: function () {\n\t\tthis._updateHandles();\n\t\tthis._updateView();\n\t\treturn this;\n\t},\n\n\t/**\n\t * @param  {String} handleId\n\t *\n\t * @returns {L.LatLng} Aura's L.LatLng\n\t */\n\tstopAura: function (handleId) {\n\t\tvar aura, handle;\n\t\tif (this._aura && (aura = this._aura[handleId])) {\n\t\t\tthis._map.removeLayer(this._aura[handleId].polyline);\n\t\t\tdelete this._aura[handleId];\n\n\t\t\thandle = this._handles[handleId];\n\t\t\thandle._point = this._map.latLngToLayerPoint(aura.latlng);\n\t\t\treturn aura.latlng;\n\t\t}\n\t},\n\n\t/**\n\t * @param  {String} handleId\n\t */\n\tupdateHandle: function (handleId) {\n\t\tvar handle = this._handles[handleId];\n\t\tif (handle) {\n\t\t\tdelete handle._point;\n\t\t\tthis._updateHandlePosition(handle);\n\t\t}\n\t},\n\n\t_createHandles: function (latlngs, isPolygon, isHole) {\n\n\t\tvar i, handle, prev, handles = [], first;\n\n\t\tfor (i=0; i<latlngs.length; i++) {\n\t\t\thandle = L.DomUtil.create('div', this.options.handleClassName);\n\n\t\t\tif (isPolygon) {\n\t\t\t\thandle._isPolygon = true;\n\t\t\t}\n\n\t\t\tif (isHole) {\n\t\t\t\thandle._isHole = true;\n\t\t\t}\n\n\t\t\thandle._latlng = latlngs[i];\n\t\t\thandle._latlng._handle = handle;\n\t\t\thandle._latlngs = latlngs;\n\t\t\thandle._point = this._map.latLngToLayerPoint(handle._latlng);\n\n\t\t\tL.DomEvent\n\t\t\t\t.on(handle, L.Draggable.START.join(' '), this._onStart, this)\n\t\t\t\t.on(handle, 'dblclick', this._onHandleDblclick, this);\n\n\t\t\tthis._handles[L.stamp(handle)] = handle;\n\n\t\t\tif (prev) {\n\t\t\t\tprev._next = handle;\n\t\t\t\thandle._prev = prev;\n\t\t\t\tprev = handle;\n\n\t\t\t\tif (isPolygon && first) {\n\t\t\t\t\thandle._first = first;\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tfirst = handle;\n\t\t\t\tprev = handle;\n\t\t\t\thandle._first = handle;\n\t\t\t}\n\n\t\t\thandles.push(handle);\n\t\t}\n\n\t\tif (isPolygon && first) {\n\t\t\tfirst._last = handle;\n\t\t}\n\n\t\tthis._lines.push({\n\t\t\thandles: handles,\n\t\t\tisHole: !!isHole,\n\t\t\tisPolygon: !!isPolygon\n\t\t});\n\n\t\treturn handles;\n\t},\n\n\t_onHandleDblclick: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\n\t\tthis.fire('handle:dblclick', {\n\t\t\tid: L.stamp(evt.target),\n\t\t\toriginalEvent: evt\n\t\t});\n\t},\n\n\t_onEnd: function (evt) {\n\t\tvar id, aura;\n\n\t\tL.DomEvent.stop(evt);\n\n\t\tfor (id in L.Draggable.MOVE) {\n\t\t\tL.DomEvent\n\t\t\t\t.off(document, L.Draggable.MOVE[id], this._onMove, this)\n\t\t\t\t.off(document, L.Draggable.END[id], this._onEnd, this);\n\t\t}\n\n\t\tL.DomUtil.removeClass(document.body, 'leaflet-dragging');\n\n\t\ttry {\n\t\t\tfor (id in this._aura) {\n\t\t\t\taura = this._aura[id];\n\t\t\t\tdelete this._aura[id];\n\n\t\t\t\tthis._map.removeLayer(aura.polyline);\n\n\t\t\t\tthis.fire('aura:end', {\n\t\t\t\t\tid: id,\n\t\t\t\t\tlatlng: aura.latlng\n\t\t\t\t});\n\t\t\t}\n\t\t} finally {\n\t\t\tthis.fire('handle:end', {\n\t\t\t\tsourceEvent: evt\n\t\t\t});\n\t\t}\n\t},\n\n\t_onMove: function (evt) {\n\t\tvar aura, handle, id, dx, dy, newPoint, newLatLng;\n\n\t\tL.DomEvent.stop(evt);\n\n\t\tthis._position.x = evt.clientX;\n\t\tthis._position.y = evt.clientY;\n\n\t\tfor (id in this._aura) {\n\t\t\taura = this._aura[id];\n\t\t\thandle = this._handles[id];\n\n\t\t\tdx = this._position.x - aura.x;\n\t\t\tdy = this._position.y - aura.y;\n\n\t\t\tnewPoint = aura.point.add(L.point(dx, dy));\n\t\t\tnewLatLng = this._map.layerPointToLatLng(newPoint);\n\t\t\taura.latlng.lat = newLatLng.lat;\n\t\t\taura.latlng.lng = newLatLng.lng;\n\n\t\t\taura.polyline.updateBounds();\n\t\t\taura.polyline.redraw();\n\n\t\t\tthis._updateHandlePosition(handle, newPoint);\n\t\t}\n\n\t\tthis.fire('handle:move', {\n\t\t\tsourceEvent: evt\n\t\t});\n\t},\n\n\t_onStart: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\t\tvar sourceEvent = L.larva.getSourceEvent(evt);\n\n\t\tthis._position = {\n\t\t\tx: sourceEvent.clientX, y: sourceEvent.clientY\n\t\t};\n\n\t\tthis.fire('handle:start', {\n\t\t\tid: L.stamp(evt.target),\n\t\t\tsourceEvent: evt\n\t\t});\n\n\n\t\tL.DomEvent\n\t\t\t.on(document, L.Draggable.MOVE[evt.type], this._onMove, this)\n\t\t\t.on(document, L.Draggable.END[evt.type], this._onEnd, this);\n\n\t\tL.DomUtil.addClass(document.body, 'leaflet-dragging');\n\t},\n\n\t_onZoomEnd: function () {\n\n\t\tvar id, handle;\n\n\t\tfor (id in this._handles) {\n\t\t\thandle = this._handles[id];\n\t\t\thandle._point = this._map.latLngToLayerPoint(handle._latlng);\n\t\t}\n\t},\n\n\t_updateHandles: function () {\n\t\tvar id, handle;\n\n\t\tif (this._handles) {\n\t\t\tfor (id in this._handles) {\n\t\t\t\thandle = this._handles[id];\n\n\t\t\t\tL.DomUtil.remove(handle);\n\t\t\t}\n\t\t}\n\n\t\tthis._handles = {};\n\t\tthis._lines = [];\n\n\t\tswitch (this.getPathType()) {\n\t\t\tcase L.Polyline.POLYLINE:\n\t\t\tcase L.Polyline.MULTIPOLYLINE:\n\n\t\t\t\tthis._path.forEachLine(function (line) {\n\t\t\t\t\tthis._createHandles(line);\n\t\t\t\t}, this);\n\n\t\t\t\tbreak;\n\n\t\t\tcase L.Polygon.POLYGON:\n\t\t\tcase L.Polygon.MULTIPOLYGON:\n\n\t\t\t\tthis._path.forEachPolygon(function (shell, holes) {\n\n\t\t\t\t\tthis._createHandles(shell, true);\n\n\t\t\t\t\tholes.forEach(function (latlngs) {\n\t\t\t\t\t\tthis._createHandles(latlngs, true, true);\n\t\t\t\t\t}, this);\n\n\t\t\t\t}, this);\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Invalid geometry type - ' + this.getPathType());\n\t\t}\n\t},\n\n\t_updateHandlePosition: function (handle, target) {\n\t\tvar point;\n\n\t\tif (target) {\n\t\t\tpoint = target.clone();\n\t\t} else if (handle._point) {\n\t\t\tpoint = handle._point.clone();\n\t\t} else {\n\t\t\thandle._point = this._map.latLngToLayerPoint(handle._latlng);\n\t\t\tpoint = handle._point.clone();\n\t\t}\n\n\t\tif (handle.offsetParent) {\n\t\t\tpoint._subtract({\n\t\t\t\tx: L.larva.getWidth(handle) / 2,\n\t\t\t\ty: L.larva.getHeight(handle) / 2\n\t\t\t});\n\t\t}\n\n\t\tL.DomUtil.setPosition(handle, point);\n\t},\n\n\t_showHandles: function (handles, isPolygon) {\n\t\tvar pointsToShow;\n\n\t\tvar bounds = this._map.getPixelBounds(),\n\t\t    pixelOrigin = this._map.getPixelOrigin();\n\n\t\tvar points = handles.map(function (handle) {\n\t\t\tvar point = handle._point.add(pixelOrigin);\n\t\t\tpoint._handle = handle;\n\t\t\treturn point;\n\t\t});\n\n\t\tif (isPolygon) {\n\n\t\t\tpointsToShow = L.PolyUtil.clipPolygon(points, bounds).filter(function (point) {\n\t\t\t\treturn !!point._handle;\n\t\t\t});\n\n\t\t} else {\n\n\t\t\tvar i,l, lineClip;\n\n\t\t\tpointsToShow = [];\n\n\t\t\tfor (i=0, l = points.length - 1; i<l; i++) {\n\t\t\t\tlineClip = L.LineUtil.clipSegment(points[i], points[i + 1], bounds);\n\t\t\t\tif (lineClip) {\n\t\t\t\t\tif (lineClip[0]._handle) {\n\t\t\t\t\t\tpointsToShow.push(lineClip[0]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (lineClip[1]._handle) {\n\t\t\t\t\t\tpointsToShow.push(lineClip[1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar doSimplify = false;\n\n\t\tif (this.options.simplifyZoom > 0) {\n\n\t\t\tdoSimplify = this._map.getZoom() < this.options.simplifyZoom;\n\n\t\t} else if (this.options.simplifyZoom < 0) {\n\n\t\t\tdoSimplify = this._map.getZoom() < (this._map.getMaxZoom() + this.options.simplifyZoom);\n\n\t\t}\n\n\t\tif (doSimplify) {\n\t\t\tpointsToShow = L.LineUtil.simplify(pointsToShow, this.options.tolerance);\n\t\t}\n\n\t\tpointsToShow.forEach(function (point) {\n\n\t\t\tif (!point.offsetParent) {\n\t\t\t\tthis._container.appendChild(point._handle);\n\t\t\t}\n\n\t\t\tthis._updateHandlePosition(point._handle);\n\t\t}, this);\n\t},\n\n\t_updateView: function () {\n\t\tvar id, handle;\n\n\t\tfor (id in this._handles) {\n\t\t\thandle = this._handles[id];\n\n\t\t\tif (handle.offsetParent) {\n\t\t\t\tL.DomUtil.remove(handle);\n\t\t\t}\n\t\t}\n\n\t\tthis._lines.forEach(function (line) {\n\t\t\tthis._showHandles(line.handles, line.isPolygon, line.isHole);\n\t\t}, this);\n\t}\n});\n\n/**\n * @param  {L.Path} path\n * @memberOf L.larva.frame\n * @return {L.larva.frame.Vertices}\n */\nL.larva.frame.vertices = function (path) {\n\tif (path._verticesFrame) {\n\t\treturn path._verticesFrame;\n\t}\n\n\treturn (path._verticesFrame = new L.larva.frame.Vertices(path));\n};","/**\n * @requires Polyline.js\n * @requires ../frame/Vertices.js\n */\n\n/**\n * @class Hand point by point of a layer\n *\n * @extends {L.larva.handler.Polyline}\n */\nL.larva.handler.Polyline.Edit = L.larva.handler.Polyline.extend(\n/** @lends L.larva.handler.Polyline.prototype */\n{\n\n\toptions: {\n\t\taura: true,\n\t\tmaxDist: 10\n\t},\n\n\taddHooks: function () {\n\t\tthis._frame = L.larva.frame.vertices(this._path).addTo(this.getMap());\n\n\t\tthis._frame\n\t\t\t.on('handle:start', this._onHandleStart, this)\n\t\t\t.on('handle:dblclick', this._onHandleDbclick, this);\n\n\t\tthis._path.on('dblclick', this._onDblclick, this);\n\t},\n\n\tremoveHooks: function () {\n\t\tthis.getMap().removeLayer(this._frame);\n\t\tthis._frame\n\t\t\t.off('handle:start', this._onHandleStart, this)\n\t\t\t.off('dblclick', this._onDblclick, this);\n\t},\n\n\t_searchNearestPoint: function (point) {\n\t\tvar found = [], map = this.getMap();\n\n\t\tthis._path.forEachLine(function (latlngs) {\n\t\t\tfound = found.concat(L.larva.handler.Polyline.Edit.searchNearestPointIn(point, this.options.maxDist, latlngs, map));\n\t\t}, this);\n\n\t\treturn found;\n\t},\n\n\t_addVertex: function (point) {\n\t\tvar founds, found, newLatLng;\n\n\t\tfounds = this._searchNearestPoint(point);\n\n\t\tif (founds.length) {\n\t\t\tif (founds.length === 1) {\n\t\t\t\tfound = founds[0];\n\t\t\t\tnewLatLng = this.getMap().layerPointToLatLng(found.point);\n\n\t\t\t\tfound.latlngs.splice(found.index, 0, newLatLng);\n\n\t\t\t\tthis._path.updateBounds();\n\t\t\t\tthis._path.redraw();\n\t\t\t\tthis._frame.redraw();\n\t\t\t}\n\t\t}\n\t},\n\n\t_removeLatLng: function (handleId) {\n\t\tvar latlng = this._frame.getLatLng(handleId),\n\t\t    latlngs = this._path.getLatLngs(),\n\t\t    index, i = 0;\n\n\t\tswitch (this._path.getType()) {\n\t\t\tcase L.Polyline.MULTIPOLYLINE:\n\n\t\t\t\tfor (; i<latlngs[i].length; i++) {\n\t\t\t\t\tif ((index = latlngs[i].indexOf(latlng)) !== -1) {\n\n\t\t\t\t\t\tif (latlngs[i].length <= 2) {\n\t\t\t\t\t\t\tlatlngs.splice(i, 1);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlatlngs[i].splice(index, 1);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tif ((index = latlngs.indexOf(latlng)) !== -1) {\n\t\t\t\t\tlatlngs.splice(index, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t}\n\n\t\tthis._path.updateBounds();\n\t\tthis._path.redraw();\n\n\t\tthis._frame.removeHandle(handleId);\n\t},\n\n\t_onAuraEnd: function (evt) {\n\t\tthis._frame.off('aura:end', this._onAuraEnd, this);\n\t\tvar latlng = this._frame.getLatLng(evt.id);\n\n\t\tlatlng.lat = evt.latlng.lat;\n\t\tlatlng.lng = evt.latlng.lng;\n\n\t\tthis._path.updateBounds();\n\t\tthis._path.redraw();\n\t\tthis._frame.updateHandle(evt.id);\n\t},\n\n\t_onDblclick: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\t\tthis._addVertex(this.getMap().mouseEventToLayerPoint(evt.originalEvent));\n\t},\n\n\t_onHandleDbclick: function (evt) {\n\t\tvar originalEvent = evt.originalEvent;\n\n\t\tif (originalEvent.shiftKey) {\n\t\t\tthis._removeLatLng(evt.id);\n\t\t}\n\t},\n\n\t_onHandleEnd: function () {\n\t\tthis._frame\n\t\t\t.off('handle:move', this._onHandleMove, this)\n\t\t\t.off('handle:end', this._onHandleEnd, this);\n\t},\n\n\t_onHandleMove: function (evt) {\n\t\tvar sourceEvent = L.larva.getSourceEvent(evt);\n\n\t\tvar dx = sourceEvent.clientX - this._origin.x,\n\t\t    dy = sourceEvent.clientY - this._origin.y;\n\n\t\tvar newPoint = this._originalPoint.add(L.point(dx, dy));\n\n\t\tvar latlng = this._frame.getLatLng(this._handleId),\n\t\t\t newLatLng = this.getMap().layerPointToLatLng(newPoint);\n\n\t\tlatlng.lat = newLatLng.lat;\n\t\tlatlng.lng = newLatLng.lng;\n\n\t\tthis._path.updateBounds();\n\t\tthis._path.redraw();\n\t\tthis._frame.updateHandle(this._handleId);\n\t},\n\n\t_onHandleStart: function (evt) {\n\t\tvar sourceEvent;\n\n\t\tthis._handleId = evt.id;\n\n\t\tif (this.options.aura) {\n\t\t\tthis._frame.startAura(evt.id);\n\t\t\tthis._frame.on('aura:end', this._onAuraEnd, this);\n\t\t} else {\n\t\t\tsourceEvent = L.larva.getSourceEvent(evt);\n\t\t\tthis._origin = {\n\t\t\t\tx: sourceEvent.clientX, y: sourceEvent.clientY\n\t\t\t};\n\t\t\tthis._originalPoint = this._frame.getPoint(evt.id).clone();\n\t\t\tthis._frame\n\t\t\t\t.on('handle:move', this._onHandleMove, this)\n\t\t\t\t.on('handle:end', this._onHandleEnd, this);\n\t\t}\n\t}\n\n});\n\n/**\n * @memberOf L.larva.handler.Polyline.Edit\n * @param  {L.Point} point\n * @param  {Number} maxDist\n * @param  {LatLng[]} latlngs\n * @param  {L.Map} map\n * @param  {Boolean} closed\n * @return {Object[]}\n */\nL.larva.handler.Polyline.Edit.searchNearestPointIn = function (point, maxDist, latlngs, map, closed) {\n\tvar found = [],\n\t    aPoint, bPoint,\n\t    i, index, l, dist;\n\n\tif (closed) {\n\t\tl = latlngs.length;\n\t} else {\n\t\tl = latlngs.length - 1;\n\t}\n\n\tfor (i = 0; i < l; i++) {\n\n\t\tindex = (i + 1) % latlngs.length;\n\n\t\taPoint = map.latLngToLayerPoint(latlngs[i]);\n\t\tbPoint = map.latLngToLayerPoint(latlngs[index]);\n\n\t\tdist = L.LineUtil.pointToSegmentDistance(point, aPoint, bPoint);\n\n\t\tif (dist <= maxDist) {\n\t\t\tfound.push({\n\t\t\t\tpoint: L.LineUtil.closestPointOnSegment(point, aPoint, bPoint),\n\t\t\t\tindex: index,\n\t\t\t\tlatlngs: latlngs\n\t\t\t});\n\t\t}\n\t}\n\n\treturn found;\n\n};","/**\n * @requires Path.js\n */\n\n/**\n * @class Polygon handler\n *\n * @extends L.larva.handler.Path\n */\nL.larva.handler.Polygon = L.larva.handler.Path.extend({\n\n});","/**\n * @namespace\n */\nL.larva.Util = {\n\n\t/**\n\t * @see {@link https://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html#The%20C%20Code Reference}\n\t *\n\t * @param {L.Point} point\n\t * @param {L.Point[]} points\n\t *\n\t * @returns {Boolean} Point inside points?\n\t */\n\tpointIsInside: function (point, points) {\n\t\tvar i, j, isInside = false;\n\n\t\tfor (i=0, j = points.length - 1; i < points.length; j = i++) {\n\t\t\tif ( ((points[i].y > point.y) !== (points[j].y > point.y)) &&\n\t\t\t\t (point.x < (points[j].x - points[i].x) * (point.y - points[i].y) / (points[j].y - points[i].y) + points[i].x)) {\n\t\t\t\tisInside = !isInside;\n\t\t\t}\n\t\t}\n\n\t\treturn isInside;\n\t}\n\n};","/**\n * @requires package.js\n */\n\n/**\n * @class Base type to creators\n * @param {L.Map} map\n * @param {Object} options\n * \n * @extends L.Handler\n * @mixes L.Evented\n */\nL.larva.handler.New = L.Handler.extend(\n/** @lends L.larva.handler.New.prototype */\n{\n\tincludes: [L.Evented.prototype],\n\n\toptions: {\n\t\tallowFireOnMap: true\n\t},\n\n\tinitialize: function (map, options) {\n\t\tL.Handler.prototype.initialize.call(this, map);\n\n\t\tif (options) {\n\t\t\tL.setOptions(this, options);\n\t\t}\n\t},\n\n\t/**\n\t * Fire an event on map\n\t * @param  {String} eventName\n\t * @param  {Object} eventObject\n\t */\n\tfireOnMap: function (eventName, eventObject) {\n\t\tif (this.options.allowFireOnMap) {\n\t\t\tthis._map.fire(eventName, eventObject);\n\t\t}\n\t},\n\n\t/**\n\t * Project a (lat, lng) to a layer point\n\t * @param  {number} lat\n\t * @param  {number} lng\n\t * @return {L.Point}\n\t */\n\tproject: function (a, b) {\n\t\tif (b !== undefined) {\n\t\t\treturn this._map.latLngToLayerPoint(L.latLng(a, b));\n\t\t} else {\n\t\t\treturn this._map.latLngToLayerPoint(a);\n\t\t}\n\t}\n\n});","if (!L.LatLngBounds.prototype.clone) {\n\n\tL.LatLngBounds.prototype.clone = function () {\n\t\treturn L.latLngBounds(this.getSouthWest().clone(), this.getNorthEast().clone());\n\t};\n\n}","/**\n * @class\n *\n * @param {L.Map} map\n */\nL.larva.UndoRedo = L.Class.extend(\n/** @lends L.larva.UndoRedo.prototype */\n{\n\n\toptions: {\n\t\tlimit: 10\n\t},\n\n\tstatics: {\n\t\tREDO: 1,\n\t\tUNDO: 2\n\t},\n\n\tinitialize: function (map, options) {\n\t\tthis._map = map;\n\t\tmap.on('lundo:do', this._onDo, this);\n\n\t\tL.setOptions(this, options);\n\t\tthis._bottom = null;\n\t\tthis._current = null;\n\t\tthis._top = null;\n\t\tthis._total = 0;\n\t\tthis._state = null;\n\t},\n\n\t/**\n\t */\n\tundo: function () {\n\t\tvar current = this._current || (this._state === L.larva.UndoRedo.REDO ? this._top : null);\n\n\t\tif (current) {\n\t\t\ttry {\n\t\t\t\tcurrent.unapply();\n\t\t\t} finally {\n\t\t\t\tthis._current = current.prev;\n\t\t\t\tthis._state = L.larva.UndoRedo.UNDO;\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t */\n\tredo: function () {\n\t\tvar current = this._current || (this._state === L.larva.UndoRedo.UNDO ? this._bottom : null);\n\n\t\tif (current) {\n\t\t\ttry {\n\t\t\t\tcurrent.apply();\n\t\t\t} finally {\n\t\t\t\tthis._current = current.next;\n\t\t\t\tthis._state = L.larva.UndoRedo.REDO;\n\t\t\t}\n\t\t}\n\t},\n\n\t_onDo: function (evt) {\n\t\ttry {\n\t\t\tevt.command.apply();\n\t\t} finally  {\n\t\t\tthis._push(evt.command);\n\t\t\tthis._state = L.larva.UndoRedo.REDO;\n\t\t}\n\t},\n\n\t_pop: function () {\n\t\tvar newBottom = this._bottom.next;\n\t\tdelete newBottom.prev;\n\t\tdelete this._bottom.next;\n\t\tthis._bottom = newBottom;\n\t},\n\n\t_push: function (command) {\n\t\tvar prev, next;\n\n\t\tif (this._total) {\n\n\t\t\tif (this._current) {\n\t\t\t\tcommand.prev = this._current;\n\n\t\t\t\tif (this._current === this._top) {\n\t\t\t\t\tthis._top.next = command;\n\t\t\t\t\tthis._top = this._current = command;\n\n\t\t\t\t\t// here + command\n\n\t\t\t\t\tif (this._total === this.options.limit) {\n\t\t\t\t\t\tthis._pop();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._total++;\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnext = this._current.next;\n\t\t\t\t\twhile (next) {\n\t\t\t\t\t\tdelete next.prev;\n\t\t\t\t\t\tprev = next;\n\t\t\t\t\t\tnext = next.next;\n\t\t\t\t\t\tdelete prev.next;\n\t\t\t\t\t\tthis._total--;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._current.next = command;\n\t\t\t\t\tthis._top = this._current = command;\n\t\t\t\t\tthis._total++;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\tif (this._state === L.larva.UndoRedo.UNDO) {\n\t\t\t\t\t// current before last\n\t\t\t\t\tprev = this._top;\n\t\t\t\t\twhile (prev) {\n\t\t\t\t\t\tdelete prev.next;\n\t\t\t\t\t\tnext = prev;\n\t\t\t\t\t\tprev = prev.prev;\n\t\t\t\t\t\tdelete next.prev;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._top = this._bottom = this._current = command;\n\t\t\t\t\tthis._total = 1;\n\n\t\t\t\t} else {\n\t\t\t\t\tcommand.prev = this._top;\n\t\t\t\t\tthis._top.next = command;\n\t\t\t\t\tthis._top = this._current = command;\n\n\t\t\t\t\tif (this._total === this.options.limit) {\n\t\t\t\t\t\tthis._pop();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._total++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t} else {\n\t\t\tthis._top = this._current = this._bottom = command;\n\t\t\tthis._total = 1;\n\t\t}\n\t}\n});\n\n\n(function () {\n\n\tvar Mixin = {\n\t\tredo: function () {\n\t\t\tthis.undoRedo.redo();\n\t\t},\n\n\t\tundo: function () {\n\t\t\tthis.undoRedo.undo();\n\t\t}\n\t};\n\n\tL.Map.addInitHook(function () {\n\n\t\tif (this.options.allowUndo) {\n\t\t\tthis.larva.undoRedo = new L.larva.UndoRedo(this, this.options.undoOptions);\n\t\t\tL.extend(this.larva, Mixin);\n\t\t}\n\n\t});\n\n})();\n","/**\n * @class\n *\n * @param {L.larva.Undoable} undoable\n * @param {String} desc\n * @param {Function} doFn\n * @param {Function} undoFn\n */\nL.larva.Command = L.Class.extend(\n/** @lends L.larva.Command.prototype */\n{\n\n\tstatics: {\n\t\tAPPLY: 1,\n\t\tUNAPPLY: 2\n\t},\n\n\t/**\n\t * @type {L.larva.Command}\n\t */\n\tnext: null,\n\t/**\n\t * @type {L.larva.Command}\n\t */\n\tprev: null,\n\n\tinitialize: function (undoable, desc, doFn, undoFn, args) {\n\t\tthis._undoable = undoable;\n\t\tthis._desc = desc;\n\t\tthis._doFn = doFn;\n\t\tthis._undoFn = undoFn;\n\t\tthis._args = args;\n\t},\n\n\tapply: function () {\n\t\tif (!this._nextState || (this._nextState === L.larva.Command.APPLY)) {\n\t\t\ttry {\n\t\t\t\tthis._doFn.apply(this._undoable, this._args);\n\t\t\t} finally {\n\t\t\t\tthis._nextState = L.larva.Command.UNAPPLY;\n\t\t\t}\n\t\t}\n\t},\n\n\tunapply: function () {\n\t\tif (!this._nextState || (this._nextState === L.larva.Command.UNAPPLY)) {\n\t\t\ttry {\n\t\t\t\t\tthis._undoFn.apply(this._undoable, this._args);\n\t\t\t} finally {\n\t\t\t\tthis._nextState = L.larva.Command.APPLY;\n\t\t\t}\n\t\t}\n\t},\n\t/**\n\t * @return {Number}\n\t */\n\tnextState: function () {\n\t\treturn this._nextState;\n\t}\n\n});\n\n/**\n * @param  {L.larva.Undoable} undoable\n * @param  {Function} doFn\n * @param  {Function} undoFn\n * @param  {Any[]} args\n * @return {L.larva.Command}\n */\nL.larva.command = function (undoable, desc, doFn, undoFn, args) {\n\treturn new L.larva.Command(undoable, desc, doFn, undoFn, args);\n};","/**\n * @requires UndoRedo.js\n * @requires Command.js\n */\n\n/**\n * @mixin\n */\nL.larva.Undoable = {\n\n\t_do: function (desc, doFn, undoFn) {\n\t\tvar args = Array.prototype.slice.call(arguments, 3);\n\t\tvar map = this.getMap();\n\n\t\tif (map.options.allowUndo) {\n\t\t\tmap.fire('lundo:do', {\n\t\t\t\tcommand: L.larva.command(this, desc, doFn, undoFn, args)\n\t\t\t});\n\t\t} else {\n\t\t\tdoFn.apply(this, args);\n\t\t}\n\t}\n\n};","/**\n * @namespace\n */\nL.larva.l10n = {\n\tnewPolylinePushLatLng: 'Push latitude/longitude'\n};","/**\n * @requires New.js\n * @requires ../ext/L.LatLngBounds.js\n * @requires ../Undoable.js\n * @requires ../l10n.js\n */\n\n/**\n * @class Polyline creator\n * @extends L.larva.handler.New\n */\nL.larva.handler.New.Polyline = L.larva.handler.New.extend(\n/** @lends L.larva.handler.New.Polyline.prototype */\n{\n\n\tincludes: [L.larva.Undoable],\n\n\toptions: {\n\n\t\tallowFireOnMap: true,\n\n\t\tmaxDragCount: 5,\n\n\t\tminSqrDistance: 100,\n\n\t\thandleStyle: {\n\t\t\tborder: '1px solid #0f0',\n\t\t\tcursor: 'crosshair',\n\t\t\theight: '20px',\n\t\t\tposition: 'absolute',\n\t\t\twidth: '20px'\n\t\t},\n\n\t\tlayerOptions: {\n\n\t\t},\n\n\t\t// Snap here?\n\t\tonMove: L.larva.NOP,\n\n\t\tthreshold: 1\n\t},\n\n\t/**\n\t * Invoke after enable\n\t * @param {L.LatLng} latlng\n\t */\n\taddLatLng: function (latlng) {\n\t\tthis._toAddLatLng = latlng.clone();\n\t\tthis._pushLatLng();\n\t},\n\n\taddHooks: function() {\n\n\t\tthis._latlngs = [];\n\n\t\tthis._pane = this._map.getPane('popupPane');\n\n\t\tvar handle = this._handle = L.DomUtil.create('div', 'llarva-new-vertex-handle', this._pane);\n\t\tL.extend(handle.style, this.options.handleStyle);\n\n\t\tthis._halfHandleSize = new L.Point(\n\t\t\thandle.offsetWidth / 2,\n\t\t\thandle.offsetHeight / 2\n\t\t);\n\n\t\tthis._newLatLng = new L.LatLng(0, 0);\n\t\tthis._previewLayer = this._lineLayer = L.polyline([], L.extend({}, this.options, {\n\t\t\tnoClip: true\n\t\t}));\n\n\t\tthis._map\n\t\t\t.on('mousemove', this._onMapMouseMove, this)\n\t\t\t.on('dragstart', this._onMapDragStart, this)\n\t\t\t.on('drag', this._onMapDrag, this);\n\n\t\tL.DomEvent\n\t\t\t.on(handle, 'mousedown', this._onHandleMousedown, this)\n\t\t\t.on(handle, 'mouseup', this._onHandleMouseup, this)\n\t\t\t.on(handle, 'dblclick', this._onHandleDblClick, this);\n\n\t\tdelete this._lastDown;\n\t},\n\t/**\n\t * Create an empty Polyline layer\n\t * @return {L.Polyline}\n\t */\n\tcreateLayer: function () {\n\t\treturn L.polyline([], L.extend({}, this.options.layerOptions, {\n\t\t\tnoClip: true\n\t\t}));\n\t},\n\n\t/**\n\t * @return {L.Map}\n\t */\n\tgetMap: function () {\n\t\treturn this._map;\n\t},\n\n\t_next: function () {\n\t\tif (this._latlngs.length >= this.options.threshold) {\n\t\t\ttry {\n\n\t\t\t\tthis._map.removeLayer(this._previewLayer);\n\t\t\t\tthis._previewLayer.setLatLngs(this._latlngs);\n\n\t\t\t\tthis.fire('ldraw:created', {\n\t\t\t\t\tlayer: this._previewLayer\n\t\t\t\t});\n\n\t\t\t\tif (this.options.allowFireOnMap) {\n\t\t\t\t\tthis.fireOnMap('ldraw:created', {\n\t\t\t\t\t\thandler: this,\n\t\t\t\t\t\tlayer: this._previewLayer\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t} finally {\n\t\t\t\tthis._lineLayer.setLatLngs([]);\n\t\t\t\tthis._latlngs = [];\n\t\t\t\tthis._previewLayer = this._lineLayer;\n\t\t\t\tdelete this._newLayer;\n\t\t\t\tdelete this._currentBounds;\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveHooks: function () {\n\t\tL.DomEvent\n\t\t\t.off(this._handle, 'mousedown', this._onHandleMousedown, this)\n\t\t\t.off(this._handle, 'mouseup', this._onHandleMouseup, this)\n\t\t\t.off(this._handle, 'dblclick', this._onHandleDblClick, this);\n\n\t\tthis._map\n\t\t\t.off('mousemove', this._onMapMouseMove, this)\n\t\t\t.off('dragstart', this._onMapDragStart, this)\n\t\t\t.off('drag', this._onMapDrag, this);\n\n\t\tL.DomUtil.remove(this._handle);\n\n\t\tif (this._previewLayer) {\n\t\t\tthis._map.removeLayer(this._previewLayer);\n\t\t}\n\t},\n\n\t_onHandleDblClick: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\t\tthis._next();\n\t},\n\n\t_onHandleMousedown: function (evt) {\n\t\tvar eventPoint = this._map.mouseEventToLayerPoint(evt);\n\t\t\n\t\tif (this._lastDown) {\n\t\t\tvar dx = eventPoint.x - this._lastDown.x,\n\t\t\t    dy = eventPoint.y - this._lastDown.y;\n\n\t\t\tif ( ((dx * dx) + (dy * dy)) <= this.options.minSqrDistance) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._lastDown = {};\n\t\t}\n\n\t\tthis._lastDown.x = eventPoint.x;\n\t\tthis._lastDown.y = eventPoint.y;\n\n\t\tthis._toAddLatLng = this._newLatLng.clone();\n\t},\n\n\t_onHandleMouseup: function () {\n\t\tif (this._dragCount && this._dragCount > this.options.maxDragCount) {\n\t\t\tdelete this._dragCount;\n\t\t} else {\n\t\t\tthis._pushLatLng();\n\t\t}\n\t},\n\n\t_onMapDrag: function () {\n\t\tthis._dragCount++;\n\t},\n\n\t_onMapDragStart: function () {\n\t\tthis._dragCount = 0;\n\t},\n\n\t_onMapMouseMove: function (evt) {\n\t\tvar latlng = evt.latlng;\n\n\t\tif (this.options.onMove) {\n\t\t\tthis.options.onMove(latlng);\n\t\t}\n\n\t\tthis._newLatLng.lat = latlng.lat;\n\t\tthis._newLatLng.lng = latlng.lng;\n\n\t\tvar point = this._map.latLngToLayerPoint(latlng);\n\n\t\tL.DomUtil.setPosition(this._handle, point.subtract(this._halfHandleSize));\n\n\t\tif (this._latlngs.length) {\n\t\t\tthis._previewLayer.setBounds(this._previewBounds());\n\t\t\tthis._previewLayer.redraw();\n\t\t}\n\t},\n\n\t_previewBounds: function () {\n\t\treturn this._currentBounds.clone().extend(this._newLatLng);\n\t},\n\n\t_pushLatLng: function () {\n\t\tthis._do(L.larva.l10n.newPolylinePushLatLng, this._doPushLatLng, this._undoPushLatLng, this._toAddLatLng);\n\t},\n\n\t_doPushLatLng: function (toAddLatLng) {\n\t\tif (this._currentBounds) {\n\t\t\tthis._currentBounds.extend(toAddLatLng);\n\t\t} else {\n\t\t\tthis._currentBounds = L.latLngBounds(toAddLatLng.clone(), toAddLatLng.clone());\n\t\t}\n\n\t\tthis._latlngs.push(toAddLatLng.clone());\n\n\t\tif (this._latlngs.length === this.options.threshold) {\n\t\t\tthis._map.removeLayer(this._lineLayer);\n\t\t\tthis._newLayer = this.createLayer().addTo(this._map);\n\t\t\tthis._previewLayer = this._newLayer;\n\t\t}\n\n\t\tif (!this._previewLayer._map) {\n\t\t\tthis._map.addLayer(this._previewLayer);\n\t\t}\n\n\t\tthis._previewLayer.setLatLngs(this._latlngs.concat(this._newLatLng));\n\t\tthis._previewLayer.redraw();\n\t},\n\n\t_undoPushLatLng: function () {\n\t\tthis._latlngs.pop();\n\t\tthis._previewLayer.setLatLngs(this._latlngs.concat(this._newLatLng));\n\t\tthis._previewLayer.redraw();\n\t}\n\n});\n\nL.larva.handler.newPolyline = function (map, options) {\n\treturn new L.larva.handler.New.Polyline(map, options);\n};","/**\n * @requires  New.Polyline.js\n */\n\n/**\n * @class Polygon creator\n * @extends {L.larva.handler.New.Polyline}\n */\nL.larva.handler.New.Polygon = L.larva.handler.New.Polyline.extend(\n\t/** @lends L.larva.handler.New.Polygon.prototype */\n{\n\n\toptions: {\n\t\tthreshold: 2\n\t},\n\n\t/**\n\t * @return {L.Polygon} Creates blank layer\n\t */\n\tcreateLayer: function () {\n\t\treturn L.polygon([], this.options.layerOptions);\n\t}\n\n});\n\n/**\n * @memberOf L.larva.handler.New.Polygon\n * @param  {L.Map} map\n * @param  {Object} options\n * @return {L.larva.handler.New.Polygon}\n */\nL.larva.handler.newPolygon = function (map, options) {\n\treturn new L.larva.handler.New.Polygon(map, options);\n};","/**\n * @requires Polygon.js\n * @requires Polyline.Edit.js\n * @requires ../Util.js\n * @requires New.Polygon.js\n */\nL.larva.handler.Polygon.Edit = L.larva.handler.Polyline.Edit.extend({\n\n\toptions: {\n\t\tallowMakeHole: true,\n\t\tmakeHoleCursor: 'crosshair',\n\t\tnewHoleOptions: {\n\n\t\t}\n\t},\n\n\taddHooks: function () {\n\t\tL.larva.handler.Polyline.Edit.prototype.addHooks.call(this);\n\n\t\tif (this.options.allowMakeHole) {\n\t\t\tthis._path\n\t\t\t\t.on('click', this._onPathClickHole, this);\n\t\t}\n\t},\n\n\t_searchNearestPoint: function (point) {\n\t\tvar found = [],\n\t\t    map = this.getMap(),\n\t\t    maxDist = this.options.maxDist;\n\n\t\tvar search = L.larva.handler.Polyline.Edit.searchNearestPointIn;\n\n\t\tthis._path.forEachPolygon(function (shell, holes) {\n\t\t\tfound = found.concat(search(point, maxDist, shell, map, true));\n\n\t\t\tholes.forEach(function (latlngs) {\n\t\t\t\tfound = found.concat(search(point, maxDist, latlngs, map, true));\n\t\t\t}, this);\n\t\t}, this);\n\n\t\treturn found;\n\t},\n\n\t_onNewHole: function (evt) {\n\t\tif (this._shellHole) {\n\t\t\tdelete this._makingHole;\n\t\t\tvar polygons = this._path.getLatLngs();\n\t\t\tif (this._path.getType() === L.Polygon.POLYGON) {\n\t\t\t\tpolygons = [polygons];\n\t\t\t}\n\n\t\t\tthis._newPolygonHole.disable();\n\n\t\t\tvar index;\n\t\t\tfor (var p=0; p<polygons.length; p++) {\n\t\t\t\tif ((index = polygons[p].indexOf(this._shellHole)) !== -1) {\n\t\t\t\t\tpolygons[p].push(evt.layer.getLatLngs()[0]);\n\n\t\t\t\t\tthis._path.updateBounds();\n\t\t\t\t\tthis._path.redraw();\n\t\t\t\t\tthis._frame.redraw();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t_onPathClickHole: function (evt) {\n\n\t\tif (!this._makingHole && evt.originalEvent.ctrlKey) {\n\t\t\tthis._makingHole = true;\n\n\t\t\tvar point = evt.layerPoint, points, found = [];\n\n\t\t\tthis._path.forEachPolygon(function (shell) {\n\t\t\t\tpoints = shell.map(L.Map.prototype.latLngToLayerPoint, this.getMap());\n\n\t\t\t\tif (L.larva.Util.pointIsInside(point, points)) {\n\t\t\t\t\tfound.push(shell);\n\t\t\t\t}\n\t\t\t}, this);\n\n\t\t\tif (found.length === 1) {\n\t\t\t\tthis._shellHole = found[0];\n\t\t\t\tthis._newPolygonHole = new L.larva.handler.New.Polygon(this.getMap(), L.extend({}, this.options.newHoleOptions, {\n\t\t\t\t\tallowFireOnMap: false\n\t\t\t\t})).on('ldraw:created', this._onNewHole, this);\n\n\t\t\t\tthis._newPolygonHole.enable();\n\t\t\t\tthis._newPolygonHole.addLatLng(evt.latlng);\n\t\t\t}\n\t\t}\n\t},\n\n\t_removeLatLng: function (handleId) {\n\t\tvar latlng = this._frame.getLatLng(handleId),\n\t\t    latlngs = this._path.getLatLngs(),\n\t\t    index, i=0, p=0;\n\n\t\tswitch (this._path.getType()) {\n\t\t\tcase L.Polygon.POLYGON:\n\n\t\t\t\tfor (; i<latlngs.length; i++) {\n\t\t\t\t\tif ((index = latlngs[i].indexOf(latlng)) !== -1) {\n\t\t\t\t\t\tif (latlngs[i].length <= 3) {\n\t\t\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\t\t\t// shell..\n\t\t\t\t\t\t\t\tlatlngs.splice(0, latlngs.length);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tlatlngs.splice(index, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlatlngs[i].splice(index, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tl: for (; p<latlngs.length; p++) {\n\t\t\t\t\t// each polygon\n\t\t\t\t\tfor (i=0; i<latlngs[p].length; i++) {\n\t\t\t\t\t\tif ((index = latlngs[p][i].indexOf(latlng)) !== -1) {\n\t\t\t\t\t\t\tif (latlngs[p][i].length <= 3) {\n\t\t\t\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\t\t\t\t//shell\n\t\t\t\t\t\t\t\t\tlatlngs.splice(p, 1);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tlatlngs[p].splice(i, 1);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tlatlngs[p][i].splice(index, 1);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak l;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\n\t\tthis._path.updateBounds();\n\t\tthis._path.redraw();\n\t\tthis._frame.redraw();\n\t},\n\n\t_restoreCursor: function () {\n\n\t},\n\n\t_setHoleCursor: function () {\n\n\t}\n\n});\n\nL.Polyline.addInitHook(function () {\n\n\tif (this instanceof L.Polygon) {\n\t\tthis.larva.edit = new L.larva.handler.Polygon.Edit(this);\n\t} else {\n\t\tthis.larva.edit = new L.larva.handler.Polyline.Edit(this);\n\t}\n\n});"],"sourceRoot":"l.larva"}