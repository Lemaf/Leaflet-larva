{"version":3,"sources":["L.larva.js","package.js","Path.js","Polyline.js","Polygon.js","../ext/L.Polyline.js","../frame/package.js","../frame/Path.js","../frame/Style.js","Polyline.Rotate.js","Polyline.Move.js","Polyline.Resize.js"],"names":["L","larva","version","getHeight","el","offsetHeight","getWidth","offsetWidth","handler","Path","Handler","extend","includes","Evented","prototype","initialize","path","frameStyle","options","setOptions","_path","_frameStyle","addInitHook","Polyline","Polygon","forEachLatLng","include","fn","context","latlngs","getLatLngs","length","Array","isArray","reduce","array","concat","forEach","updateBounds","bounds","_bounds","LatLngBounds","latlng","frame","Layer","statics","TOP_LEFT","TOP_MIDDLE","TOP_RIGHT","MIDDLE_LEFT","MIDDLE_MIDDLE","MIDDLE_RIGHT","BOTTOM_LEFT","BOTTOM_MIDDLE","BOTTOM_RIGHT","pane","_pathFrame","beforeAdd","map","getPane","createPane","getEvents","zoom","_onMapZoom","getDraggable","_draggable","getFrameClientRect","_el","getBoundingClientRect","getHandle","id","_handles","getPosition","DomUtil","hideHandle","i","arguments","style","display","onAdd","create","DomEvent","on","_onStart","_id","Draggable","START","join","_draggables","_updateFrame","_updateHandles","onRemove","disable","off","stop","remove","empty","setStyle","oldStyle","_style","hide","draggable","enable","removeClass","className","addClass","_updateDraggable","slice","call","evt","fire","sourceEvent","target","document","MOVE","type","_onMove","END","_onEnd","body","left","offsetLeft","top","offsetTop","marginLeft","parseInt","marginTop","setPosition","point","zoomChanged","maintainHandles","currentPosition","handle","handlePosition","getBounds","southEastPoint","_map","latLngToLayerPoint","getSouthEast","northWestPoint","getNorthWest","computedStyle","getComputedStyle","add","subtract","x","borderLeftWidth","borderRightWidth","y","borderTopWidth","borderBottomWidth","oldWidth","oldHeight","width","height","scaleBy","right","bottom","widthOf","heightOf","borderWidth","br","bm","bl","mm","ml","mr","tr","tm","tl","pathframe","Style","Move","Resize","Rotate","addHooks","_frame","addTo","position","touches","centerBounding","_centerElement","cx","cy","clientX","j","clientY","Math","sqrt","sin","_vector","cos","frameBounding","framePosition","dx","dy","projected","newLatLng","rotated","_original","layerPointToLatLng","lat","lng","redraw","centerElement","targetBounding","vector","clone","rotate","_onDragStart","_onDragMove","_onDragEnd","mouseEvt","pos","_axis","undefined","_startPoint","_startNorthWest","startPos","move","xscale","yscale","_origin","screenX","screenY","ctrlKey","max","abs","invertX","invertY","bounding","origin","resize"],"mappings":"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","file":"leaflet-larva.js","sourcesContent":["L.larva = {\n\tversion: '0.1.0',\n\n\tgetHeight: function (el) {\n\t\treturn el.offsetHeight;\n\t},\n\n\tgetWidth: function (el) {\n\t\treturn el.offsetWidth;\n\t}\n};","L.larva.handler = {\n\n};","/**\n * @requires package.js\n * \n * Base class for Path handlers\n */\nL.larva.handler.Path = L.Handler.extend({\n\n\tincludes: [L.Evented.prototype],\n\n\tinitialize: function (path, frameStyle, options) {\n\t\tL.setOptions(this, options);\n\n\t\tthis._path = path;\n\t\tthis._frameStyle = frameStyle;\n\t}\n\n});\n\nL.Path.addInitHook(function () {\n\tthis.larva = {};\n});","/**\n * @requires Path.js\n */\nL.larva.handler.Polyline = L.larva.handler.Path.extend({\n\n\toptions: {\n\t\t\n\t}\n\n});","/**\n * @requires Polyline.js\n */\nL.larva.handler.Polygon = L.larva.handler.Polyline.extend({\n\n});","if (!L.Polyline.prototype.forEachLatLng) {\n\tL.Polyline.include({\n\n\t\tforEachLatLng: function (fn, context) {\n\t\t\tvar latlngs = this.getLatLngs();\n\n\t\t\tif (!latlngs.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (Array.isArray(latlngs[0])) {\n\t\t\t\t// nested array\n\n\t\t\t\tlatlngs = latlngs.reduce(function (array, latlngs) {\n\t\t\t\t\treturn array.concat(latlngs);\n\t\t\t\t}, []);\n\t\t\t}\n\n\t\t\tlatlngs.forEach(fn, context);\n\t\t}\n\t});\n}\n\nif (!L.Polyline.prototype.updateBounds) {\n\tL.Polyline.include({\n\n\t\tupdateBounds: function () {\n\t\t\tvar bounds = this._bounds = new L.LatLngBounds();\n\n\t\t\tthis.forEachLatLng(function (latlng) {\n\t\t\t\tbounds.extend(latlng);\n\t\t\t});\n\t\t}\n\n\t});\n}","L.larva.frame = {\n\n};","/**\n * @requires package.js\n */\nL.larva.frame.Path = L.Layer.extend({\n\n\tstatics: {\n\t\tTOP_LEFT: 'tl',\n\t\tTOP_MIDDLE: 'tm',\n\t\tTOP_RIGHT: 'tr',\n\t\tMIDDLE_LEFT: 'ml',\n\t\tMIDDLE_MIDDLE: 'mm',\n\t\tMIDDLE_RIGHT: 'mr',\n\t\tBOTTOM_LEFT: 'bl',\n\t\tBOTTOM_MIDDLE: 'bm',\n\t\tBOTTOM_RIGHT: 'br'\n\t},\n\n\toptions: {\n\t\tpane: 'llarva-path-frame'\n\t},\n\n\tinitialize: function (path) {\n\t\tif (path._pathFrame && path._pathFrame instanceof L.larva.frame.Path) {\n\t\t\treturn path._pathFrame;\n\t\t}\n\n\t\tpath._pathFrame = this;\n\t\tthis._path = path;\n\t},\n\n\tbeforeAdd: function (map) {\n\t\tif (!map.getPane(this.options.pane)) {\n\t\t\tmap.createPane(this.options.pane);\n\t\t}\n\t},\n\n\tgetEvents: function () {\n\t\treturn {\n\t\t\tzoom: this._onMapZoom\n\t\t};\n\t},\n\n\tgetDraggable: function () {\n\t\treturn this._draggable;\n\t},\n\n\tgetFrameClientRect: function () {\n\t\treturn this._el.getBoundingClientRect();\n\t},\n\n\tgetHandle: function (id) {\n\t\treturn this._handles[id];\n\t},\n\n\tgetPosition: function(id) {\n\t\tif (id) {\n\t\t\treturn L.DomUtil.getPosition(this._handles[id]);\n\t\t} else {\n\t\t\treturn L.DomUtil.getPosition(this._el);\n\t\t}\n\t},\n\n\thideHandle: function() {\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tif (this._handles[arguments[i]]) {\n\t\t\t\tthis._handles[arguments[i]].style.display = 'none';\n\t\t\t}\n\t\t}\n\t},\n\n\tonAdd: function () {\n\t\tvar el = this._el = L.DomUtil.create('div', 'llarva-pathframe', this.getPane());\n\t\tL.DomEvent.on(el, 'mousedown', this._onStart, this);\n\n\t\tthis._handles = {};\n\n\t\t['tl','tm','tr','ml','mm','mr','bl','bm','br'].forEach(function (id) {\n\n\t\t\tthis._handles[id] = L.DomUtil.create('div', 'llarva-' + id, el);\n\t\t\tthis._handles[id]._id = id;\n\t\t\tL.DomEvent.on(this._handles[id], L.Draggable.START.join(' '), this._onStart, this);\n\n\t\t}, this);\n\n\t\tthis._draggable = new L.Draggable(el);\n\t\tthis._draggables = {};\n\t\tthis._updateFrame(false);\n\t\tthis._updateHandles();\n\t},\n\n\tonRemove: function() {\n\t\tvar id;\n\n\t\tif (this._draggable) {\n\t\t\tthis._draggable.disable();\n\t\t}\n\n\t\tfor (id in this._draggables) {\n\t\t\tthis._draggables[id].disable();\n\t\t}\n\n\t\tL.DomEvent.off(this._el, 'mousedown click', L.DomEvent.stop);\n\n\t\tfor (id in this._handles) {\n\t\t\tL.DomEvent.off(this._handles[id], 'mousedown click', L.DomEvent.stop);\n\t\t}\n\n\t\tL.DomUtil.remove(this._el);\n\t\tL.DomUtil.empty(this._el);\n\n\t\tdelete this._el;\n\t},\n\n\tsetStyle: function (style) {\n\t\tvar id, el, oldStyle = this._style;\n\n\t\tfor (id in this._handles) {\n\t\t\tel = this._handles[id];\n\t\t\tel.style.display = 'block';\n\n\t\t\tif (this._draggables[id]) {\n\t\t\t\tthis._draggables[id].disable();\n\t\t\t\tdelete this._draggables[id];\n\t\t\t}\n\n\t\t\t// if (oldStyle) {\n\t\t\t// \tL.DomUtil.removeClass(el, oldStyle.className + '-' + id);\n\t\t\t// }\n\n\t\t\t// L.DomUtil.addClass(el, style.className + '-' + id);\n\n\t\t\tif (style[id]) {\n\t\t\t\tif (style[id].hide) {\n\t\t\t\t\tel.style.display = 'none';\n\t\t\t\t}\n\n\t\t\t\tif (style[id].draggable) {\n\t\t\t\t\tthis._draggables[id] = new L.Draggable(el);\n\t\t\t\t\tthis._draggables[id].enable();\n\t\t\t\t\tL.DomEvent.off(el, 'mousedown click', L.DomEvent.stop);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (oldStyle) {\n\t\t\tL.DomUtil.removeClass(this._el, oldStyle.className);\n\t\t}\n\n\t\tL.DomUtil.addClass(this._el, style.className);\n\n\t\tthis._style = style;\n\n\t\tthis._updateHandles();\n\n\t\tfor (id in this._draggables) {\n\t\t\tthis._updateDraggable(id);\n\t\t}\n\t},\n\n\tupdateBounds: function () {\n\t\tthis._updateFrame(false, Array.prototype.slice.call(arguments, 0));\n\t},\n\n\t_onStart: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\n\t\tthis.fire('drag:start', {\n\t\t\tsourceEvent: evt,\n\t\t\tid: evt.target._id\n\t\t});\n\n\t\tL.DomEvent\n\t\t\t.on(document, L.Draggable.MOVE[evt.type], this._onMove, this)\n\t\t\t.on(document, L.Draggable.END[evt.type], this._onEnd, this);\n\n\t\tL.DomUtil.addClass(document.body, 'leaflet-dragging');\n\t},\n\n\t_onMapZoom: function () {\n\t\tthis._updateFrame(true);\n\t},\n\n\t_onMove: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\n\t\tthis.fire('drag:move', {\n\t\t\tsourceEvent: evt\n\t\t});\n\t},\n\n\t_onEnd: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\n\t\tfor (var id in L.Draggable.MOVE) {\n\t\t\tL.DomEvent\n\t\t\t\t.off(document, L.Draggable.MOVE[id], this._onMove, this)\n\t\t\t\t.off(document, L.Draggable.END[id], this._onEnd, this);\n\t\t}\n\n\t\tL.DomUtil.removeClass(document.body, 'leaflet-dragging');\n\n\t\tthis.fire('drag:end', {\n\t\t\tsourceEvent: evt\n\t\t});\n\t},\n\n\t_updateDraggable: function (id) {\n\t\tvar el = this._handles[id];\n\t\tvar left = el.offsetLeft,\n\t\ttop = el.offsetTop;\n\n\t\tif (el.style.marginLeft) {\n\t\t\tleft -= parseInt(el.style.marginLeft);\n\t\t}\n\n\t\tif (el.style.marginTop) {\n\t\t\ttop -= parseInt(el.style.marginTop);\n\t\t}\n\n\t\tL.extend(el.style, {\n\t\t\tleft: '0px', top: '0px'\n\t\t});\n\n\t\tL.DomUtil.setPosition(el, L.point(left, top));\n\t},\n\n\t_updateFrame: function (zoomChanged, maintainHandles) {\n\t\tvar id,\n\t\t    currentPosition = L.DomUtil.getPosition(this._el),\n\t\t    handle,\n\t\t    handlePosition;\n\n\t\tvar bounds = this._path.getBounds();\n\n\t\tvar southEastPoint = this._map.latLngToLayerPoint(bounds.getSouthEast()),\n\t\tnorthWestPoint = this._map.latLngToLayerPoint(bounds.getNorthWest());\n\n\t\tvar computedStyle = getComputedStyle(this._el);\n\n\t\tif (maintainHandles && maintainHandles.length) {\n\n\t\t\tif (currentPosition) {\n\t\t\t\tfor (var i=0; i<maintainHandles.length; i++) {\n\t\t\t\t\t\n\t\t\t\t\thandle = this._handles[maintainHandles[i]];\n\t\t\t\t\tif (handle && (handlePosition = L.DomUtil.getPosition(handle))) {\n\t\t\t\t\t\thandlePosition = handlePosition.add(currentPosition);\n\t\t\t\t\t\tL.DomUtil.setPosition(handle, handlePosition.subtract(northWestPoint));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tL.DomUtil.setPosition(this._el, northWestPoint);\n\n\t\tvar x = parseInt(computedStyle.borderLeftWidth) + parseInt(computedStyle.borderRightWidth),\n\t\ty = parseInt(computedStyle.borderTopWidth) + parseInt(computedStyle.borderBottomWidth);\n\n\t\tvar oldWidth, oldHeight;\n\t\tif (zoomChanged) {\n\t\t\toldWidth = this._el.offsetWidth;\n\t\t\toldHeight = this._el.offsetHeight;\n\t\t}\n\n\t\tthis._el.style.width = (southEastPoint.x - northWestPoint.x - x) + 'px';\n\t\tthis._el.style.height = (southEastPoint.y - northWestPoint.y - y) + 'px';\n\n\t\tif (zoomChanged) {\n\n\t\t\tfor (id in this._handles) {\n\t\t\t\thandle = this._handles[id];\n\t\t\t\thandlePosition = L.DomUtil.getPosition(handle);\n\n\t\t\t\tif (handlePosition) {\n\t\t\t\t\tL.DomUtil.setPosition(handle, handlePosition.scaleBy(L.point(\n\t\t\t\t\t\tthis._el.offsetWidth / oldWidth, \n\t\t\t\t\t\tthis._el.offsetHeight / oldHeight\n\t\t\t\t\t)));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.southEastPoint = southEastPoint;\n\t\tthis.northWestPoint = northWestPoint;\n\t},\n\n\t_updateHandles: function () {\n\t\tvar el, computedStyle, right, bottom, left, top;\n\t\tvar widthOf = L.larva.getWidth, heightOf = L.larva.getHeight;\n\n\t\tcomputedStyle = getComputedStyle(this._el);\n\n\t\tvar borderWidth = {\n\t\t\tbottom: 'borderBottomWidth',\n\t\t\tleft: 'borderLeftWidth',\n\t\t\tright: 'borderRightWidth',\n\t\t\ttop: 'borderTopWidth'\n\t\t};\n\n\t\tfor (var id in borderWidth) {\n\t\t\tborderWidth[id] = parseInt(computedStyle[borderWidth[id]]) / 2;\n\t\t}\n\n\t\tel = this._handles.br;\n\n\t\tright = (- (widthOf(el) / 2) - borderWidth.right) + 'px';\n\t\tbottom = (- (heightOf(el) / 2) - borderWidth.bottom) + 'px';\n\n\t\tL.extend(el.style, {\n\t\t\tright: right,\n\t\t\tbottom: bottom\n\t\t});\n\n\t\tel = this._handles.bm;\n\t\tleft = (-(widthOf(el) / 2)) + 'px';\n\t\tbottom = (- (heightOf(el) / 2) - borderWidth.bottom) + 'px';\n\n\t\tL.extend(el.style, {\n\t\t\tleft: '50%',\n\t\t\t'margin-left': left,\n\t\t\tbottom: bottom\n\t\t});\n\n\t\tel = this._handles.bl;\n\t\tleft = (-(widthOf(el) / 2) - borderWidth.left) + 'px';\n\t\tbottom = (- (heightOf(el) / 2) - borderWidth.bottom) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tleft: left,\n\t\t\tbottom: bottom\n\t\t});\n\n\t\tel = this._handles.mm;\n\t\tleft = -(widthOf(el) / 2) + 'px';\n\t\ttop = -(heightOf(el) / 2) + 'px';\n\t\tL.extend(el.style, {\n\t\t\ttop: '50%',\n\t\t\tleft: '50%',\n\t\t\t'margin-left': left,\n\t\t\t'margin-top': top\n\t\t});\n\n\t\tel = this._handles.ml;\n\t\ttop = -(heightOf(el) / 2) + 'px';\n\t\tleft = (-(widthOf(el) / 2) - borderWidth.left) + 'px';\n\t\tL.extend(el.style, {\n\t\t\ttop: '50%',\n\t\t\t'margin-top': top,\n\t\t\tleft: left\n\t\t});\n\n\t\tel = this._handles.mr;\n\t\tright = (- (widthOf(el) / 2) - borderWidth.right) + 'px';\n\t\ttop = -(heightOf(el) / 2) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tright: right,\n\t\t\ttop: '50%',\n\t\t\t'margin-top': top\n\t\t});\n\n\t\tel = this._handles.tr;\n\t\tright = (-(widthOf(el) / 2) - borderWidth.right) + 'px';\n\t\ttop = (-(heightOf(el) / 2) - borderWidth.top) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tright: right,\n\t\t\ttop: top\n\t\t});\n\n\t\tel = this._handles.tm;\n\t\ttop = (-(heightOf(el) / 2) - borderWidth.top) + 'px';\n\t\tleft = -(widthOf(el) / 2) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tleft: '50%',\n\t\t\t'margin-left': left,\n\t\t\ttop: top\n\t\t});\n\n\t\tel = this._handles.tl;\n\t\ttop = (-(heightOf(el) / 2) - borderWidth.top) + 'px';\n\t\tleft = (-(widthOf(el) / 2) - borderWidth.left) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tleft: left,\n\t\t\ttop: top\n\t\t});\n\t}\n});\n\nL.larva.frame.path = function pathframe (path) {\n\treturn new L.larva.frame.Path(path);\n};","/**\n * @requires package.js\n */\n\nL.larva.frame.Style = {\n\t\n};\n\nL.larva.frame.Style.Move = {\n\tclassName: 'llarva-pathframe-move',\n\t\n\ttl: {\n\t\thide: true\n\t},\n\n\ttr: {\n\t\thide: true\n\t},\n\n\tmm: {\n\t\thide: true\n\t},\n\n\tbl: {\n\t\thide: true\n\t},\n\n\tbr: {\n\t\thide: true\n\t}\n};\n\nL.larva.frame.Style.Resize = {\n\tclassName: 'llarva-pathframe-resize',\n\tmm: {\n\t\thide: true\n\t}\n};\n\nL.larva.frame.Style.Rotate = {\n\tclassName: 'llarva-pathframe-rotate',\n\ttm: {\n\t\thide: true\n\t},\n\n\tml: {\n\t\thide: true\n\t},\n\n\tmr: {\n\t\thide: true\n\t},\n\n\tbm: {\n\t\thide: true\n\t},\n\n\tmm: {\n\t\tdraggable: true\n\t}\n};","/**\n * @requires Polygon.js\n * @requires ../ext/L.Polyline.js\n * @requires ../frame/Path.js\n * @requires ../frame/Style.js\n */\n\nL.larva.handler.Polyline.Rotate = L.larva.handler.Polyline.extend({\n\n\taddHooks: function () {\n\t\tthis._frame = new L.larva.frame.Path(this._path);\n\t\tthis._frame.addTo(this._path._map);\n\n\t\tthis._frame.setStyle(this._frameStyle);\n\n\t\tthis._frame.on('drag:start', this._onStart, this);\n\t},\n\n\t_onEnd: function () {\n\t\tthis._frame\n\t\t\t.off('drag:move', this._onMove, this)\n\t\t\t.off('drag:end', this._onEnd, this);\n\t},\n\n\t_onMove: function (evt) {\n\t\tvar position = evt.sourceEvent.touches ? evt.sourceEvent.touches[0] : evt.sourceEvent;\n\n\t\tvar centerBounding = this._centerElement.getBoundingClientRect();\n\n\t\tvar cx = (centerBounding.left + centerBounding.width / 2),\n\t\t    cy = (centerBounding.top + centerBounding.height / 2);\n\n\t\tvar i = position.clientX - cx,\n\t\t    j = position.clientY - cy;\n\n\t\tvar length = Math.sqrt(i * i + j * j);\n\n\t\t// cross product\n\t\tvar sin = (this._vector.i * j - this._vector.j * i) / length;\n\n\t\t// scalar product\n\t\tvar cos = (this._vector.i * i + this._vector.j * j) / length;\n\n\t\tvar frameBounding = this._frame.getFrameClientRect(),\n\t\t    framePosition = this._frame.getPosition();\n\n\t\tcx = (cx - frameBounding.left) + framePosition.x;\n\t\tcy = (cy - frameBounding.top) + framePosition.y;\n\n\t\tvar dx = cx * (1 - cos) + cy * sin;\n\t\tvar dy = cy * (1 - cos) - cx * sin;\n\n\t\tvar projected, newLatLng, rotated = L.point(0, 0);\n\n\t\tthis._path.forEachLatLng(function (latlng) {\n\t\t\tprojected = this._path._map.latLngToLayerPoint(latlng._original);\n\n\t\t\trotated.x = projected.x * cos - projected.y * sin + dx;\n\t\t\trotated.y = projected.x * sin + projected.y * cos + dy;\n\n\t\t\tnewLatLng = this._path._map.layerPointToLatLng(rotated);\n\t\t\tlatlng.lat = newLatLng.lat;\n\t\t\tlatlng.lng = newLatLng.lng;\n\t\t}, this);\n\n\t\tthis._path.updateBounds();\n\t\tthis._frame.updateBounds(L.larva.frame.Path.MIDDLE_MIDDLE);\n\t\tthis._path.redraw();\n\t},\n\n\t_onStart: function (evt) {\n\t\tif (!evt.id || evt.id === L.larva.frame.Path.MIDDLE_MIDDLE) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar centerElement = this._centerElement = this._frame.getHandle(L.larva.frame.Path.MIDDLE_MIDDLE);\n\n\t\tvar centerBounding = centerElement.getBoundingClientRect(),\n\t\t    targetBounding = evt.sourceEvent.target.getBoundingClientRect();\n\n\t\tvar vector = this._vector = {\n\t\t\ti: (targetBounding.left + targetBounding.width / 2) - (centerBounding.left - centerBounding.width / 2),\n\t\t\tj: (targetBounding.top + targetBounding.height / 2) - (centerBounding.top - centerBounding.height / 2)\n\t\t};\n\n\t\tvector.length = Math.sqrt(vector.i * vector.i + vector.j * vector.j);\n\n\t\tvector.i = vector.i / vector.length;\n\t\tvector.j = vector.j / vector.length;\n\n\t\tthis._path.forEachLatLng(function (latlng) {\n\t\t\tlatlng._original = latlng.clone();\n\t\t});\n\n\t\tthis._frame\n\t\t\t.on('drag:move', this._onMove, this)\n\t\t\t.on('drag:end', this._onEnd, this);\n\t}\n\n});\n\nL.Polyline.addInitHook(function () {\n\tthis.larva.rotate = new L.larva.handler.Polyline.Rotate(this, L.larva.frame.Style.Rotate);\n});","/**\n * @requires Polyline.js\n * @requires ../frame/Path.js\n * @requires ../ext/L.Polyline.js\n * @requires ../frame/Style.js\n * \n * @type {[type]}\n */\nL.larva.handler.Polyline.Move = L.larva.handler.Polyline.extend({\n\n\taddHooks: function() {\n\t\tthis._frame = L.larva.frame.path(this._path).addTo(this._path._map);\n\n\t\tthis._frame.setStyle(this._frameStyle);\n\n\t\tthis._frame.on('drag:start', this._onDragStart, this);\n\t\tthis._frame.on('drag:move', this._onDragMove, this);\n\t\tthis._frame.on('drag:end', this._onDragEnd, this);\n\t},\n\n\t_onDragEnd: function () {\n\t},\n\n\t_onDragMove: function (evt) {\n\t\tvar mouseEvt = evt.sourceEvent;\n\t\tvar pos = mouseEvt.touches && mouseEvt.touches[0] ? mouseEvt.touches[0] : mouseEvt;\n\n\t\tvar dx = 0, dy = 0;\n\n\t\tif (this._axis === undefined) {\n\t\t\tdx = pos.clientX - this._startPoint.x;\n\t\t\tdy = pos.clientY - this._startPoint.y;\n\t\t} else {\n\t\t\tif (this._axis === 'x') {\n\t\t\t\tdx = pos.clientX - this._startPoint.x;\n\t\t\t} else if (this._axis === 'y') {\n\t\t\t\tdy = pos.clientY - this._startPoint.y;\n\t\t\t}\n\t\t}\n\n\t\tif (dx === 0 && dy === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar vector = L.point(dx, dy), projected, newLatLng;\n\n\t\tthis._path.forEachLatLng(function (latlng) {\n\t\t\tprojected = this._path._map.latLngToLayerPoint(latlng._original);\n\t\t\tprojected = projected.add(vector);\n\t\t\tnewLatLng = this._path._map.layerPointToLatLng(projected);\n\t\t\tlatlng.lat = newLatLng.lat;\n\t\t\tlatlng.lng = newLatLng.lng;\n\t\t}, this);\n\n\t\tthis._path.updateBounds();\n\t\tthis._frame.updateBounds();\n\t\tthis._path.redraw();\n\n\t},\n\n\t_onDragStart: function (evt) {\n\t\tthis._startNorthWest = this._path.getBounds().getNorthWest();\n\t\tvar mouseEvt = evt.sourceEvent;\n\t\tvar startPos = mouseEvt.touches && mouseEvt.touches[0] ? mouseEvt.touches[0]: mouseEvt;\n\t\tthis._startPoint = L.point(startPos.clientX, startPos.clientY);\n\n\t\tthis._path.forEachLatLng(function (latlng) {\n\t\t\tlatlng._original = latlng.clone();\n\t\t});\n\n\t\tswitch (evt.id) {\n\t\t\tcase L.larva.frame.Path.TOP_MIDDLE:\n\t\t\tcase L.larva.frame.Path.BOTTOM_MIDDLE:\n\t\t\t\tthis._axis = 'y';\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.MIDDLE_LEFT:\n\t\t\tcase L.larva.frame.Path.MIDDLE_RIGHT:\n\t\t\t\tthis._axis = 'x';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tdelete this._axis;\n\t\t}\n\t}\n\n});\n\nL.Polyline.addInitHook(function () {\n\tthis.larva.move = new L.larva.handler.Polyline.Move(this, L.larva.frame.Style.Move);\n});","/**\n * @requires Polygon.js\n * @requires ../frame/Path.js\n * @requires ../ext/L.Polyline.js\n * @requires ../frame/Style.js\n */\nL.larva.handler.Polyline.Resize = L.larva.handler.Polyline.extend({\n\n\taddHooks: function () {\n\t\tthis._frame = L.larva.frame.path(this._path).addTo(this._path._map);\n\n\t\tthis._frame.setStyle(this._frameStyle);\n\n\t\tthis._frame.on('drag:start', this._onDragStart, this);\n\t\tthis._frame.on('drag:move', this._onDragMove, this);\n\t\tthis._frame.on('drag:end', this._onDragEnd, this);\n\t},\n\n\t_onDragEnd: function () {\n\n\t},\n\n\t_onDragMove: function (evt) {\n\t\tvar position = evt.sourceEvent.touches ? evt.sourceEvent.touches[0] : evt.sourceEvent;\n\n\n\t\tvar xscale = null, yscale = null;\n\n\t\tif (this._origin.screenX !== undefined) {\n\t\t\txscale = (position.clientX - this._origin.screenX) / this._origin.width;\n\t\t}\n\n\t\tif (this._origin.screenY !== undefined) {\n\t\t\tyscale = (position.clientY - this._origin.screenY) / this._origin.height;\n\t\t}\n\n\t\tif (xscale === null && yscale === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (xscale !== null && yscale !== null) {\n\t\t\tif (evt.sourceEvent.ctrlKey) {\n\t\t\t\tyscale = xscale = Math.max(Math.abs(xscale), Math.abs(yscale));\n\n\t\t\t\tif (this._origin.invertX) {\n\t\t\t\t\txscale = -xscale;\n\t\t\t\t}\n\n\t\t\t\tif (this._origin.invertY) {\n\t\t\t\t\tyscale = -yscale;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar projected, newLatLng;\n\n\t\tthis._path.forEachLatLng(function (latlng) {\n\t\t\tprojected = this._path._map.latLngToLayerPoint(latlng._original);\n\n\t\t\tif (xscale !== null) {\n\t\t\t\tif (this._origin.invertX) {\n\t\t\t\t\tprojected.x = this._origin.x - projected.x;\n\t\t\t\t} else {\n\t\t\t\t\tprojected.x = projected.x - this._origin.x;\n\t\t\t\t}\n\n\t\t\t\tprojected.x = projected.x * xscale + this._origin.x;\n\t\t\t}\n\n\n\t\t\tif (yscale !== null) {\n\n\t\t\t\tif (this._origin.invertY) {\n\t\t\t\t\tprojected.y = this._origin.y - projected.y;\n\t\t\t\t} else {\n\t\t\t\t\tprojected.y = projected.y - this._origin.y;\n\t\t\t\t}\n\n\t\t\t\tprojected.y = projected.y * yscale + this._origin.y;\n\t\t\t}\n\n\t\t\tnewLatLng = this._path._map.layerPointToLatLng(projected);\n\t\t\tlatlng.lat = newLatLng.lat;\n\t\t\tlatlng.lng = newLatLng.lng;\n\t\t}, this);\n\n\t\tthis._path.updateBounds();\n\t\tthis._frame.updateBounds();\n\t\tthis._path.redraw();\n\n\t},\n\n\t_onDragStart: function (evt) {\n\n\t\tthis._path.forEachLatLng(function (latlng) {\n\t\t\tlatlng._original = latlng.clone();\n\t\t});\n\n\n\t\tvar bounding = this._frame.getFrameClientRect();\n\n\t\tvar origin = this._origin = {\n\t\t\theight: bounding.height,\n\t\t\twidth: bounding.width\n\t\t};\n\n\t\tvar position = this._frame.getPosition();\n\n\t\tswitch (evt.id) {\n\t\t\tcase L.larva.frame.Path.TOP_LEFT:\n\t\t\t\torigin.x = position.x + bounding.width;\n\t\t\t\torigin.y = position.y + bounding.height;\n\t\t\t\torigin.screenX = bounding.right;\n\t\t\t\torigin.screenY = bounding.bottom;\n\t\t\t\torigin.invertX = true;\n\t\t\t\torigin.invertY = true;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.TOP_MIDDLE:\n\t\t\t\torigin.y = position.y + bounding.height;\n\t\t\t\torigin.screenY = bounding.bottom;\n\t\t\t\torigin.invertY = true;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.TOP_RIGHT:\n\t\t\t\torigin.x = position.x;\n\t\t\t\torigin.y = position.y + bounding.height;\n\t\t\t\torigin.screenX = bounding.left;\n\t\t\t\torigin.screenY = bounding.bottom;\n\t\t\t\torigin.invertY = true;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.MIDDLE_LEFT:\n\t\t\t\torigin.x = position.x + bounding.width;\n\t\t\t\torigin.screenX = bounding.right;\n\t\t\t\torigin.invertX = true;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.MIDDLE_RIGHT:\n\t\t\t\torigin.x = position.x;\n\t\t\t\torigin.screenX = bounding.left;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.BOTTOM_LEFT:\n\t\t\t\torigin.x = position.x + bounding.width;\n\t\t\t\torigin.y = position.y;\n\t\t\t\torigin.screenX = bounding.right;\n\t\t\t\torigin.screenY = bounding.top;\n\t\t\t\torigin.invertX = true;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.BOTTOM_MIDDLE:\n\t\t\t\torigin.y = position.y;\n\t\t\t\torigin.screenY = bounding.top;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.BOTTOM_RIGHT:\n\t\t\t\torigin.x = position.x;\n\t\t\t\torigin.y = position.y;\n\t\t\t\torigin.screenY = bounding.top;\n\t\t\t\torigin.screenX = bounding.left;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n});\n\nL.Polyline.addInitHook(function () {\n\tthis.larva.resize = new L.larva.handler.Polyline.Resize(this, L.larva.frame.Style.Resize);\n});"],"sourceRoot":"/source/"}