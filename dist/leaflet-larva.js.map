{"version":3,"sources":["L.larva.js","package.js","Path.js","Polyline.js","../frame/package.js","../frame/Path.js","../frame/Style.js","../ext/L.Polyline.js","Polyline.Rotate.js","Polyline.Move.js","Polygon.js","Polyline.Resize.js"],"names":["L","larva","version","getHeight","el","offsetHeight","getWidth","offsetWidth","handler","Path","Handler","extend","includes","Evented","prototype","initialize","path","frameStyle","options","setOptions","_path","_frameStyle","addInitHook","Polyline","frame","Layer","statics","TOP_LEFT","TOP_MIDDLE","TOP_RIGHT","MIDDLE_LEFT","MIDDLE_MIDDLE","MIDDLE_RIGHT","BOTTOM_LEFT","BOTTOM_MIDDLE","BOTTOM_RIGHT","pane","beforeAdd","map","getPane","createPane","getEvents","zoom","_onMapZoom","getDraggable","_draggable","getFrameClientRect","_el","getBoundingClientRect","getHandle","id","_handles","getPosition","DomUtil","hideHandle","i","arguments","length","style","display","onAdd","create","DomEvent","on","_onStart","forEach","_id","Draggable","START","join","_draggables","_updateFrame","_updateHandles","onRemove","disable","off","stop","remove","empty","setStyle","oldStyle","_style","hide","draggable","enable","removeClass","className","addClass","_updateDraggable","updateBounds","Array","slice","call","evt","fire","sourceEvent","handle","target","document","MOVE","type","_onMove","END","_onEnd","body","left","offsetLeft","top","offsetTop","marginLeft","parseInt","marginTop","setPosition","point","zoomChanged","maintainHandles","currentPosition","handlePosition","bounds","getBounds","southEastPoint","_map","latLngToLayerPoint","getSouthEast","northWestPoint","getNorthWest","computedStyle","getComputedStyle","add","subtract","x","borderLeftWidth","borderRightWidth","y","borderTopWidth","borderBottomWidth","oldWidth","oldHeight","width","height","scaleBy","right","bottom","widthOf","heightOf","borderWidth","br","bm","bl","mm","ml","mr","tr","tm","tl","pathframe","_pathFrame","Style","Move","Resize","Rotate","forEachLatLng","include","fn","context","latlngs","getLatLngs","isArray","reduce","array","concat","_bounds","LatLngBounds","latlng","addHooks","_frame","addTo","position","touches","centerBounding","_centerElement","cx","cy","clientX","j","clientY","Math","sqrt","sin","_vector","cos","frameBounding","framePosition","dx","dy","projected","newLatLng","rotated","_original","layerPointToLatLng","lat","lng","redraw","centerElement","targetBounding","vector","clone","rotate","_captureHandles","resize","enabled","pos","_axis","undefined","_startPoint","ctrlKey","dxy","min","abs","_startNorthWest","startPos","move","Polygon","_origin","xscale","yscale","screenX","screenY","xyscale","max","invertX","invertY","bounding","origin"],"mappings":";CAAAA,CAAA,CAAAC,KAAA,GAAA;AAAA,EACAC,OAAA,EAAA,OADA;AAAA,EAGAC,SAAA,EAAA,UAAAC,EAAA,EAAA;AAAA,GACA,OAAAA,EAAA,CAAAC,YAAA,CADA;AAAA,GAHA;AAAA,EAOAC,QAAA,EAAA,UAAAF,EAAA,EAAA;AAAA,GACA,OAAAA,EAAA,CAAAG,WAAA,CADA;AAAA,GAPA;AAAA,EAAA,C;CCAAP,CAAA,CAAAC,KAAA,CAAAO,OAAA,GAAA,EAAA,C;CCKA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAAR,CAAA,CAAAC,KAAA,CAAAO,OAAA,CAAAC,IAAA,GAAAT,CAAA,CAAAU,OAAA,CAAAC,MAAA,CAAA;AAAA,EAEAC,QAAA,EAAA,CAAAZ,CAAA,CAAAa,OAAA,CAAAC,SAAA,CAFA;AAAA,EAIAC,UAAA,EAAA,UAAAC,IAAA,EAAAC,UAAA,EAAAC,OAAA,EAAA;AAAA,GACAlB,CAAA,CAAAmB,UAAA,CAAA,IAAA,EAAAD,OAAA,EADA;AAAA,GAGA,KAAAE,KAAA,GAAAJ,IAAA,CAHA;AAAA,GAIA,KAAAK,WAAA,GAAAJ,UAAA,CAJA;AAAA,GAJA;AAAA,EAAA,CAAA,C;CAaAjB,CAAA,CAAAS,IAAA,CAAAa,WAAA,CAAA,YAAA;AAAA,EACA,KAAArB,KAAA,GAAA,EAAA,CADA;AAAA,EAAA,E;CCfA;AAAA;AAAA;AAAA,CAAAD,CAAA,CAAAC,KAAA,CAAAO,OAAA,CAAAe,QAAA,GAAAvB,CAAA,CAAAC,KAAA,CAAAO,OAAA,CAAAC,IAAA,CAAAE,MAAA,CAAA,EAEAO,OAAA,EAAA,EAFA,EAAA,CAAA,C;CCHAlB,CAAA,CAAAC,KAAA,CAAAuB,KAAA,GAAA,EAAA,C;CCGA;AAAA;AAAA;AAAA,CAAAxB,CAAA,CAAAC,KAAA,CAAAuB,KAAA,CAAAf,IAAA,GAAAT,CAAA,CAAAyB,KAAA,CAAAd,MAAA,CAAA;AAAA,EAEAe,OAAA,EAAA;AAAA,GACAC,QAAA,EAAA,IADA;AAAA,GAEAC,UAAA,EAAA,IAFA;AAAA,GAGAC,SAAA,EAAA,IAHA;AAAA,GAIAC,WAAA,EAAA,IAJA;AAAA,GAKAC,aAAA,EAAA,IALA;AAAA,GAMAC,YAAA,EAAA,IANA;AAAA,GAOAC,WAAA,EAAA,IAPA;AAAA,GAQAC,aAAA,EAAA,IARA;AAAA,GASAC,YAAA,EAAA,IATA;AAAA,GAFA;AAAA,EAcAjB,OAAA,EAAA,EACAkB,IAAA,EAAA,mBADA,EAdA;AAAA,EAkBArB,UAAA,EAAA,UAAAC,IAAA,EAAA;AAAA,GACA,KAAAI,KAAA,GAAAJ,IAAA,CADA;AAAA,GAlBA;AAAA,EAsBAqB,SAAA,EAAA,UAAAC,GAAA,EAAA;AAAA,GACA,IAAA,CAAAA,GAAA,CAAAC,OAAA,CAAA,KAAArB,OAAA,CAAAkB,IAAA,CAAA,EAAA;AAAA,IACAE,GAAA,CAAAE,UAAA,CAAA,KAAAtB,OAAA,CAAAkB,IAAA,EADA;AAAA,IADA;AAAA,GAtBA;AAAA,EA4BAK,SAAA,EAAA,YAAA;AAAA,GACA,OAAA,EACAC,IAAA,EAAA,KAAAC,UADA,EAAA,CADA;AAAA,GA5BA;AAAA,EAkCAC,YAAA,EAAA,YAAA;AAAA,GACA,OAAA,KAAAC,UAAA,CADA;AAAA,GAlCA;AAAA,EAsCAC,kBAAA,EAAA,YAAA;AAAA,GACA,OAAA,KAAAC,GAAA,CAAAC,qBAAA,EAAA,CADA;AAAA,GAtCA;AAAA,EA0CAC,SAAA,EAAA,UAAAC,EAAA,EAAA;AAAA,GACA,OAAA,KAAAC,QAAA,CAAAD,EAAA,CAAA,CADA;AAAA,GA1CA;AAAA,EA8CAE,WAAA,EAAA,UAAAF,EAAA,EAAA;AAAA,GACA,IAAAA,EAAA,EAAA;AAAA,IACA,OAAAlD,CAAA,CAAAqD,OAAA,CAAAD,WAAA,CAAA,KAAAD,QAAA,CAAAD,EAAA,CAAA,CAAA,CADA;AAAA,IAAA,MAEA;AAAA,IACA,OAAAlD,CAAA,CAAAqD,OAAA,CAAAD,WAAA,CAAA,KAAAL,GAAA,CAAA,CADA;AAAA,IAHA;AAAA,GA9CA;AAAA,EAsDAO,UAAA,EAAA,YAAA;AAAA,GACA,KAAA,IAAAC,CAAA,GAAA,CAAA,CAAA,CAAAA,CAAA,GAAAC,SAAA,CAAAC,MAAA,EAAAF,CAAA,EAAA,EAAA;AAAA,IACA,IAAA,KAAAJ,QAAA,CAAAK,SAAA,CAAAD,CAAA,CAAA,CAAA,EAAA;AAAA,KACA,KAAAJ,QAAA,CAAAK,SAAA,CAAAD,CAAA,CAAA,EAAAG,KAAA,CAAAC,OAAA,GAAA,MAAA,CADA;AAAA,KADA;AAAA,IADA;AAAA,GAtDA;AAAA,EA8DAC,KAAA,EAAA,YAAA;AAAA,GACA,IAAAxD,EAAA,GAAA,KAAA2C,GAAA,GAAA/C,CAAA,CAAAqD,OAAA,CAAAQ,MAAA,CAAA,KAAA,EAAA,kBAAA,EAAA,KAAAtB,OAAA,EAAA,CAAA,CADA;AAAA,GAEAvC,CAAA,CAAA8D,QAAA,CAAAC,EAAA,CAAA3D,EAAA,EAAA,WAAA,EAAA,KAAA4D,QAAA,EAAA,IAAA,EAFA;AAAA,GAIA,KAAAb,QAAA,GAAA,EAAA,CAJA;AAAA,GAMA;AAAA,IAAA,IAAA;AAAA,IAAA,IAAA;AAAA,IAAA,IAAA;AAAA,IAAA,IAAA;AAAA,IAAA,IAAA;AAAA,IAAA,IAAA;AAAA,IAAA,IAAA;AAAA,IAAA,IAAA;AAAA,IAAA,IAAA;AAAA,KAAAc,OAAA,CAAA,UAAAf,EAAA,EAAA;AAAA,IAEA,KAAAC,QAAA,CAAAD,EAAA,IAAAlD,CAAA,CAAAqD,OAAA,CAAAQ,MAAA,CAAA,KAAA,EAAA,YAAAX,EAAA,EAAA9C,EAAA,CAAA,CAFA;AAAA,IAGA,KAAA+C,QAAA,CAAAD,EAAA,EAAAgB,GAAA,GAAAhB,EAAA,CAHA;AAAA,IAIAlD,CAAA,CAAA8D,QAAA,CAAAC,EAAA,CAAA,KAAAZ,QAAA,CAAAD,EAAA,CAAA,EAAAlD,CAAA,CAAAmE,SAAA,CAAAC,KAAA,CAAAC,IAAA,CAAA,GAAA,CAAA,EAAA,KAAAL,QAAA,EAAA,IAAA,EAJA;AAAA,IAAA,EAMA,IANA,EANA;AAAA,GAcA,KAAAnB,UAAA,GAAA,IAAA7C,CAAA,CAAAmE,SAAA,CAAA/D,EAAA,CAAA,CAdA;AAAA,GAeA,KAAAkE,WAAA,GAAA,EAAA,CAfA;AAAA,GAgBA,KAAAC,YAAA,CAAA,KAAA,EAhBA;AAAA,GAiBA,KAAAC,cAAA,GAjBA;AAAA,GA9DA;AAAA,EAkFAC,QAAA,EAAA,YAAA;AAAA,GACA,IAAAvB,EAAA,CADA;AAAA,GAGA,IAAA,KAAAL,UAAA,EAAA;AAAA,IACA,KAAAA,UAAA,CAAA6B,OAAA,GADA;AAAA,IAHA;AAAA,GAOA,KAAAxB,EAAA,IAAA,KAAAoB,WAAA,EAAA;AAAA,IACA,KAAAA,WAAA,CAAApB,EAAA,EAAAwB,OAAA,GADA;AAAA,IAPA;AAAA,GAWA1E,CAAA,CAAA8D,QAAA,CAAAa,GAAA,CAAA,KAAA5B,GAAA,EAAA,iBAAA,EAAA/C,CAAA,CAAA8D,QAAA,CAAAc,IAAA,EAXA;AAAA,GAaA,KAAA1B,EAAA,IAAA,KAAAC,QAAA,EAAA;AAAA,IACAnD,CAAA,CAAA8D,QAAA,CAAAa,GAAA,CAAA,KAAAxB,QAAA,CAAAD,EAAA,CAAA,EAAA,iBAAA,EAAAlD,CAAA,CAAA8D,QAAA,CAAAc,IAAA,EADA;AAAA,IAbA;AAAA,GAiBA5E,CAAA,CAAAqD,OAAA,CAAAwB,MAAA,CAAA,KAAA9B,GAAA,EAjBA;AAAA,GAkBA/C,CAAA,CAAAqD,OAAA,CAAAyB,KAAA,CAAA,KAAA/B,GAAA,EAlBA;AAAA,GAoBA,OAAA,KAAAA,GAAA,CApBA;AAAA,GAlFA;AAAA,EAyGAgC,QAAA,EAAA,UAAArB,KAAA,EAAA;AAAA,GACA,IAAAR,EAAA,EAAA9C,EAAA,EAAA4E,QAAA,GAAA,KAAAC,MAAA,CADA;AAAA,GAGA,KAAA/B,EAAA,IAAA,KAAAC,QAAA,EAAA;AAAA,IACA/C,EAAA,GAAA,KAAA+C,QAAA,CAAAD,EAAA,CAAA,CADA;AAAA,IAEA9C,EAAA,CAAAsD,KAAA,CAAAC,OAAA,GAAA,OAAA,CAFA;AAAA,IAIA,IAAA,KAAAW,WAAA,CAAApB,EAAA,CAAA,EAAA;AAAA,KACA,KAAAoB,WAAA,CAAApB,EAAA,EAAAwB,OAAA,GADA;AAAA,KAEA,OAAA,KAAAJ,WAAA,CAAApB,EAAA,CAAA,CAFA;AAAA,KAJA;AAAA,IAeA;AAAA;AAAA;AAAA;AAAA,QAAAQ,KAAA,CAAAR,EAAA,CAAA,EAAA;AAAA,KACA,IAAAQ,KAAA,CAAAR,EAAA,EAAAgC,IAAA,EAAA;AAAA,MACA9E,EAAA,CAAAsD,KAAA,CAAAC,OAAA,GAAA,MAAA,CADA;AAAA,MADA;AAAA,KAKA,IAAAD,KAAA,CAAAR,EAAA,EAAAiC,SAAA,EAAA;AAAA,MACA,KAAAb,WAAA,CAAApB,EAAA,IAAA,IAAAlD,CAAA,CAAAmE,SAAA,CAAA/D,EAAA,CAAA,CADA;AAAA,MAEA,KAAAkE,WAAA,CAAApB,EAAA,EAAAkC,MAAA,GAFA;AAAA,MAGApF,CAAA,CAAA8D,QAAA,CAAAa,GAAA,CAAAvE,EAAA,EAAA,iBAAA,EAAAJ,CAAA,CAAA8D,QAAA,CAAAc,IAAA,EAHA;AAAA,MALA;AAAA,KAfA;AAAA,IAHA;AAAA,GA+BA,IAAAI,QAAA,EAAA;AAAA,IACAhF,CAAA,CAAAqD,OAAA,CAAAgC,WAAA,CAAA,KAAAtC,GAAA,EAAAiC,QAAA,CAAAM,SAAA,EADA;AAAA,IA/BA;AAAA,GAmCAtF,CAAA,CAAAqD,OAAA,CAAAkC,QAAA,CAAA,KAAAxC,GAAA,EAAAW,KAAA,CAAA4B,SAAA,EAnCA;AAAA,GAqCA,KAAAL,MAAA,GAAAvB,KAAA,CArCA;AAAA,GAuCA,KAAAc,cAAA,GAvCA;AAAA,GAyCA,KAAAtB,EAAA,IAAA,KAAAoB,WAAA,EAAA;AAAA,IACA,KAAAkB,gBAAA,CAAAtC,EAAA,EADA;AAAA,IAzCA;AAAA,GAzGA;AAAA,EAuJAuC,YAAA,EAAA,YAAA;AAAA,GACA,KAAAlB,YAAA,CAAA,KAAA,EAAAmB,KAAA,CAAA5E,SAAA,CAAA6E,KAAA,CAAAC,IAAA,CAAApC,SAAA,EAAA,CAAA,CAAA,EADA;AAAA,GAvJA;AAAA,EA2JAQ,QAAA,EAAA,UAAA6B,GAAA,EAAA;AAAA,GACA7F,CAAA,CAAA8D,QAAA,CAAAc,IAAA,CAAAiB,GAAA,EADA;AAAA,GAGA,KAAAC,IAAA,CAAA,YAAA,EAAA;AAAA,IACAC,WAAA,EAAAF,GADA;AAAA,IAEAG,MAAA,EAAAH,GAAA,CAAAI,MAAA,CAAA/B,GAFA;AAAA,IAAA,EAHA;AAAA,GAQAlE,CAAA,CAAA8D,QAAA,CACAC,EADA,CACAmC,QADA,EACAlG,CAAA,CAAAmE,SAAA,CAAAgC,IAAA,CAAAN,GAAA,CAAAO,IAAA,CADA,EACA,KAAAC,OADA,EACA,IADA,EAEAtC,EAFA,CAEAmC,QAFA,EAEAlG,CAAA,CAAAmE,SAAA,CAAAmC,GAAA,CAAAT,GAAA,CAAAO,IAAA,CAFA,EAEA,KAAAG,MAFA,EAEA,IAFA,EARA;AAAA,GAYAvG,CAAA,CAAAqD,OAAA,CAAAkC,QAAA,CAAAW,QAAA,CAAAM,IAAA,EAAA,kBAAA,EAZA;AAAA,GA3JA;AAAA,EA0KA7D,UAAA,EAAA,YAAA;AAAA,GACA,KAAA4B,YAAA,CAAA,IAAA,EADA;AAAA,GA1KA;AAAA,EA8KA8B,OAAA,EAAA,UAAAR,GAAA,EAAA;AAAA,GACA7F,CAAA,CAAA8D,QAAA,CAAAc,IAAA,CAAAiB,GAAA,EADA;AAAA,GAGA,KAAAC,IAAA,CAAA,WAAA,EAAA,EACAC,WAAA,EAAAF,GADA,EAAA,EAHA;AAAA,GA9KA;AAAA,EAsLAU,MAAA,EAAA,UAAAV,GAAA,EAAA;AAAA,GACA7F,CAAA,CAAA8D,QAAA,CAAAc,IAAA,CAAAiB,GAAA,EADA;AAAA,GAGA,SAAA3C,EAAA,IAAAlD,CAAA,CAAAmE,SAAA,CAAAgC,IAAA,EAAA;AAAA,IACAnG,CAAA,CAAA8D,QAAA,CACAa,GADA,CACAuB,QADA,EACAlG,CAAA,CAAAmE,SAAA,CAAAgC,IAAA,CAAAjD,EAAA,CADA,EACA,KAAAmD,OADA,EACA,IADA,EAEA1B,GAFA,CAEAuB,QAFA,EAEAlG,CAAA,CAAAmE,SAAA,CAAAmC,GAAA,CAAApD,EAAA,CAFA,EAEA,KAAAqD,MAFA,EAEA,IAFA,EADA;AAAA,IAHA;AAAA,GASAvG,CAAA,CAAAqD,OAAA,CAAAgC,WAAA,CAAAa,QAAA,CAAAM,IAAA,EAAA,kBAAA,EATA;AAAA,GAWA,KAAAV,IAAA,CAAA,UAAA,EAAA,EACAC,WAAA,EAAAF,GADA,EAAA,EAXA;AAAA,GAtLA;AAAA,EAsMAL,gBAAA,EAAA,UAAAtC,EAAA,EAAA;AAAA,GACA,IAAA9C,EAAA,GAAA,KAAA+C,QAAA,CAAAD,EAAA,CAAA,CADA;AAAA,GAEA,IAAAuD,IAAA,GAAArG,EAAA,CAAAsG,UAAA,EACAC,GAAA,GAAAvG,EAAA,CAAAwG,SADA,CAFA;AAAA,GAKA,IAAAxG,EAAA,CAAAsD,KAAA,CAAAmD,UAAA,EAAA;AAAA,IACAJ,IAAA,IAAAK,QAAA,CAAA1G,EAAA,CAAAsD,KAAA,CAAAmD,UAAA,CAAA,CADA;AAAA,IALA;AAAA,GASA,IAAAzG,EAAA,CAAAsD,KAAA,CAAAqD,SAAA,EAAA;AAAA,IACAJ,GAAA,IAAAG,QAAA,CAAA1G,EAAA,CAAAsD,KAAA,CAAAqD,SAAA,CAAA,CADA;AAAA,IATA;AAAA,GAaA/G,CAAA,CAAAW,MAAA,CAAAP,EAAA,CAAAsD,KAAA,EAAA;AAAA,IACA+C,IAAA,EAAA,KADA;AAAA,IACAE,GAAA,EAAA,KADA;AAAA,IAAA,EAbA;AAAA,GAiBA3G,CAAA,CAAAqD,OAAA,CAAA2D,WAAA,CAAA5G,EAAA,EAAAJ,CAAA,CAAAiH,KAAA,CAAAR,IAAA,EAAAE,GAAA,CAAA,EAjBA;AAAA,GAtMA;AAAA,EA0NApC,YAAA,EAAA,UAAA2C,WAAA,EAAAC,eAAA,EAAA;AAAA,GACA,IAAAjE,EAAA,EACAkE,eAAA,GAAApH,CAAA,CAAAqD,OAAA,CAAAD,WAAA,CAAA,KAAAL,GAAA,CADA,EAEAiD,MAFA,EAGAqB,cAHA,CADA;AAAA,GAMA,IAAAC,MAAA,GAAA,KAAAlG,KAAA,CAAAmG,SAAA,EAAA,CANA;AAAA,GAQA,IAAAC,cAAA,GAAA,KAAAC,IAAA,CAAAC,kBAAA,CAAAJ,MAAA,CAAAK,YAAA,EAAA,CAAA,EACAC,cAAA,GAAA,KAAAH,IAAA,CAAAC,kBAAA,CAAAJ,MAAA,CAAAO,YAAA,EAAA,CADA,CARA;AAAA,GAWA,IAAAC,aAAA,GAAAC,gBAAA,CAAA,KAAAhF,GAAA,CAAA,CAXA;AAAA,GAaA,IAAAoE,eAAA,IAAAA,eAAA,CAAA1D,MAAA,EAAA;AAAA,IAEA,IAAA2D,eAAA,EAAA;AAAA,KACA,KAAA,IAAA7D,CAAA,GAAA,CAAA,CAAA,CAAAA,CAAA,GAAA4D,eAAA,CAAA1D,MAAA,EAAAF,CAAA,EAAA,EAAA;AAAA,MAEAyC,MAAA,GAAA,KAAA7C,QAAA,CAAAgE,eAAA,CAAA5D,CAAA,CAAA,CAAA,CAFA;AAAA,MAGA,IAAAyC,MAAA,IAAA,CAAAqB,cAAA,GAAArH,CAAA,CAAAqD,OAAA,CAAAD,WAAA,CAAA4C,MAAA,CAAA,CAAA,EAAA;AAAA,OACAqB,cAAA,GAAAA,cAAA,CAAAW,GAAA,CAAAZ,eAAA,CAAA,CADA;AAAA,OAEApH,CAAA,CAAAqD,OAAA,CAAA2D,WAAA,CAAAhB,MAAA,EAAAqB,cAAA,CAAAY,QAAA,CAAAL,cAAA,CAAA,EAFA;AAAA,OAHA;AAAA,MADA;AAAA,KAFA;AAAA,IAbA;AAAA,GA2BA5H,CAAA,CAAAqD,OAAA,CAAA2D,WAAA,CAAA,KAAAjE,GAAA,EAAA6E,cAAA,EA3BA;AAAA,GA6BA,IAAAM,CAAA,GAAApB,QAAA,CAAAgB,aAAA,CAAAK,eAAA,IAAArB,QAAA,CAAAgB,aAAA,CAAAM,gBAAA,CAAA,EACAC,CAAA,GAAAvB,QAAA,CAAAgB,aAAA,CAAAQ,cAAA,IAAAxB,QAAA,CAAAgB,aAAA,CAAAS,iBAAA,CADA,CA7BA;AAAA,GAgCA,IAAAC,QAAA,EAAAC,SAAA,CAhCA;AAAA,GAiCA,IAAAvB,WAAA,EAAA;AAAA,IACAsB,QAAA,GAAA,KAAAzF,GAAA,CAAAxC,WAAA,CADA;AAAA,IAEAkI,SAAA,GAAA,KAAA1F,GAAA,CAAA1C,YAAA,CAFA;AAAA,IAjCA;AAAA,GAsCA,KAAA0C,GAAA,CAAAW,KAAA,CAAAgF,KAAA,GAAAlB,cAAA,CAAAU,CAAA,GAAAN,cAAA,CAAAM,CAAA,GAAAA,CAAA,GAAA,IAAA,CAtCA;AAAA,GAuCA,KAAAnF,GAAA,CAAAW,KAAA,CAAAiF,MAAA,GAAAnB,cAAA,CAAAa,CAAA,GAAAT,cAAA,CAAAS,CAAA,GAAAA,CAAA,GAAA,IAAA,CAvCA;AAAA,GAyCA,IAAAnB,WAAA,EAAA;AAAA,IAEA,KAAAhE,EAAA,IAAA,KAAAC,QAAA,EAAA;AAAA,KACA6C,MAAA,GAAA,KAAA7C,QAAA,CAAAD,EAAA,CAAA,CADA;AAAA,KAEAmE,cAAA,GAAArH,CAAA,CAAAqD,OAAA,CAAAD,WAAA,CAAA4C,MAAA,CAAA,CAFA;AAAA,KAIA,IAAAqB,cAAA,EAAA;AAAA,MACArH,CAAA,CAAAqD,OAAA,CAAA2D,WAAA,CAAAhB,MAAA,EAAAqB,cAAA,CAAAuB,OAAA,CAAA5I,CAAA,CAAAiH,KAAA,CACA,KAAAlE,GAAA,CAAAxC,WAAA,GAAAiI,QADA,EAEA,KAAAzF,GAAA,CAAA1C,YAAA,GAAAoI,SAFA,CAAA,CAAA,EADA;AAAA,MAJA;AAAA,KAFA;AAAA,IAzCA;AAAA,GAwDA,KAAAjB,cAAA,GAAAA,cAAA,CAxDA;AAAA,GAyDA,KAAAI,cAAA,GAAAA,cAAA,CAzDA;AAAA,GA1NA;AAAA,EAsRApD,cAAA,EAAA,YAAA;AAAA,GACA,IAAApE,EAAA,EAAA0H,aAAA,EAAAe,KAAA,EAAAC,MAAA,EAAArC,IAAA,EAAAE,GAAA,CADA;AAAA,GAEA,IAAAoC,OAAA,GAAA/I,CAAA,CAAAC,KAAA,CAAAK,QAAA,EAAA0I,QAAA,GAAAhJ,CAAA,CAAAC,KAAA,CAAAE,SAAA,CAFA;AAAA,GAIA2H,aAAA,GAAAC,gBAAA,CAAA,KAAAhF,GAAA,CAAA,CAJA;AAAA,GAMA,IAAAkG,WAAA,GAAA;AAAA,IACAH,MAAA,EAAA,mBADA;AAAA,IAEArC,IAAA,EAAA,iBAFA;AAAA,IAGAoC,KAAA,EAAA,kBAHA;AAAA,IAIAlC,GAAA,EAAA,gBAJA;AAAA,IAAA,CANA;AAAA,GAaA,SAAAzD,EAAA,IAAA+F,WAAA,EAAA;AAAA,IACAA,WAAA,CAAA/F,EAAA,IAAA4D,QAAA,CAAAgB,aAAA,CAAAmB,WAAA,CAAA/F,EAAA,CAAA,CAAA,IAAA,CAAA,CADA;AAAA,IAbA;AAAA,GAiBA9C,EAAA,GAAA,KAAA+C,QAAA,CAAA+F,EAAA,CAjBA;AAAA,GAmBAL,KAAA,GAAA,CAAA,CAAAE,OAAA,CAAA3I,EAAA,IAAA,CAAA,CAAA,GAAA6I,WAAA,CAAAJ,KAAA,GAAA,IAAA,CAnBA;AAAA,GAoBAC,MAAA,GAAA,CAAA,CAAAE,QAAA,CAAA5I,EAAA,IAAA,CAAA,CAAA,GAAA6I,WAAA,CAAAH,MAAA,GAAA,IAAA,CApBA;AAAA,GAsBA9I,CAAA,CAAAW,MAAA,CAAAP,EAAA,CAAAsD,KAAA,EAAA;AAAA,IACAmF,KAAA,EAAAA,KADA;AAAA,IAEAC,MAAA,EAAAA,MAFA;AAAA,IAAA,EAtBA;AAAA,GA2BA1I,EAAA,GAAA,KAAA+C,QAAA,CAAAgG,EAAA,CA3BA;AAAA,GA4BA1C,IAAA,GAAA,CAAA,CAAAsC,OAAA,CAAA3I,EAAA,IAAA,CAAA,CAAA,GAAA,IAAA,CA5BA;AAAA,GA6BA0I,MAAA,GAAA,CAAA,CAAAE,QAAA,CAAA5I,EAAA,IAAA,CAAA,CAAA,GAAA6I,WAAA,CAAAH,MAAA,GAAA,IAAA,CA7BA;AAAA,GA+BA9I,CAAA,CAAAW,MAAA,CAAAP,EAAA,CAAAsD,KAAA,EAAA;AAAA,IACA+C,IAAA,EAAA,KADA;AAAA,IAEA,eAAAA,IAFA;AAAA,IAGAqC,MAAA,EAAAA,MAHA;AAAA,IAAA,EA/BA;AAAA,GAqCA1I,EAAA,GAAA,KAAA+C,QAAA,CAAAiG,EAAA,CArCA;AAAA,GAsCA3C,IAAA,GAAA,CAAA,CAAAsC,OAAA,CAAA3I,EAAA,IAAA,CAAA,CAAA,GAAA6I,WAAA,CAAAxC,IAAA,GAAA,IAAA,CAtCA;AAAA,GAuCAqC,MAAA,GAAA,CAAA,CAAAE,QAAA,CAAA5I,EAAA,IAAA,CAAA,CAAA,GAAA6I,WAAA,CAAAH,MAAA,GAAA,IAAA,CAvCA;AAAA,GAwCA9I,CAAA,CAAAW,MAAA,CAAAP,EAAA,CAAAsD,KAAA,EAAA;AAAA,IACA+C,IAAA,EAAAA,IADA;AAAA,IAEAqC,MAAA,EAAAA,MAFA;AAAA,IAAA,EAxCA;AAAA,GA6CA1I,EAAA,GAAA,KAAA+C,QAAA,CAAAkG,EAAA,CA7CA;AAAA,GA8CA5C,IAAA,GAAA,CAAA,CAAAsC,OAAA,CAAA3I,EAAA,IAAA,CAAA,CAAA,GAAA,IAAA,CA9CA;AAAA,GA+CAuG,GAAA,GAAA,CAAA,CAAAqC,QAAA,CAAA5I,EAAA,IAAA,CAAA,CAAA,GAAA,IAAA,CA/CA;AAAA,GAgDAJ,CAAA,CAAAW,MAAA,CAAAP,EAAA,CAAAsD,KAAA,EAAA;AAAA,IACAiD,GAAA,EAAA,KADA;AAAA,IAEAF,IAAA,EAAA,KAFA;AAAA,IAGA,eAAAA,IAHA;AAAA,IAIA,cAAAE,GAJA;AAAA,IAAA,EAhDA;AAAA,GAuDAvG,EAAA,GAAA,KAAA+C,QAAA,CAAAmG,EAAA,CAvDA;AAAA,GAwDA3C,GAAA,GAAA,CAAA,CAAAqC,QAAA,CAAA5I,EAAA,IAAA,CAAA,CAAA,GAAA,IAAA,CAxDA;AAAA,GAyDAqG,IAAA,GAAA,CAAA,CAAAsC,OAAA,CAAA3I,EAAA,IAAA,CAAA,CAAA,GAAA6I,WAAA,CAAAxC,IAAA,GAAA,IAAA,CAzDA;AAAA,GA0DAzG,CAAA,CAAAW,MAAA,CAAAP,EAAA,CAAAsD,KAAA,EAAA;AAAA,IACAiD,GAAA,EAAA,KADA;AAAA,IAEA,cAAAA,GAFA;AAAA,IAGAF,IAAA,EAAAA,IAHA;AAAA,IAAA,EA1DA;AAAA,GAgEArG,EAAA,GAAA,KAAA+C,QAAA,CAAAoG,EAAA,CAhEA;AAAA,GAiEAV,KAAA,GAAA,CAAA,CAAAE,OAAA,CAAA3I,EAAA,IAAA,CAAA,CAAA,GAAA6I,WAAA,CAAAJ,KAAA,GAAA,IAAA,CAjEA;AAAA,GAkEAlC,GAAA,GAAA,CAAA,CAAAqC,QAAA,CAAA5I,EAAA,IAAA,CAAA,CAAA,GAAA,IAAA,CAlEA;AAAA,GAmEAJ,CAAA,CAAAW,MAAA,CAAAP,EAAA,CAAAsD,KAAA,EAAA;AAAA,IACAmF,KAAA,EAAAA,KADA;AAAA,IAEAlC,GAAA,EAAA,KAFA;AAAA,IAGA,cAAAA,GAHA;AAAA,IAAA,EAnEA;AAAA,GAyEAvG,EAAA,GAAA,KAAA+C,QAAA,CAAAqG,EAAA,CAzEA;AAAA,GA0EAX,KAAA,GAAA,CAAA,CAAAE,OAAA,CAAA3I,EAAA,IAAA,CAAA,CAAA,GAAA6I,WAAA,CAAAJ,KAAA,GAAA,IAAA,CA1EA;AAAA,GA2EAlC,GAAA,GAAA,CAAA,CAAAqC,QAAA,CAAA5I,EAAA,IAAA,CAAA,CAAA,GAAA6I,WAAA,CAAAtC,GAAA,GAAA,IAAA,CA3EA;AAAA,GA4EA3G,CAAA,CAAAW,MAAA,CAAAP,EAAA,CAAAsD,KAAA,EAAA;AAAA,IACAmF,KAAA,EAAAA,KADA;AAAA,IAEAlC,GAAA,EAAAA,GAFA;AAAA,IAAA,EA5EA;AAAA,GAiFAvG,EAAA,GAAA,KAAA+C,QAAA,CAAAsG,EAAA,CAjFA;AAAA,GAkFA9C,GAAA,GAAA,CAAA,CAAAqC,QAAA,CAAA5I,EAAA,IAAA,CAAA,CAAA,GAAA6I,WAAA,CAAAtC,GAAA,GAAA,IAAA,CAlFA;AAAA,GAmFAF,IAAA,GAAA,CAAA,CAAAsC,OAAA,CAAA3I,EAAA,IAAA,CAAA,CAAA,GAAA,IAAA,CAnFA;AAAA,GAoFAJ,CAAA,CAAAW,MAAA,CAAAP,EAAA,CAAAsD,KAAA,EAAA;AAAA,IACA+C,IAAA,EAAA,KADA;AAAA,IAEA,eAAAA,IAFA;AAAA,IAGAE,GAAA,EAAAA,GAHA;AAAA,IAAA,EApFA;AAAA,GA0FAvG,EAAA,GAAA,KAAA+C,QAAA,CAAAuG,EAAA,CA1FA;AAAA,GA2FA/C,GAAA,GAAA,CAAA,CAAAqC,QAAA,CAAA5I,EAAA,IAAA,CAAA,CAAA,GAAA6I,WAAA,CAAAtC,GAAA,GAAA,IAAA,CA3FA;AAAA,GA4FAF,IAAA,GAAA,CAAA,CAAAsC,OAAA,CAAA3I,EAAA,IAAA,CAAA,CAAA,GAAA6I,WAAA,CAAAxC,IAAA,GAAA,IAAA,CA5FA;AAAA,GA6FAzG,CAAA,CAAAW,MAAA,CAAAP,EAAA,CAAAsD,KAAA,EAAA;AAAA,IACA+C,IAAA,EAAAA,IADA;AAAA,IAEAE,GAAA,EAAAA,GAFA;AAAA,IAAA,EA7FA;AAAA,GAtRA;AAAA,EAAA,CAAA,C;CA0XA3G,CAAA,CAAAC,KAAA,CAAAuB,KAAA,CAAAR,IAAA,GAAA,SAAA2I,SAAA,CAAA3I,IAAA,EAAA;AAAA,EACA,IAAAA,IAAA,IAAAA,IAAA,CAAA4I,UAAA,EAAA;AAAA,GACA,OAAA5I,IAAA,CAAA4I,UAAA,CADA;AAAA,GADA;AAAA,EAKA,OAAA5I,IAAA,CAAA4I,UAAA,GAAA,IAAA5J,CAAA,CAAAC,KAAA,CAAAuB,KAAA,CAAAf,IAAA,CAAAO,IAAA,CAAA,CALA;AAAA,EAAA,C;CCzXA;AAAA;AAAA;AAAA,CAAAhB,CAAA,CAAAC,KAAA,CAAAuB,KAAA,CAAAqI,KAAA,GAAA,EAAA,C;CAIA7J,CAAA,CAAAC,KAAA,CAAAuB,KAAA,CAAAqI,KAAA,CAAAC,IAAA,GAAA;AAAA,EACAxE,SAAA,EAAA,uBADA;AAAA,EAGAoE,EAAA,EAAA,EACAxE,IAAA,EAAA,IADA,EAHA;AAAA,EAOAsE,EAAA,EAAA,EACAtE,IAAA,EAAA,IADA,EAPA;AAAA,EAWAmE,EAAA,EAAA,EACAnE,IAAA,EAAA,IADA,EAXA;AAAA,EAeAkE,EAAA,EAAA,EACAlE,IAAA,EAAA,IADA,EAfA;AAAA,EAmBAgE,EAAA,EAAA,EACAhE,IAAA,EAAA,IADA,EAnBA;AAAA,EAAA,C;CAwBAlF,CAAA,CAAAC,KAAA,CAAAuB,KAAA,CAAAqI,KAAA,CAAAE,MAAA,GAAA;AAAA,EACAzE,SAAA,EAAA,yBADA;AAAA,EAEA+D,EAAA,EAAA,EACAnE,IAAA,EAAA,IADA,EAFA;AAAA,EAAA,C;CAOAlF,CAAA,CAAAC,KAAA,CAAAuB,KAAA,CAAAqI,KAAA,CAAAG,MAAA,GAAA;AAAA,EACA1E,SAAA,EAAA,yBADA;AAAA,EAEAmE,EAAA,EAAA,EACAvE,IAAA,EAAA,IADA,EAFA;AAAA,EAMAoE,EAAA,EAAA,EACApE,IAAA,EAAA,IADA,EANA;AAAA,EAUAqE,EAAA,EAAA,EACArE,IAAA,EAAA,IADA,EAVA;AAAA,EAcAiE,EAAA,EAAA,EACAjE,IAAA,EAAA,IADA,EAdA;AAAA,EAkBAmE,EAAA,EAAA,EACAlE,SAAA,EAAA,IADA,EAlBA;AAAA,EAAA,C;CCvCA,IAAA,CAAAnF,CAAA,CAAAuB,QAAA,CAAAT,SAAA,CAAAmJ,aAAA,EAAA;AAAA,EACAjK,CAAA,CAAAuB,QAAA,CAAA2I,OAAA,CAAA;AAAA,GAEAD,aAAA,EAAA,UAAAE,EAAA,EAAAC,OAAA,EAAA;AAAA,IACA,IAAAC,OAAA,GAAA,KAAAC,UAAA,EAAA,CADA;AAAA,IAGA,IAAA,CAAAD,OAAA,CAAA5G,MAAA,EAAA;AAAA,KACA,OADA;AAAA,KAHA;AAAA,IAOA,IAAAiC,KAAA,CAAA6E,OAAA,CAAAF,OAAA,CAAA,CAAA,CAAA,CAAA,EAAA;AAAA,KAGA;AAAA,KAAAA,OAAA,GAAAA,OAAA,CAAAG,MAAA,CAAA,UAAAC,KAAA,EAAAJ,OAAA,EAAA;AAAA,MACA,OAAAI,KAAA,CAAAC,MAAA,CAAAL,OAAA,CAAA,CADA;AAAA,MAAA,EAEA,EAFA,CAAA,CAHA;AAAA,KAPA;AAAA,IAeAA,OAAA,CAAApG,OAAA,CAAAkG,EAAA,EAAAC,OAAA,EAfA;AAAA,IAFA;AAAA,GAAA,EADA;AAAA,E;CAuBA,IAAA,CAAApK,CAAA,CAAAuB,QAAA,CAAAT,SAAA,CAAA2E,YAAA,EAAA;AAAA,EACAzF,CAAA,CAAAuB,QAAA,CAAA2I,OAAA,CAAA;AAAA,GAEAzE,YAAA,EAAA,YAAA;AAAA,IACA,IAAA6B,MAAA,GAAA,KAAAqD,OAAA,GAAA,IAAA3K,CAAA,CAAA4K,YAAA,EAAA,CADA;AAAA,IAGA,KAAAX,aAAA,CAAA,UAAAY,MAAA,EAAA;AAAA,KACAvD,MAAA,CAAA3G,MAAA,CAAAkK,MAAA,EADA;AAAA,KAAA,EAHA;AAAA,IAFA;AAAA,GAAA,EADA;AAAA,E;CChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAA7K,CAAA,CAAAC,KAAA,CAAAO,OAAA,CAAAe,QAAA,CAAAyI,MAAA,GAAAhK,CAAA,CAAAC,KAAA,CAAAO,OAAA,CAAAe,QAAA,CAAAZ,MAAA,CAAA;AAAA,EAEAmK,QAAA,EAAA,YAAA;AAAA,GACA,KAAAC,MAAA,GAAA/K,CAAA,CAAAC,KAAA,CAAAuB,KAAA,CAAAR,IAAA,CAAA,KAAAI,KAAA,CAAA,CADA;AAAA,GAEA,KAAA2J,MAAA,CAAAC,KAAA,CAAA,KAAA5J,KAAA,CAAAqG,IAAA,EAFA;AAAA,GAIA,KAAAsD,MAAA,CAAAhG,QAAA,CAAA,KAAA1D,WAAA,EAJA;AAAA,GAMA,KAAA0J,MAAA,CAAAhH,EAAA,CAAA,YAAA,EAAA,KAAAC,QAAA,EAAA,IAAA,EANA;AAAA,GAFA;AAAA,EAWAuC,MAAA,EAAA,YAAA;AAAA,GACA,KAAAwE,MAAA,CACApG,GADA,CACA,WADA,EACA,KAAA0B,OADA,EACA,IADA,EAEA1B,GAFA,CAEA,UAFA,EAEA,KAAA4B,MAFA,EAEA,IAFA,EADA;AAAA,GAXA;AAAA,EAiBAF,OAAA,EAAA,UAAAR,GAAA,EAAA;AAAA,GACA,IAAAoF,QAAA,GAAApF,GAAA,CAAAE,WAAA,CAAAmF,OAAA,GAAArF,GAAA,CAAAE,WAAA,CAAAmF,OAAA,CAAA,CAAA,CAAA,GAAArF,GAAA,CAAAE,WAAA,CADA;AAAA,GAGA,IAAAoF,cAAA,GAAA,KAAAC,cAAA,CAAApI,qBAAA,EAAA,CAHA;AAAA,GAKA,IAAAqI,EAAA,GAAAF,cAAA,CAAA1E,IAAA,GAAA0E,cAAA,CAAAzC,KAAA,GAAA,CAAA,EACA4C,EAAA,GAAAH,cAAA,CAAAxE,GAAA,GAAAwE,cAAA,CAAAxC,MAAA,GAAA,CADA,CALA;AAAA,GAQA,IAAApF,CAAA,GAAA0H,QAAA,CAAAM,OAAA,GAAAF,EAAA,EACAG,CAAA,GAAAP,QAAA,CAAAQ,OAAA,GAAAH,EADA,CARA;AAAA,GAWA,IAAA7H,MAAA,GAAAiI,IAAA,CAAAC,IAAA,CAAApI,CAAA,GAAAA,CAAA,GAAAiI,CAAA,GAAAA,CAAA,CAAA,CAXA;AAAA,GAcA;AAAA,OAAAI,GAAA,GAAA,MAAAC,OAAA,CAAAtI,CAAA,GAAAiI,CAAA,GAAA,KAAAK,OAAA,CAAAL,CAAA,GAAAjI,CAAA,CAAA,GAAAE,MAAA,CAdA;AAAA,GAiBA;AAAA,OAAAqI,GAAA,GAAA,MAAAD,OAAA,CAAAtI,CAAA,GAAAA,CAAA,GAAA,KAAAsI,OAAA,CAAAL,CAAA,GAAAA,CAAA,CAAA,GAAA/H,MAAA,CAjBA;AAAA,GAmBA,IAAAsI,aAAA,GAAA,KAAAhB,MAAA,CAAAjI,kBAAA,EAAA,EACAkJ,aAAA,GAAA,KAAAjB,MAAA,CAAA3H,WAAA,EADA,CAnBA;AAAA,GAsBAiI,EAAA,GAAAA,EAAA,GAAAU,aAAA,CAAAtF,IAAA,GAAAuF,aAAA,CAAA9D,CAAA,CAtBA;AAAA,GAuBAoD,EAAA,GAAAA,EAAA,GAAAS,aAAA,CAAApF,GAAA,GAAAqF,aAAA,CAAA3D,CAAA,CAvBA;AAAA,GAyBA,IAAA4D,EAAA,GAAAZ,EAAA,GAAA,KAAAS,GAAA,CAAA,GAAAR,EAAA,GAAAM,GAAA,CAzBA;AAAA,GA0BA,IAAAM,EAAA,GAAAZ,EAAA,GAAA,KAAAQ,GAAA,CAAA,GAAAT,EAAA,GAAAO,GAAA,CA1BA;AAAA,GA4BA,IAAAO,SAAA,EAAAC,SAAA,EAAAC,OAAA,GAAArM,CAAA,CAAAiH,KAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CA5BA;AAAA,GA8BA,KAAA7F,KAAA,CAAA6I,aAAA,CAAA,UAAAY,MAAA,EAAA;AAAA,IACAsB,SAAA,GAAA,KAAA/K,KAAA,CAAAqG,IAAA,CAAAC,kBAAA,CAAAmD,MAAA,CAAAyB,SAAA,CAAA,CADA;AAAA,IAGAD,OAAA,CAAAnE,CAAA,GAAAiE,SAAA,CAAAjE,CAAA,GAAA4D,GAAA,GAAAK,SAAA,CAAA9D,CAAA,GAAAuD,GAAA,GAAAK,EAAA,CAHA;AAAA,IAIAI,OAAA,CAAAhE,CAAA,GAAA8D,SAAA,CAAAjE,CAAA,GAAA0D,GAAA,GAAAO,SAAA,CAAA9D,CAAA,GAAAyD,GAAA,GAAAI,EAAA,CAJA;AAAA,IAMAE,SAAA,GAAA,KAAAhL,KAAA,CAAAqG,IAAA,CAAA8E,kBAAA,CAAAF,OAAA,CAAA,CANA;AAAA,IAOAxB,MAAA,CAAA2B,GAAA,GAAAJ,SAAA,CAAAI,GAAA,CAPA;AAAA,IAQA3B,MAAA,CAAA4B,GAAA,GAAAL,SAAA,CAAAK,GAAA,CARA;AAAA,IAAA,EASA,IATA,EA9BA;AAAA,GAyCA,KAAArL,KAAA,CAAAqE,YAAA,GAzCA;AAAA,GA0CA,KAAAsF,MAAA,CAAAtF,YAAA,CAAAzF,CAAA,CAAAC,KAAA,CAAAuB,KAAA,CAAAf,IAAA,CAAAsB,aAAA,EA1CA;AAAA,GA2CA,KAAAX,KAAA,CAAAsL,MAAA,GA3CA;AAAA,GAjBA;AAAA,EA+DA1I,QAAA,EAAA,UAAA6B,GAAA,EAAA;AAAA,GACA,IAAA,CAAAA,GAAA,CAAAG,MAAA,IAAAH,GAAA,CAAAG,MAAA,KAAAhG,CAAA,CAAAC,KAAA,CAAAuB,KAAA,CAAAf,IAAA,CAAAsB,aAAA,EAAA;AAAA,IACA,OADA;AAAA,IADA;AAAA,GAKA,IAAA4K,aAAA,GAAA,KAAAvB,cAAA,GAAA,KAAAL,MAAA,CAAA9H,SAAA,CAAAjD,CAAA,CAAAC,KAAA,CAAAuB,KAAA,CAAAf,IAAA,CAAAsB,aAAA,CAAA,CALA;AAAA,GAOA,IAAAoJ,cAAA,GAAAwB,aAAA,CAAA3J,qBAAA,EAAA,EACA4J,cAAA,GAAA/G,GAAA,CAAAE,WAAA,CAAAE,MAAA,CAAAjD,qBAAA,EADA,CAPA;AAAA,GAUA,IAAA6J,MAAA,GAAA,KAAAhB,OAAA,GAAA;AAAA,IACAtI,CAAA,EAAAqJ,cAAA,CAAAnG,IAAA,GAAAmG,cAAA,CAAAlE,KAAA,GAAA,CAAA,GAAA,CAAAyC,cAAA,CAAA1E,IAAA,GAAA0E,cAAA,CAAAzC,KAAA,GAAA,CAAA,CADA;AAAA,IAEA8C,CAAA,EAAAoB,cAAA,CAAAjG,GAAA,GAAAiG,cAAA,CAAAjE,MAAA,GAAA,CAAA,GAAA,CAAAwC,cAAA,CAAAxE,GAAA,GAAAwE,cAAA,CAAAxC,MAAA,GAAA,CAAA,CAFA;AAAA,IAAA,CAVA;AAAA,GAeAkE,MAAA,CAAApJ,MAAA,GAAAiI,IAAA,CAAAC,IAAA,CAAAkB,MAAA,CAAAtJ,CAAA,GAAAsJ,MAAA,CAAAtJ,CAAA,GAAAsJ,MAAA,CAAArB,CAAA,GAAAqB,MAAA,CAAArB,CAAA,CAAA,CAfA;AAAA,GAiBAqB,MAAA,CAAAtJ,CAAA,GAAAsJ,MAAA,CAAAtJ,CAAA,GAAAsJ,MAAA,CAAApJ,MAAA,CAjBA;AAAA,GAkBAoJ,MAAA,CAAArB,CAAA,GAAAqB,MAAA,CAAArB,CAAA,GAAAqB,MAAA,CAAApJ,MAAA,CAlBA;AAAA,GAoBA,KAAArC,KAAA,CAAA6I,aAAA,CAAA,UAAAY,MAAA,EAAA;AAAA,IACAA,MAAA,CAAAyB,SAAA,GAAAzB,MAAA,CAAAiC,KAAA,EAAA,CADA;AAAA,IAAA,EApBA;AAAA,GAwBA,KAAA/B,MAAA,CACAhH,EADA,CACA,WADA,EACA,KAAAsC,OADA,EACA,IADA,EAEAtC,EAFA,CAEA,UAFA,EAEA,KAAAwC,MAFA,EAEA,IAFA,EAxBA;AAAA,GA/DA;AAAA,EAAA,CAAA,C;CA8FAvG,CAAA,CAAAuB,QAAA,CAAAD,WAAA,CAAA,YAAA;AAAA,EACA,KAAArB,KAAA,CAAA8M,MAAA,GAAA,IAAA/M,CAAA,CAAAC,KAAA,CAAAO,OAAA,CAAAe,QAAA,CAAAyI,MAAA,CAAA,IAAA,EAAAhK,CAAA,CAAAC,KAAA,CAAAuB,KAAA,CAAAqI,KAAA,CAAAG,MAAA,CAAA,CADA;AAAA,EAAA,E;CC7FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAAhK,CAAA,CAAAC,KAAA,CAAAO,OAAA,CAAAe,QAAA,CAAAuI,IAAA,GAAA9J,CAAA,CAAAC,KAAA,CAAAO,OAAA,CAAAe,QAAA,CAAAZ,MAAA,CAAA;AAAA,EAEAmK,QAAA,EAAA,YAAA;AAAA,GACA,KAAAC,MAAA,GAAA/K,CAAA,CAAAC,KAAA,CAAAuB,KAAA,CAAAR,IAAA,CAAA,KAAAI,KAAA,EAAA4J,KAAA,CAAA,KAAA5J,KAAA,CAAAqG,IAAA,CAAA,CADA;AAAA,GAGA,KAAAuF,eAAA,GAAA,IAAA,CAHA;AAAA,GAIA,IAAA/M,KAAA,GAAA,KAAAmB,KAAA,CAAAnB,KAAA,CAJA;AAAA,GAMA,IAAAA,KAAA,EAAA;AAAA,IACA,IAAAA,KAAA,CAAAgN,MAAA,IAAAhN,KAAA,CAAAgN,MAAA,CAAAC,OAAA,EAAA,EAAA;AAAA,KACA,KAAAF,eAAA,GAAA,KAAA,CADA;AAAA,KAAA,MAEA,IAAA/M,KAAA,CAAA8M,MAAA,IAAA9M,KAAA,CAAA8M,MAAA,CAAAG,OAAA,EAAA,EAAA;AAAA,KACA,KAAAF,eAAA,GAAA,KAAA,CADA;AAAA,KAHA;AAAA,IANA;AAAA,GAeA,IAAA,KAAAA,eAAA,EAAA;AAAA,IACA,KAAAjC,MAAA,CAAAhG,QAAA,CAAA,KAAA1D,WAAA,EADA;AAAA,IAfA;AAAA,GAmBA,KAAA0J,MAAA,CAAAhH,EAAA,CAAA,YAAA,EAAA,KAAAC,QAAA,EAAA,IAAA,EAnBA;AAAA,GAFA;AAAA,EAwBAuC,MAAA,EAAA,YAAA;AAAA,GACA,KAAAwE,MAAA,CACApG,GADA,CACA,WADA,EACA,KAAA0B,OADA,EACA,IADA,EAEA1B,GAFA,CAEA,UAFA,EAEA,KAAA4B,MAFA,EADA;AAAA,GAxBA;AAAA,EA8BAF,OAAA,EAAA,UAAAR,GAAA,EAAA;AAAA,GACA,IAAAE,WAAA,GAAAF,GAAA,CAAAE,WAAA,CADA;AAAA,GAEA,IAAAoH,GAAA,GAAApH,WAAA,CAAAmF,OAAA,IAAAnF,WAAA,CAAAmF,OAAA,CAAA,CAAA,CAAA,GAAAnF,WAAA,CAAAmF,OAAA,CAAA,CAAA,CAAA,GAAAnF,WAAA,CAFA;AAAA,GAIA,IAAAkG,EAAA,GAAA,CAAA,EAAAC,EAAA,GAAA,CAAA,CAJA;AAAA,GAMA,IAAA,KAAAkB,KAAA,KAAAC,SAAA,EAAA;AAAA,IACApB,EAAA,GAAAkB,GAAA,CAAA5B,OAAA,GAAA,KAAA+B,WAAA,CAAApF,CAAA,CADA;AAAA,IAEAgE,EAAA,GAAAiB,GAAA,CAAA1B,OAAA,GAAA,KAAA6B,WAAA,CAAAjF,CAAA,CAFA;AAAA,IAIA,IAAAtC,WAAA,CAAAwH,OAAA,EAAA;AAAA,KACA,IAAAC,GAAA,GAAA9B,IAAA,CAAA+B,GAAA,CAAA/B,IAAA,CAAAgC,GAAA,CAAAzB,EAAA,CAAA,EAAAP,IAAA,CAAAgC,GAAA,CAAAxB,EAAA,CAAA,CAAA,CADA;AAAA,KAGAD,EAAA,GAAAA,EAAA,IAAA,CAAA,GAAAuB,GAAA,GAAA,CAAAA,GAAA,CAHA;AAAA,KAIAtB,EAAA,GAAAA,EAAA,IAAA,CAAA,GAAAsB,GAAA,GAAA,CAAAA,GAAA,CAJA;AAAA,KAJA;AAAA,IAAA,MAUA;AAAA,IACA,IAAA,KAAAJ,KAAA,KAAA,GAAA,EAAA;AAAA,KACAnB,EAAA,GAAAkB,GAAA,CAAA5B,OAAA,GAAA,KAAA+B,WAAA,CAAApF,CAAA,CADA;AAAA,KAAA,MAEA,IAAA,KAAAkF,KAAA,KAAA,GAAA,EAAA;AAAA,KACAlB,EAAA,GAAAiB,GAAA,CAAA1B,OAAA,GAAA,KAAA6B,WAAA,CAAAjF,CAAA,CADA;AAAA,KAHA;AAAA,IAhBA;AAAA,GAwBA,IAAA4D,EAAA,KAAA,CAAA,IAAAC,EAAA,KAAA,CAAA,EAAA;AAAA,IACA,OADA;AAAA,IAxBA;AAAA,GA4BA,IAAAW,MAAA,GAAA7M,CAAA,CAAAiH,KAAA,CAAAgF,EAAA,EAAAC,EAAA,CAAA,EAAAC,SAAA,EAAAC,SAAA,CA5BA;AAAA,GA8BA,KAAAhL,KAAA,CAAA6I,aAAA,CAAA,UAAAY,MAAA,EAAA;AAAA,IACAsB,SAAA,GAAA,KAAA/K,KAAA,CAAAqG,IAAA,CAAAC,kBAAA,CAAAmD,MAAA,CAAAyB,SAAA,CAAA,CADA;AAAA,IAEAH,SAAA,GAAAA,SAAA,CAAAnE,GAAA,CAAA6E,MAAA,CAAA,CAFA;AAAA,IAGAT,SAAA,GAAA,KAAAhL,KAAA,CAAAqG,IAAA,CAAA8E,kBAAA,CAAAJ,SAAA,CAAA,CAHA;AAAA,IAIAtB,MAAA,CAAA2B,GAAA,GAAAJ,SAAA,CAAAI,GAAA,CAJA;AAAA,IAKA3B,MAAA,CAAA4B,GAAA,GAAAL,SAAA,CAAAK,GAAA,CALA;AAAA,IAAA,EAMA,IANA,EA9BA;AAAA,GAsCA,KAAArL,KAAA,CAAAqE,YAAA,GAtCA;AAAA,GAuCA,KAAAsF,MAAA,CAAAtF,YAAA,GAvCA;AAAA,GAwCA,KAAArE,KAAA,CAAAsL,MAAA,GAxCA;AAAA,GA9BA;AAAA,EA0EA1I,QAAA,EAAA,UAAA6B,GAAA,EAAA;AAAA,GACA,KAAA8H,eAAA,GAAA,KAAAvM,KAAA,CAAAmG,SAAA,GAAAM,YAAA,EAAA,CADA;AAAA,GAEA,IAAA9B,WAAA,GAAAF,GAAA,CAAAE,WAAA,CAFA;AAAA,GAGA,IAAA6H,QAAA,GAAA7H,WAAA,CAAAmF,OAAA,IAAAnF,WAAA,CAAAmF,OAAA,CAAA,CAAA,CAAA,GAAAnF,WAAA,CAAAmF,OAAA,CAAA,CAAA,CAAA,GAAAnF,WAAA,CAHA;AAAA,GAKA,KAAAuH,WAAA,GAAAtN,CAAA,CAAAiH,KAAA,CAAA2G,QAAA,CAAArC,OAAA,EAAAqC,QAAA,CAAAnC,OAAA,CAAA,CALA;AAAA,GAOA,KAAArK,KAAA,CAAA6I,aAAA,CAAA,UAAAY,MAAA,EAAA;AAAA,IACAA,MAAA,CAAAyB,SAAA,GAAAzB,MAAA,CAAAiC,KAAA,EAAA,CADA;AAAA,IAAA,EAPA;AAAA,GAWA,IAAA,KAAAE,eAAA,EAAA;AAAA,IACA,QAAAnH,GAAA,CAAAG,MAAA;AAAA,IACA,KAAAhG,CAAA,CAAAC,KAAA,CAAAuB,KAAA,CAAAf,IAAA,CAAAmB,UAAA,CADA;AAAA,IAEA,KAAA5B,CAAA,CAAAC,KAAA,CAAAuB,KAAA,CAAAf,IAAA,CAAAyB,aAAA;AAAA,KACA,KAAAkL,KAAA,GAAA,GAAA,CADA;AAAA,KAEA,MAJA;AAAA,IAMA,KAAApN,CAAA,CAAAC,KAAA,CAAAuB,KAAA,CAAAf,IAAA,CAAAqB,WAAA,CANA;AAAA,IAOA,KAAA9B,CAAA,CAAAC,KAAA,CAAAuB,KAAA,CAAAf,IAAA,CAAAuB,YAAA;AAAA,KACA,KAAAoL,KAAA,GAAA,GAAA,CADA;AAAA,KAEA,MATA;AAAA,IAWA;AAAA,KACA,OAAA,KAAAA,KAAA,CAZA;AAAA,KADA;AAAA,IAXA;AAAA,GA4BA,IAAA,KAAAJ,eAAA,IAAA,CAAAnH,GAAA,CAAAG,MAAA,EAAA;AAAA,IACA,KAAA+E,MAAA,CACAhH,EADA,CACA,WADA,EACA,KAAAsC,OADA,EACA,IADA,EAEAtC,EAFA,CAEA,UAFA,EAEA,KAAAwC,MAFA,EAEA,IAFA,EADA;AAAA,IA5BA;AAAA,GA1EA;AAAA,EAAA,CAAA,C;CA+GAvG,CAAA,CAAAuB,QAAA,CAAAD,WAAA,CAAA,YAAA;AAAA,EACA,KAAArB,KAAA,CAAA4N,IAAA,GAAA,IAAA7N,CAAA,CAAAC,KAAA,CAAAO,OAAA,CAAAe,QAAA,CAAAuI,IAAA,CAAA,IAAA,EAAA9J,CAAA,CAAAC,KAAA,CAAAuB,KAAA,CAAAqI,KAAA,CAAAC,IAAA,CAAA,CADA;AAAA,EAAA,E;CCpHA;AAAA;AAAA;AAAA,CAAA9J,CAAA,CAAAC,KAAA,CAAAO,OAAA,CAAAsN,OAAA,GAAA9N,CAAA,CAAAC,KAAA,CAAAO,OAAA,CAAAe,QAAA,CAAAZ,MAAA,CAAA,EAAA,CAAA,C;CCGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAAX,CAAA,CAAAC,KAAA,CAAAO,OAAA,CAAAe,QAAA,CAAAwI,MAAA,GAAA/J,CAAA,CAAAC,KAAA,CAAAO,OAAA,CAAAe,QAAA,CAAAZ,MAAA,CAAA;AAAA,EAEAmK,QAAA,EAAA,YAAA;AAAA,GACA,KAAAC,MAAA,GAAA/K,CAAA,CAAAC,KAAA,CAAAuB,KAAA,CAAAR,IAAA,CAAA,KAAAI,KAAA,EAAA4J,KAAA,CAAA,KAAA5J,KAAA,CAAAqG,IAAA,CAAA,CADA;AAAA,GAGA,KAAAsD,MAAA,CAAAhG,QAAA,CAAA,KAAA1D,WAAA,EAHA;AAAA,GAKA,KAAA0J,MAAA,CAAAhH,EAAA,CAAA,YAAA,EAAA,KAAAC,QAAA,EAAA,IAAA,EALA;AAAA,GAFA;AAAA,EAUAuC,MAAA,EAAA,YAAA;AAAA,GACA,KAAAwE,MAAA,CACApG,GADA,CACA,WADA,EACA,KAAA0B,OADA,EACA,IADA,EAEA1B,GAFA,CAEA,UAFA,EAEA,KAAA4B,MAFA,EAEA,IAFA,EADA;AAAA,GAKA,OAAA,KAAAwH,OAAA,CALA;AAAA,GAVA;AAAA,EAkBA1H,OAAA,EAAA,UAAAR,GAAA,EAAA;AAAA,GACA,IAAAoF,QAAA,GAAApF,GAAA,CAAAE,WAAA,CAAAmF,OAAA,GAAArF,GAAA,CAAAE,WAAA,CAAAmF,OAAA,CAAA,CAAA,CAAA,GAAArF,GAAA,CAAAE,WAAA,CADA;AAAA,GAIA,IAAAiI,MAAA,GAAA,IAAA,EAAAC,MAAA,GAAA,IAAA,CAJA;AAAA,GAMA,IAAA,KAAAF,OAAA,CAAAG,OAAA,KAAAb,SAAA,EAAA;AAAA,IACAW,MAAA,GAAA,CAAA/C,QAAA,CAAAM,OAAA,GAAA,KAAAwC,OAAA,CAAAG,OAAA,CAAA,GAAA,KAAAH,OAAA,CAAArF,KAAA,CADA;AAAA,IANA;AAAA,GAUA,IAAA,KAAAqF,OAAA,CAAAI,OAAA,KAAAd,SAAA,EAAA;AAAA,IACAY,MAAA,GAAA,CAAAhD,QAAA,CAAAQ,OAAA,GAAA,KAAAsC,OAAA,CAAAI,OAAA,CAAA,GAAA,KAAAJ,OAAA,CAAApF,MAAA,CADA;AAAA,IAVA;AAAA,GAcA,IAAAqF,MAAA,KAAA,IAAA,IAAAC,MAAA,KAAA,IAAA,EAAA;AAAA,IACA,OADA;AAAA,IAdA;AAAA,GAkBA,IAAAD,MAAA,KAAA,IAAA,IAAAC,MAAA,KAAA,IAAA,EAAA;AAAA,IACA,IAAApI,GAAA,CAAAE,WAAA,CAAAwH,OAAA,EAAA;AAAA,KACA,IAAAa,OAAA,GAAA1C,IAAA,CAAA2C,GAAA,CAAA3C,IAAA,CAAAgC,GAAA,CAAAM,MAAA,CAAA,EAAAtC,IAAA,CAAAgC,GAAA,CAAAO,MAAA,CAAA,CAAA,CADA;AAAA,KAGAD,MAAA,GAAAA,MAAA,IAAA,CAAA,GAAAI,OAAA,GAAA,CAAAA,OAAA,CAHA;AAAA,KAIAH,MAAA,GAAAA,MAAA,IAAA,CAAA,GAAAG,OAAA,GAAA,CAAAA,OAAA,CAJA;AAAA,KAMA,IAAA,KAAAL,OAAA,CAAAO,OAAA,EAAA;AAAA,MACAN,MAAA,GAAA,CAAAA,MAAA,CADA;AAAA,MANA;AAAA,KAUA,IAAA,KAAAD,OAAA,CAAAQ,OAAA,EAAA;AAAA,MACAN,MAAA,GAAA,CAAAA,MAAA,CADA;AAAA,MAVA;AAAA,KADA;AAAA,IAlBA;AAAA,GAmCA,IAAA9B,SAAA,EAAAC,SAAA,CAnCA;AAAA,GAqCA,KAAAhL,KAAA,CAAA6I,aAAA,CAAA,UAAAY,MAAA,EAAA;AAAA,IACAsB,SAAA,GAAA,KAAA/K,KAAA,CAAAqG,IAAA,CAAAC,kBAAA,CAAAmD,MAAA,CAAAyB,SAAA,CAAA,CADA;AAAA,IAGA,IAAA0B,MAAA,KAAA,IAAA,EAAA;AAAA,KACA,IAAA,KAAAD,OAAA,CAAAO,OAAA,EAAA;AAAA,MACAnC,SAAA,CAAAjE,CAAA,GAAA,KAAA6F,OAAA,CAAA7F,CAAA,GAAAiE,SAAA,CAAAjE,CAAA,CADA;AAAA,MAAA,MAEA;AAAA,MACAiE,SAAA,CAAAjE,CAAA,GAAAiE,SAAA,CAAAjE,CAAA,GAAA,KAAA6F,OAAA,CAAA7F,CAAA,CADA;AAAA,MAHA;AAAA,KAOAiE,SAAA,CAAAjE,CAAA,GAAAiE,SAAA,CAAAjE,CAAA,GAAA8F,MAAA,GAAA,KAAAD,OAAA,CAAA7F,CAAA,CAPA;AAAA,KAHA;AAAA,IAcA,IAAA+F,MAAA,KAAA,IAAA,EAAA;AAAA,KAEA,IAAA,KAAAF,OAAA,CAAAQ,OAAA,EAAA;AAAA,MACApC,SAAA,CAAA9D,CAAA,GAAA,KAAA0F,OAAA,CAAA1F,CAAA,GAAA8D,SAAA,CAAA9D,CAAA,CADA;AAAA,MAAA,MAEA;AAAA,MACA8D,SAAA,CAAA9D,CAAA,GAAA8D,SAAA,CAAA9D,CAAA,GAAA,KAAA0F,OAAA,CAAA1F,CAAA,CADA;AAAA,MAJA;AAAA,KAQA8D,SAAA,CAAA9D,CAAA,GAAA8D,SAAA,CAAA9D,CAAA,GAAA4F,MAAA,GAAA,KAAAF,OAAA,CAAA1F,CAAA,CARA;AAAA,KAdA;AAAA,IAyBA+D,SAAA,GAAA,KAAAhL,KAAA,CAAAqG,IAAA,CAAA8E,kBAAA,CAAAJ,SAAA,CAAA,CAzBA;AAAA,IA0BAtB,MAAA,CAAA2B,GAAA,GAAAJ,SAAA,CAAAI,GAAA,CA1BA;AAAA,IA2BA3B,MAAA,CAAA4B,GAAA,GAAAL,SAAA,CAAAK,GAAA,CA3BA;AAAA,IAAA,EA4BA,IA5BA,EArCA;AAAA,GAmEA,KAAArL,KAAA,CAAAqE,YAAA,GAnEA;AAAA,GAoEA,KAAAsF,MAAA,CAAAtF,YAAA,GApEA;AAAA,GAqEA,KAAArE,KAAA,CAAAsL,MAAA,GArEA;AAAA,GAlBA;AAAA,EA2FA1I,QAAA,EAAA,UAAA6B,GAAA,EAAA;AAAA,GAEA,KAAAzE,KAAA,CAAA6I,aAAA,CAAA,UAAAY,MAAA,EAAA;AAAA,IACAA,MAAA,CAAAyB,SAAA,GAAAzB,MAAA,CAAAiC,KAAA,EAAA,CADA;AAAA,IAAA,EAFA;AAAA,GAOA,IAAA0B,QAAA,GAAA,KAAAzD,MAAA,CAAAjI,kBAAA,EAAA,CAPA;AAAA,GASA,IAAA2L,MAAA,GAAA,KAAAV,OAAA,GAAA;AAAA,IACApF,MAAA,EAAA6F,QAAA,CAAA7F,MADA;AAAA,IAEAD,KAAA,EAAA8F,QAAA,CAAA9F,KAFA;AAAA,IAAA,CATA;AAAA,GAcA,IAAAuC,QAAA,GAAA,KAAAF,MAAA,CAAA3H,WAAA,EAAA,CAdA;AAAA,GAgBA,QAAAyC,GAAA,CAAAG,MAAA;AAAA,GACA,KAAAhG,CAAA,CAAAC,KAAA,CAAAuB,KAAA,CAAAf,IAAA,CAAAkB,QAAA;AAAA,IACA8M,MAAA,CAAAvG,CAAA,GAAA+C,QAAA,CAAA/C,CAAA,GAAAsG,QAAA,CAAA9F,KAAA,CADA;AAAA,IAEA+F,MAAA,CAAApG,CAAA,GAAA4C,QAAA,CAAA5C,CAAA,GAAAmG,QAAA,CAAA7F,MAAA,CAFA;AAAA,IAGA8F,MAAA,CAAAP,OAAA,GAAAM,QAAA,CAAA3F,KAAA,CAHA;AAAA,IAIA4F,MAAA,CAAAN,OAAA,GAAAK,QAAA,CAAA1F,MAAA,CAJA;AAAA,IAKA2F,MAAA,CAAAH,OAAA,GAAA,IAAA,CALA;AAAA,IAMAG,MAAA,CAAAF,OAAA,GAAA,IAAA,CANA;AAAA,IAOA,MARA;AAAA,GAUA,KAAAvO,CAAA,CAAAC,KAAA,CAAAuB,KAAA,CAAAf,IAAA,CAAAmB,UAAA;AAAA,IACA6M,MAAA,CAAApG,CAAA,GAAA4C,QAAA,CAAA5C,CAAA,GAAAmG,QAAA,CAAA7F,MAAA,CADA;AAAA,IAEA8F,MAAA,CAAAN,OAAA,GAAAK,QAAA,CAAA1F,MAAA,CAFA;AAAA,IAGA2F,MAAA,CAAAF,OAAA,GAAA,IAAA,CAHA;AAAA,IAIA,MAdA;AAAA,GAgBA,KAAAvO,CAAA,CAAAC,KAAA,CAAAuB,KAAA,CAAAf,IAAA,CAAAoB,SAAA;AAAA,IACA4M,MAAA,CAAAvG,CAAA,GAAA+C,QAAA,CAAA/C,CAAA,CADA;AAAA,IAEAuG,MAAA,CAAApG,CAAA,GAAA4C,QAAA,CAAA5C,CAAA,GAAAmG,QAAA,CAAA7F,MAAA,CAFA;AAAA,IAGA8F,MAAA,CAAAP,OAAA,GAAAM,QAAA,CAAA/H,IAAA,CAHA;AAAA,IAIAgI,MAAA,CAAAN,OAAA,GAAAK,QAAA,CAAA1F,MAAA,CAJA;AAAA,IAKA2F,MAAA,CAAAF,OAAA,GAAA,IAAA,CALA;AAAA,IAMA,MAtBA;AAAA,GAwBA,KAAAvO,CAAA,CAAAC,KAAA,CAAAuB,KAAA,CAAAf,IAAA,CAAAqB,WAAA;AAAA,IACA2M,MAAA,CAAAvG,CAAA,GAAA+C,QAAA,CAAA/C,CAAA,GAAAsG,QAAA,CAAA9F,KAAA,CADA;AAAA,IAEA+F,MAAA,CAAAP,OAAA,GAAAM,QAAA,CAAA3F,KAAA,CAFA;AAAA,IAGA4F,MAAA,CAAAH,OAAA,GAAA,IAAA,CAHA;AAAA,IAIA,MA5BA;AAAA,GA8BA,KAAAtO,CAAA,CAAAC,KAAA,CAAAuB,KAAA,CAAAf,IAAA,CAAAuB,YAAA;AAAA,IACAyM,MAAA,CAAAvG,CAAA,GAAA+C,QAAA,CAAA/C,CAAA,CADA;AAAA,IAEAuG,MAAA,CAAAP,OAAA,GAAAM,QAAA,CAAA/H,IAAA,CAFA;AAAA,IAGA,MAjCA;AAAA,GAmCA,KAAAzG,CAAA,CAAAC,KAAA,CAAAuB,KAAA,CAAAf,IAAA,CAAAwB,WAAA;AAAA,IACAwM,MAAA,CAAAvG,CAAA,GAAA+C,QAAA,CAAA/C,CAAA,GAAAsG,QAAA,CAAA9F,KAAA,CADA;AAAA,IAEA+F,MAAA,CAAApG,CAAA,GAAA4C,QAAA,CAAA5C,CAAA,CAFA;AAAA,IAGAoG,MAAA,CAAAP,OAAA,GAAAM,QAAA,CAAA3F,KAAA,CAHA;AAAA,IAIA4F,MAAA,CAAAN,OAAA,GAAAK,QAAA,CAAA7H,GAAA,CAJA;AAAA,IAKA8H,MAAA,CAAAH,OAAA,GAAA,IAAA,CALA;AAAA,IAMA,MAzCA;AAAA,GA2CA,KAAAtO,CAAA,CAAAC,KAAA,CAAAuB,KAAA,CAAAf,IAAA,CAAAyB,aAAA;AAAA,IACAuM,MAAA,CAAApG,CAAA,GAAA4C,QAAA,CAAA5C,CAAA,CADA;AAAA,IAEAoG,MAAA,CAAAN,OAAA,GAAAK,QAAA,CAAA7H,GAAA,CAFA;AAAA,IAGA,MA9CA;AAAA,GAgDA,KAAA3G,CAAA,CAAAC,KAAA,CAAAuB,KAAA,CAAAf,IAAA,CAAA0B,YAAA;AAAA,IACAsM,MAAA,CAAAvG,CAAA,GAAA+C,QAAA,CAAA/C,CAAA,CADA;AAAA,IAEAuG,MAAA,CAAApG,CAAA,GAAA4C,QAAA,CAAA5C,CAAA,CAFA;AAAA,IAGAoG,MAAA,CAAAN,OAAA,GAAAK,QAAA,CAAA7H,GAAA,CAHA;AAAA,IAIA8H,MAAA,CAAAP,OAAA,GAAAM,QAAA,CAAA/H,IAAA,CAJA;AAAA,IAKA,MArDA;AAAA,IAhBA;AAAA,GAwEA,KAAAsE,MAAA,CACAhH,EADA,CACA,WADA,EACA,KAAAsC,OADA,EACA,IADA,EAEAtC,EAFA,CAEA,UAFA,EAEA,KAAAwC,MAFA,EAEA,IAFA,EAxEA;AAAA,GA3FA;AAAA,EAAA,CAAA,C;CA0KAvG,CAAA,CAAAuB,QAAA,CAAAD,WAAA,CAAA,YAAA;AAAA,EACA,KAAArB,KAAA,CAAAgN,MAAA,GAAA,IAAAjN,CAAA,CAAAC,KAAA,CAAAO,OAAA,CAAAe,QAAA,CAAAwI,MAAA,CAAA,IAAA,EAAA/J,CAAA,CAAAC,KAAA,CAAAuB,KAAA,CAAAqI,KAAA,CAAAE,MAAA,CAAA,CADA;AAAA,EAAA,E","file":"leaflet-larva.js","sourcesContent":["L.larva = {\n\tversion: '0.1.0',\n\n\tgetHeight: function (el) {\n\t\treturn el.offsetHeight;\n\t},\n\n\tgetWidth: function (el) {\n\t\treturn el.offsetWidth;\n\t}\n};","L.larva.handler = {\n\n};","/**\n * @requires package.js\n * \n * Base class for Path handlers\n */\nL.larva.handler.Path = L.Handler.extend({\n\n\tincludes: [L.Evented.prototype],\n\n\tinitialize: function (path, frameStyle, options) {\n\t\tL.setOptions(this, options);\n\n\t\tthis._path = path;\n\t\tthis._frameStyle = frameStyle;\n\t}\n\n});\n\nL.Path.addInitHook(function () {\n\tthis.larva = {};\n});","/**\n * @requires Path.js\n */\nL.larva.handler.Polyline = L.larva.handler.Path.extend({\n\n\toptions: {\n\t\t\n\t}\n\n});","L.larva.frame = {\n\n};","/**\n * @requires package.js\n */\nL.larva.frame.Path = L.Layer.extend({\n\n\tstatics: {\n\t\tTOP_LEFT: 'tl',\n\t\tTOP_MIDDLE: 'tm',\n\t\tTOP_RIGHT: 'tr',\n\t\tMIDDLE_LEFT: 'ml',\n\t\tMIDDLE_MIDDLE: 'mm',\n\t\tMIDDLE_RIGHT: 'mr',\n\t\tBOTTOM_LEFT: 'bl',\n\t\tBOTTOM_MIDDLE: 'bm',\n\t\tBOTTOM_RIGHT: 'br'\n\t},\n\n\toptions: {\n\t\tpane: 'llarva-path-frame'\n\t},\n\n\tinitialize: function (path) {\n\t\tthis._path = path;\n\t},\n\n\tbeforeAdd: function (map) {\n\t\tif (!map.getPane(this.options.pane)) {\n\t\t\tmap.createPane(this.options.pane);\n\t\t}\n\t},\n\n\tgetEvents: function () {\n\t\treturn {\n\t\t\tzoom: this._onMapZoom\n\t\t};\n\t},\n\n\tgetDraggable: function () {\n\t\treturn this._draggable;\n\t},\n\n\tgetFrameClientRect: function () {\n\t\treturn this._el.getBoundingClientRect();\n\t},\n\n\tgetHandle: function (id) {\n\t\treturn this._handles[id];\n\t},\n\n\tgetPosition: function(id) {\n\t\tif (id) {\n\t\t\treturn L.DomUtil.getPosition(this._handles[id]);\n\t\t} else {\n\t\t\treturn L.DomUtil.getPosition(this._el);\n\t\t}\n\t},\n\n\thideHandle: function() {\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tif (this._handles[arguments[i]]) {\n\t\t\t\tthis._handles[arguments[i]].style.display = 'none';\n\t\t\t}\n\t\t}\n\t},\n\n\tonAdd: function () {\n\t\tvar el = this._el = L.DomUtil.create('div', 'llarva-pathframe', this.getPane());\n\t\tL.DomEvent.on(el, 'mousedown', this._onStart, this);\n\n\t\tthis._handles = {};\n\n\t\t['tl','tm','tr','ml','mm','mr','bl','bm','br'].forEach(function (id) {\n\n\t\t\tthis._handles[id] = L.DomUtil.create('div', 'llarva-' + id, el);\n\t\t\tthis._handles[id]._id = id;\n\t\t\tL.DomEvent.on(this._handles[id], L.Draggable.START.join(' '), this._onStart, this);\n\n\t\t}, this);\n\n\t\tthis._draggable = new L.Draggable(el);\n\t\tthis._draggables = {};\n\t\tthis._updateFrame(false);\n\t\tthis._updateHandles();\n\t},\n\n\tonRemove: function() {\n\t\tvar id;\n\n\t\tif (this._draggable) {\n\t\t\tthis._draggable.disable();\n\t\t}\n\n\t\tfor (id in this._draggables) {\n\t\t\tthis._draggables[id].disable();\n\t\t}\n\n\t\tL.DomEvent.off(this._el, 'mousedown click', L.DomEvent.stop);\n\n\t\tfor (id in this._handles) {\n\t\t\tL.DomEvent.off(this._handles[id], 'mousedown click', L.DomEvent.stop);\n\t\t}\n\n\t\tL.DomUtil.remove(this._el);\n\t\tL.DomUtil.empty(this._el);\n\n\t\tdelete this._el;\n\t},\n\n\tsetStyle: function (style) {\n\t\tvar id, el, oldStyle = this._style;\n\n\t\tfor (id in this._handles) {\n\t\t\tel = this._handles[id];\n\t\t\tel.style.display = 'block';\n\n\t\t\tif (this._draggables[id]) {\n\t\t\t\tthis._draggables[id].disable();\n\t\t\t\tdelete this._draggables[id];\n\t\t\t}\n\n\t\t\t// if (oldStyle) {\n\t\t\t// \tL.DomUtil.removeClass(el, oldStyle.className + '-' + id);\n\t\t\t// }\n\n\t\t\t// L.DomUtil.addClass(el, style.className + '-' + id);\n\n\t\t\tif (style[id]) {\n\t\t\t\tif (style[id].hide) {\n\t\t\t\t\tel.style.display = 'none';\n\t\t\t\t}\n\n\t\t\t\tif (style[id].draggable) {\n\t\t\t\t\tthis._draggables[id] = new L.Draggable(el);\n\t\t\t\t\tthis._draggables[id].enable();\n\t\t\t\t\tL.DomEvent.off(el, 'mousedown click', L.DomEvent.stop);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (oldStyle) {\n\t\t\tL.DomUtil.removeClass(this._el, oldStyle.className);\n\t\t}\n\n\t\tL.DomUtil.addClass(this._el, style.className);\n\n\t\tthis._style = style;\n\n\t\tthis._updateHandles();\n\n\t\tfor (id in this._draggables) {\n\t\t\tthis._updateDraggable(id);\n\t\t}\n\t},\n\n\tupdateBounds: function () {\n\t\tthis._updateFrame(false, Array.prototype.slice.call(arguments, 0));\n\t},\n\n\t_onStart: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\n\t\tthis.fire('drag:start', {\n\t\t\tsourceEvent: evt,\n\t\t\thandle: evt.target._id\n\t\t});\n\n\t\tL.DomEvent\n\t\t\t.on(document, L.Draggable.MOVE[evt.type], this._onMove, this)\n\t\t\t.on(document, L.Draggable.END[evt.type], this._onEnd, this);\n\n\t\tL.DomUtil.addClass(document.body, 'leaflet-dragging');\n\t},\n\n\t_onMapZoom: function () {\n\t\tthis._updateFrame(true);\n\t},\n\n\t_onMove: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\n\t\tthis.fire('drag:move', {\n\t\t\tsourceEvent: evt\n\t\t});\n\t},\n\n\t_onEnd: function (evt) {\n\t\tL.DomEvent.stop(evt);\n\n\t\tfor (var id in L.Draggable.MOVE) {\n\t\t\tL.DomEvent\n\t\t\t\t.off(document, L.Draggable.MOVE[id], this._onMove, this)\n\t\t\t\t.off(document, L.Draggable.END[id], this._onEnd, this);\n\t\t}\n\n\t\tL.DomUtil.removeClass(document.body, 'leaflet-dragging');\n\n\t\tthis.fire('drag:end', {\n\t\t\tsourceEvent: evt\n\t\t});\n\t},\n\n\t_updateDraggable: function (id) {\n\t\tvar el = this._handles[id];\n\t\tvar left = el.offsetLeft,\n\t\ttop = el.offsetTop;\n\n\t\tif (el.style.marginLeft) {\n\t\t\tleft -= parseInt(el.style.marginLeft);\n\t\t}\n\n\t\tif (el.style.marginTop) {\n\t\t\ttop -= parseInt(el.style.marginTop);\n\t\t}\n\n\t\tL.extend(el.style, {\n\t\t\tleft: '0px', top: '0px'\n\t\t});\n\n\t\tL.DomUtil.setPosition(el, L.point(left, top));\n\t},\n\n\t_updateFrame: function (zoomChanged, maintainHandles) {\n\t\tvar id,\n\t\t    currentPosition = L.DomUtil.getPosition(this._el),\n\t\t    handle,\n\t\t    handlePosition;\n\n\t\tvar bounds = this._path.getBounds();\n\n\t\tvar southEastPoint = this._map.latLngToLayerPoint(bounds.getSouthEast()),\n\t\tnorthWestPoint = this._map.latLngToLayerPoint(bounds.getNorthWest());\n\n\t\tvar computedStyle = getComputedStyle(this._el);\n\n\t\tif (maintainHandles && maintainHandles.length) {\n\n\t\t\tif (currentPosition) {\n\t\t\t\tfor (var i=0; i<maintainHandles.length; i++) {\n\t\t\t\t\t\n\t\t\t\t\thandle = this._handles[maintainHandles[i]];\n\t\t\t\t\tif (handle && (handlePosition = L.DomUtil.getPosition(handle))) {\n\t\t\t\t\t\thandlePosition = handlePosition.add(currentPosition);\n\t\t\t\t\t\tL.DomUtil.setPosition(handle, handlePosition.subtract(northWestPoint));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tL.DomUtil.setPosition(this._el, northWestPoint);\n\n\t\tvar x = parseInt(computedStyle.borderLeftWidth) + parseInt(computedStyle.borderRightWidth),\n\t\ty = parseInt(computedStyle.borderTopWidth) + parseInt(computedStyle.borderBottomWidth);\n\n\t\tvar oldWidth, oldHeight;\n\t\tif (zoomChanged) {\n\t\t\toldWidth = this._el.offsetWidth;\n\t\t\toldHeight = this._el.offsetHeight;\n\t\t}\n\n\t\tthis._el.style.width = (southEastPoint.x - northWestPoint.x - x) + 'px';\n\t\tthis._el.style.height = (southEastPoint.y - northWestPoint.y - y) + 'px';\n\n\t\tif (zoomChanged) {\n\n\t\t\tfor (id in this._handles) {\n\t\t\t\thandle = this._handles[id];\n\t\t\t\thandlePosition = L.DomUtil.getPosition(handle);\n\n\t\t\t\tif (handlePosition) {\n\t\t\t\t\tL.DomUtil.setPosition(handle, handlePosition.scaleBy(L.point(\n\t\t\t\t\t\tthis._el.offsetWidth / oldWidth, \n\t\t\t\t\t\tthis._el.offsetHeight / oldHeight\n\t\t\t\t\t)));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.southEastPoint = southEastPoint;\n\t\tthis.northWestPoint = northWestPoint;\n\t},\n\n\t_updateHandles: function () {\n\t\tvar el, computedStyle, right, bottom, left, top;\n\t\tvar widthOf = L.larva.getWidth, heightOf = L.larva.getHeight;\n\n\t\tcomputedStyle = getComputedStyle(this._el);\n\n\t\tvar borderWidth = {\n\t\t\tbottom: 'borderBottomWidth',\n\t\t\tleft: 'borderLeftWidth',\n\t\t\tright: 'borderRightWidth',\n\t\t\ttop: 'borderTopWidth'\n\t\t};\n\n\t\tfor (var id in borderWidth) {\n\t\t\tborderWidth[id] = parseInt(computedStyle[borderWidth[id]]) / 2;\n\t\t}\n\n\t\tel = this._handles.br;\n\n\t\tright = (- (widthOf(el) / 2) - borderWidth.right) + 'px';\n\t\tbottom = (- (heightOf(el) / 2) - borderWidth.bottom) + 'px';\n\n\t\tL.extend(el.style, {\n\t\t\tright: right,\n\t\t\tbottom: bottom\n\t\t});\n\n\t\tel = this._handles.bm;\n\t\tleft = (-(widthOf(el) / 2)) + 'px';\n\t\tbottom = (- (heightOf(el) / 2) - borderWidth.bottom) + 'px';\n\n\t\tL.extend(el.style, {\n\t\t\tleft: '50%',\n\t\t\t'margin-left': left,\n\t\t\tbottom: bottom\n\t\t});\n\n\t\tel = this._handles.bl;\n\t\tleft = (-(widthOf(el) / 2) - borderWidth.left) + 'px';\n\t\tbottom = (- (heightOf(el) / 2) - borderWidth.bottom) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tleft: left,\n\t\t\tbottom: bottom\n\t\t});\n\n\t\tel = this._handles.mm;\n\t\tleft = -(widthOf(el) / 2) + 'px';\n\t\ttop = -(heightOf(el) / 2) + 'px';\n\t\tL.extend(el.style, {\n\t\t\ttop: '50%',\n\t\t\tleft: '50%',\n\t\t\t'margin-left': left,\n\t\t\t'margin-top': top\n\t\t});\n\n\t\tel = this._handles.ml;\n\t\ttop = -(heightOf(el) / 2) + 'px';\n\t\tleft = (-(widthOf(el) / 2) - borderWidth.left) + 'px';\n\t\tL.extend(el.style, {\n\t\t\ttop: '50%',\n\t\t\t'margin-top': top,\n\t\t\tleft: left\n\t\t});\n\n\t\tel = this._handles.mr;\n\t\tright = (- (widthOf(el) / 2) - borderWidth.right) + 'px';\n\t\ttop = -(heightOf(el) / 2) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tright: right,\n\t\t\ttop: '50%',\n\t\t\t'margin-top': top\n\t\t});\n\n\t\tel = this._handles.tr;\n\t\tright = (-(widthOf(el) / 2) - borderWidth.right) + 'px';\n\t\ttop = (-(heightOf(el) / 2) - borderWidth.top) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tright: right,\n\t\t\ttop: top\n\t\t});\n\n\t\tel = this._handles.tm;\n\t\ttop = (-(heightOf(el) / 2) - borderWidth.top) + 'px';\n\t\tleft = -(widthOf(el) / 2) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tleft: '50%',\n\t\t\t'margin-left': left,\n\t\t\ttop: top\n\t\t});\n\n\t\tel = this._handles.tl;\n\t\ttop = (-(heightOf(el) / 2) - borderWidth.top) + 'px';\n\t\tleft = (-(widthOf(el) / 2) - borderWidth.left) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tleft: left,\n\t\t\ttop: top\n\t\t});\n\t}\n});\n\nL.larva.frame.path = function pathframe (path) {\n\tif (path && path._pathFrame) {\n\t\treturn path._pathFrame;\n\t}\n\n\treturn (path._pathFrame = new L.larva.frame.Path(path));\n};","/**\n * @requires package.js\n */\n\nL.larva.frame.Style = {\n\t\n};\n\nL.larva.frame.Style.Move = {\n\tclassName: 'llarva-pathframe-move',\n\t\n\ttl: {\n\t\thide: true\n\t},\n\n\ttr: {\n\t\thide: true\n\t},\n\n\tmm: {\n\t\thide: true\n\t},\n\n\tbl: {\n\t\thide: true\n\t},\n\n\tbr: {\n\t\thide: true\n\t}\n};\n\nL.larva.frame.Style.Resize = {\n\tclassName: 'llarva-pathframe-resize',\n\tmm: {\n\t\thide: true\n\t}\n};\n\nL.larva.frame.Style.Rotate = {\n\tclassName: 'llarva-pathframe-rotate',\n\ttm: {\n\t\thide: true\n\t},\n\n\tml: {\n\t\thide: true\n\t},\n\n\tmr: {\n\t\thide: true\n\t},\n\n\tbm: {\n\t\thide: true\n\t},\n\n\tmm: {\n\t\tdraggable: true\n\t}\n};","if (!L.Polyline.prototype.forEachLatLng) {\n\tL.Polyline.include({\n\n\t\tforEachLatLng: function (fn, context) {\n\t\t\tvar latlngs = this.getLatLngs();\n\n\t\t\tif (!latlngs.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (Array.isArray(latlngs[0])) {\n\t\t\t\t// nested array\n\n\t\t\t\tlatlngs = latlngs.reduce(function (array, latlngs) {\n\t\t\t\t\treturn array.concat(latlngs);\n\t\t\t\t}, []);\n\t\t\t}\n\n\t\t\tlatlngs.forEach(fn, context);\n\t\t}\n\t});\n}\n\nif (!L.Polyline.prototype.updateBounds) {\n\tL.Polyline.include({\n\n\t\tupdateBounds: function () {\n\t\t\tvar bounds = this._bounds = new L.LatLngBounds();\n\n\t\t\tthis.forEachLatLng(function (latlng) {\n\t\t\t\tbounds.extend(latlng);\n\t\t\t});\n\t\t}\n\n\t});\n}","/**\n * @requires Polyline.js\n * @requires ../frame/Path.js\n * @requires ../frame/Style.js\n * @requires ../ext/L.Polyline.js\n */\n\nL.larva.handler.Polyline.Rotate = L.larva.handler.Polyline.extend({\n\n\taddHooks: function () {\n\t\tthis._frame = L.larva.frame.path(this._path);\n\t\tthis._frame.addTo(this._path._map);\n\n\t\tthis._frame.setStyle(this._frameStyle);\n\n\t\tthis._frame.on('drag:start', this._onStart, this);\n\t},\n\n\t_onEnd: function () {\n\t\tthis._frame\n\t\t\t.off('drag:move', this._onMove, this)\n\t\t\t.off('drag:end', this._onEnd, this);\n\t},\n\n\t_onMove: function (evt) {\n\t\tvar position = evt.sourceEvent.touches ? evt.sourceEvent.touches[0] : evt.sourceEvent;\n\n\t\tvar centerBounding = this._centerElement.getBoundingClientRect();\n\n\t\tvar cx = (centerBounding.left + centerBounding.width / 2),\n\t\t    cy = (centerBounding.top + centerBounding.height / 2);\n\n\t\tvar i = position.clientX - cx,\n\t\t    j = position.clientY - cy;\n\n\t\tvar length = Math.sqrt(i * i + j * j);\n\n\t\t// cross product\n\t\tvar sin = (this._vector.i * j - this._vector.j * i) / length;\n\n\t\t// scalar product\n\t\tvar cos = (this._vector.i * i + this._vector.j * j) / length;\n\n\t\tvar frameBounding = this._frame.getFrameClientRect(),\n\t\t    framePosition = this._frame.getPosition();\n\n\t\tcx = (cx - frameBounding.left) + framePosition.x;\n\t\tcy = (cy - frameBounding.top) + framePosition.y;\n\n\t\tvar dx = cx * (1 - cos) + cy * sin;\n\t\tvar dy = cy * (1 - cos) - cx * sin;\n\n\t\tvar projected, newLatLng, rotated = L.point(0, 0);\n\n\t\tthis._path.forEachLatLng(function (latlng) {\n\t\t\tprojected = this._path._map.latLngToLayerPoint(latlng._original);\n\n\t\t\trotated.x = projected.x * cos - projected.y * sin + dx;\n\t\t\trotated.y = projected.x * sin + projected.y * cos + dy;\n\n\t\t\tnewLatLng = this._path._map.layerPointToLatLng(rotated);\n\t\t\tlatlng.lat = newLatLng.lat;\n\t\t\tlatlng.lng = newLatLng.lng;\n\t\t}, this);\n\n\t\tthis._path.updateBounds();\n\t\tthis._frame.updateBounds(L.larva.frame.Path.MIDDLE_MIDDLE);\n\t\tthis._path.redraw();\n\t},\n\n\t_onStart: function (evt) {\n\t\tif (!evt.handle || evt.handle === L.larva.frame.Path.MIDDLE_MIDDLE) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar centerElement = this._centerElement = this._frame.getHandle(L.larva.frame.Path.MIDDLE_MIDDLE);\n\n\t\tvar centerBounding = centerElement.getBoundingClientRect(),\n\t\t    targetBounding = evt.sourceEvent.target.getBoundingClientRect();\n\n\t\tvar vector = this._vector = {\n\t\t\ti: (targetBounding.left + targetBounding.width / 2) - (centerBounding.left - centerBounding.width / 2),\n\t\t\tj: (targetBounding.top + targetBounding.height / 2) - (centerBounding.top - centerBounding.height / 2)\n\t\t};\n\n\t\tvector.length = Math.sqrt(vector.i * vector.i + vector.j * vector.j);\n\n\t\tvector.i = vector.i / vector.length;\n\t\tvector.j = vector.j / vector.length;\n\n\t\tthis._path.forEachLatLng(function (latlng) {\n\t\t\tlatlng._original = latlng.clone();\n\t\t});\n\n\t\tthis._frame\n\t\t\t.on('drag:move', this._onMove, this)\n\t\t\t.on('drag:end', this._onEnd, this);\n\t}\n\n});\n\nL.Polyline.addInitHook(function () {\n\tthis.larva.rotate = new L.larva.handler.Polyline.Rotate(this, L.larva.frame.Style.Rotate);\n});","/**\n * @requires Polyline.js\n * @requires ../frame/Path.js\n * @requires ../frame/Style.js\n * @requires ../ext/L.Polyline.js\n * \n * @type {[type]}\n */\nL.larva.handler.Polyline.Move = L.larva.handler.Polyline.extend({\n\n\taddHooks: function() {\n\t\tthis._frame = L.larva.frame.path(this._path).addTo(this._path._map);\n\n\t\tthis._captureHandles = true;\n\t\tvar larva = this._path.larva;\n\n\t\tif (larva) {\n\t\t\tif (larva.resize && larva.resize.enabled()) {\n\t\t\t\tthis._captureHandles = false;\n\t\t\t} else if (larva.rotate && larva.rotate.enabled()) {\n\t\t\t\tthis._captureHandles = false;\n\t\t\t}\n\n\t\t}\n\n\t\tif (this._captureHandles) {\n\t\t\tthis._frame.setStyle(this._frameStyle);\n\t\t}\n\n\t\tthis._frame.on('drag:start', this._onStart, this);\n\t},\n\n\t_onEnd: function () {\n\t\tthis._frame\n\t\t\t.off('drag:move', this._onMove, this)\n\t\t\t.off('drag:end', this._onEnd);\n\t},\n\n\t_onMove: function (evt) {\n\t\tvar sourceEvent = evt.sourceEvent;\n\t\tvar pos = sourceEvent.touches && sourceEvent.touches[0] ? sourceEvent.touches[0] : sourceEvent;\n\n\t\tvar dx = 0, dy = 0;\n\n\t\tif (this._axis === undefined) {\n\t\t\tdx = pos.clientX - this._startPoint.x;\n\t\t\tdy = pos.clientY - this._startPoint.y;\n\n\t\t\tif (sourceEvent.ctrlKey) {\n\t\t\t\tvar dxy = Math.min(Math.abs(dx), Math.abs(dy));\n\n\t\t\t\tdx = dx >= 0 ? dxy : -dxy;\n\t\t\t\tdy = dy >= 0 ? dxy : -dxy;\n\t\t\t}\n\t\t} else {\n\t\t\tif (this._axis === 'x') {\n\t\t\t\tdx = pos.clientX - this._startPoint.x;\n\t\t\t} else if (this._axis === 'y') {\n\t\t\t\tdy = pos.clientY - this._startPoint.y;\n\t\t\t}\n\t\t}\n\n\t\tif (dx === 0 && dy === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar vector = L.point(dx, dy), projected, newLatLng;\n\n\t\tthis._path.forEachLatLng(function (latlng) {\n\t\t\tprojected = this._path._map.latLngToLayerPoint(latlng._original);\n\t\t\tprojected = projected.add(vector);\n\t\t\tnewLatLng = this._path._map.layerPointToLatLng(projected);\n\t\t\tlatlng.lat = newLatLng.lat;\n\t\t\tlatlng.lng = newLatLng.lng;\n\t\t}, this);\n\n\t\tthis._path.updateBounds();\n\t\tthis._frame.updateBounds();\n\t\tthis._path.redraw();\n\n\t},\n\n\t_onStart: function (evt) {\n\t\tthis._startNorthWest = this._path.getBounds().getNorthWest();\n\t\tvar sourceEvent = evt.sourceEvent;\n\t\tvar startPos = sourceEvent.touches && sourceEvent.touches[0] ? sourceEvent.touches[0]: sourceEvent;\n\t\t\n\t\tthis._startPoint = L.point(startPos.clientX, startPos.clientY);\n\n\t\tthis._path.forEachLatLng(function (latlng) {\n\t\t\tlatlng._original = latlng.clone();\n\t\t});\n\n\t\tif (this._captureHandles) {\n\t\t\tswitch (evt.handle) {\n\t\t\t\tcase L.larva.frame.Path.TOP_MIDDLE:\n\t\t\t\tcase L.larva.frame.Path.BOTTOM_MIDDLE:\n\t\t\t\t\tthis._axis = 'y';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase L.larva.frame.Path.MIDDLE_LEFT:\n\t\t\t\tcase L.larva.frame.Path.MIDDLE_RIGHT:\n\t\t\t\t\tthis._axis = 'x';\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tdelete this._axis;\n\t\t\t}\n\t\t}\n\n\t\tif (this._captureHandles || !evt.handle) {\n\t\t\tthis._frame\n\t\t\t\t.on('drag:move', this._onMove, this)\n\t\t\t\t.on('drag:end', this._onEnd, this);\n\t\t}\n\t}\n\n});\n\nL.Polyline.addInitHook(function () {\n\tthis.larva.move = new L.larva.handler.Polyline.Move(this, L.larva.frame.Style.Move);\n});","/**\n * @requires Polyline.js\n */\nL.larva.handler.Polygon = L.larva.handler.Polyline.extend({\n\n});","/**\n * @requires Polygon.js\n * @requires ../frame/Path.js\n * @requires ../frame/Style.js\n * @requires ../ext/L.Polyline.js\n */\nL.larva.handler.Polyline.Resize = L.larva.handler.Polyline.extend({\n\n\taddHooks: function () {\n\t\tthis._frame = L.larva.frame.path(this._path).addTo(this._path._map);\n\n\t\tthis._frame.setStyle(this._frameStyle);\n\n\t\tthis._frame.on('drag:start', this._onStart, this);\n\t},\n\n\t_onEnd: function () {\n\t\tthis._frame\n\t\t\t.off('drag:move', this._onMove, this)\n\t\t\t.off('drag:end', this._onEnd, this);\n\n\t\tdelete this._origin;\n\t},\n\n\t_onMove: function (evt) {\n\t\tvar position = evt.sourceEvent.touches ? evt.sourceEvent.touches[0] : evt.sourceEvent;\n\n\n\t\tvar xscale = null, yscale = null;\n\n\t\tif (this._origin.screenX !== undefined) {\n\t\t\txscale = (position.clientX - this._origin.screenX) / this._origin.width;\n\t\t}\n\n\t\tif (this._origin.screenY !== undefined) {\n\t\t\tyscale = (position.clientY - this._origin.screenY) / this._origin.height;\n\t\t}\n\n\t\tif (xscale === null && yscale === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (xscale !== null && yscale !== null) {\n\t\t\tif (evt.sourceEvent.ctrlKey) {\n\t\t\t\tvar xyscale = Math.max(Math.abs(xscale), Math.abs(yscale));\n\n\t\t\t\txscale = xscale >= 0 ? xyscale : -xyscale;\n\t\t\t\tyscale = yscale >= 0 ? xyscale : -xyscale;\n\n\t\t\t\tif (this._origin.invertX) {\n\t\t\t\t\txscale = -xscale;\n\t\t\t\t}\n\n\t\t\t\tif (this._origin.invertY) {\n\t\t\t\t\tyscale = -yscale;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar projected, newLatLng;\n\n\t\tthis._path.forEachLatLng(function (latlng) {\n\t\t\tprojected = this._path._map.latLngToLayerPoint(latlng._original);\n\n\t\t\tif (xscale !== null) {\n\t\t\t\tif (this._origin.invertX) {\n\t\t\t\t\tprojected.x = this._origin.x - projected.x;\n\t\t\t\t} else {\n\t\t\t\t\tprojected.x = projected.x - this._origin.x;\n\t\t\t\t}\n\n\t\t\t\tprojected.x = projected.x * xscale + this._origin.x;\n\t\t\t}\n\n\n\t\t\tif (yscale !== null) {\n\n\t\t\t\tif (this._origin.invertY) {\n\t\t\t\t\tprojected.y = this._origin.y - projected.y;\n\t\t\t\t} else {\n\t\t\t\t\tprojected.y = projected.y - this._origin.y;\n\t\t\t\t}\n\n\t\t\t\tprojected.y = projected.y * yscale + this._origin.y;\n\t\t\t}\n\n\t\t\tnewLatLng = this._path._map.layerPointToLatLng(projected);\n\t\t\tlatlng.lat = newLatLng.lat;\n\t\t\tlatlng.lng = newLatLng.lng;\n\t\t}, this);\n\n\t\tthis._path.updateBounds();\n\t\tthis._frame.updateBounds();\n\t\tthis._path.redraw();\n\n\t},\n\n\t_onStart: function (evt) {\n\n\t\tthis._path.forEachLatLng(function (latlng) {\n\t\t\tlatlng._original = latlng.clone();\n\t\t});\n\n\n\t\tvar bounding = this._frame.getFrameClientRect();\n\n\t\tvar origin = this._origin = {\n\t\t\theight: bounding.height,\n\t\t\twidth: bounding.width\n\t\t};\n\n\t\tvar position = this._frame.getPosition();\n\n\t\tswitch (evt.handle) {\n\t\t\tcase L.larva.frame.Path.TOP_LEFT:\n\t\t\t\torigin.x = position.x + bounding.width;\n\t\t\t\torigin.y = position.y + bounding.height;\n\t\t\t\torigin.screenX = bounding.right;\n\t\t\t\torigin.screenY = bounding.bottom;\n\t\t\t\torigin.invertX = true;\n\t\t\t\torigin.invertY = true;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.TOP_MIDDLE:\n\t\t\t\torigin.y = position.y + bounding.height;\n\t\t\t\torigin.screenY = bounding.bottom;\n\t\t\t\torigin.invertY = true;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.TOP_RIGHT:\n\t\t\t\torigin.x = position.x;\n\t\t\t\torigin.y = position.y + bounding.height;\n\t\t\t\torigin.screenX = bounding.left;\n\t\t\t\torigin.screenY = bounding.bottom;\n\t\t\t\torigin.invertY = true;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.MIDDLE_LEFT:\n\t\t\t\torigin.x = position.x + bounding.width;\n\t\t\t\torigin.screenX = bounding.right;\n\t\t\t\torigin.invertX = true;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.MIDDLE_RIGHT:\n\t\t\t\torigin.x = position.x;\n\t\t\t\torigin.screenX = bounding.left;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.BOTTOM_LEFT:\n\t\t\t\torigin.x = position.x + bounding.width;\n\t\t\t\torigin.y = position.y;\n\t\t\t\torigin.screenX = bounding.right;\n\t\t\t\torigin.screenY = bounding.top;\n\t\t\t\torigin.invertX = true;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.BOTTOM_MIDDLE:\n\t\t\t\torigin.y = position.y;\n\t\t\t\torigin.screenY = bounding.top;\n\t\t\t\tbreak;\n\n\t\t\tcase L.larva.frame.Path.BOTTOM_RIGHT:\n\t\t\t\torigin.x = position.x;\n\t\t\t\torigin.y = position.y;\n\t\t\t\torigin.screenY = bounding.top;\n\t\t\t\torigin.screenX = bounding.left;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tthis._frame\n\t\t\t.on('drag:move', this._onMove, this)\n\t\t\t.on('drag:end', this._onEnd, this);\n\t}\n\n});\n\nL.Polyline.addInitHook(function () {\n\tthis.larva.resize = new L.larva.handler.Polyline.Resize(this, L.larva.frame.Style.Resize);\n});"],"sourceRoot":"/source/"}