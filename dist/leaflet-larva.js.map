{"version":3,"sources":["L.larva.js","package.js","Path.js","Polyline.js","../PathFrame.js","../ext/L.Polyline.js","Polyline.Move.js"],"names":["L","larva","version","getHeight","el","offsetHeight","getWidth","offsetWidth","handler","Path","Handler","extend","includes","Evented","prototype","initialize","path","options","setOptions","_path","Polyline","PathFrame","Layer","pane","_pathFrame","beforeAdd","map","getPane","createPane","getEvents","zoom","_onZoom","getDraggable","_draggable","getPosition","DomUtil","_el","onAdd","create","DomEvent","on","stop","_elements","tl","tm","tr","ml","mm","mr","bl","bm","br","id","Draggable","_updateHandles","bounds","getBounds","southEastPoint","_map","latLngToLayerPoint","getSouthEast","northWestPoint","getNorthWest","computedStyle","getComputedStyle","setPosition","x","parseInt","borderLeftWidth","borderRightWidth","y","borderTopWidth","borderBottomWidth","style","width","height","right","bottom","left","top","widthOf","heightOf","borderWidth","pathFrame","pathframe","forEachLatLng","include","fn","context","latlngs","getLatLngs","length","Array","isArray","reduce","array","concat","forEach","Move","addHooks","_frame","addTo","drag","_onDrag","dragstart","_onDragStart","dragend","_onDragEnd","enable","offset","subtract","_layerProjectedPoint","projected","newLatLng","console","log","latlng","_original","layerPointToLatLng","add","lat","lng","setLatLngs","clone","addInitHook","move"],"mappings":"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","file":"leaflet-larva.js","sourcesContent":["L.larva = {\n\tversion: '0.1.0',\n\n\tgetHeight: function (el) {\n\t\treturn el.offsetHeight;\n\t},\n\n\tgetWidth: function (el) {\n\t\treturn el.offsetWidth;\n\t}\n};","L.larva.handler = {\n\n};","/**\n * @requires package.js\n * \n * Base class for Path handlers\n */\nL.larva.handler.Path = L.Handler.extend({\n\n\tincludes: [L.Evented.prototype],\n\n\tinitialize: function (path, options) {\n\t\tL.setOptions(this, options);\n\n\t\tthis._path = path;\n\t}\n\n});","/**\n * @requires Path.js\n */\nL.larva.handler.Polyline = L.larva.handler.Path.extend({\n\n\toptions: {\n\t\t\n\t}\n\n});","/**\n * \n */\nL.larva.PathFrame = L.Layer.extend({\n\n\toptions: {\n\t\tpane: 'llarvaPathframe'\n\t},\n\n\tinitialize: function (path) {\n\t\tif (path._pathFrame && path._pathFrame instanceof L.larva.PathFrame) {\n\t\t\treturn path._pathFrame;\n\t\t}\n\n\t\tpath._pathFrame = this;\n\t\tthis._path = path;\n\t},\n\n\tbeforeAdd: function (map) {\n\t\tif (!map.getPane(this.options.pane)) {\n\t\t\tmap.createPane(this.options.pane);\n\t\t}\n\t},\n\n\tgetEvents: function () {\n\t\treturn {\n\t\t\tzoom: this._onZoom\n\t\t};\n\t},\n\n\tgetDraggable: function () {\n\t\treturn this._draggable;\n\t},\n\n\tgetPosition: function() {\n\t\treturn L.DomUtil.getPosition(this._el);\n\t},\n\n\tonAdd: function () {\n\t\tvar el = this._el = L.DomUtil.create('div', 'llarva-pathframe', this.getPane());\n\t\tL.DomEvent.on(el, 'mousedown', L.DomEvent.stop);\n\n\t\tthis._elements = {\n\t\t\ttl: null, tm: null, tr: null,\n\t\t\tml: null, mm: null, mr: null,\n\t\t\tbl: null, bm: null, br: null\n\t\t};\n\n\t\tfor (var id in this._elements) {\n\t\t\tthis._elements[id] = L.DomUtil.create('div', 'llarva-pathframe-' + id + \" \" + id, el);\n\t\t}\n\n\t\tthis._draggable = new L.Draggable(el);\n\n\t\tthis._updateHandles();\n\n\t\tthis._onZoom();\n\t},\n\n\t_onZoom: function () {\n\t\tvar bounds = this._path.getBounds();\n\n\t\tvar southEastPoint = this._map.latLngToLayerPoint(bounds.getSouthEast()),\n\t\tnorthWestPoint = this._map.latLngToLayerPoint(bounds.getNorthWest());\n\n\t\tvar computedStyle = getComputedStyle(this._el);\n\n\t\tL.DomUtil.setPosition(this._el, northWestPoint);\n\n\n\t\tvar x = parseInt(computedStyle.borderLeftWidth) + parseInt(computedStyle.borderRightWidth),\n\t\ty = parseInt(computedStyle.borderTopWidth) + parseInt(computedStyle.borderBottomWidth);\n\n\t\tthis._el.style.width = (southEastPoint.x - northWestPoint.x - x) + 'px';\n\t\tthis._el.style.height = (southEastPoint.y - northWestPoint.y - y) + 'px';\n\n\t\tthis.southEastPoint = southEastPoint;\n\t\tthis.northWestPoint = northWestPoint;\n\t},\n\n\t_updateHandles: function () {\n\t\tvar el, computedStyle, right, bottom, left, top;\n\t\tvar widthOf = L.larva.getWidth, heightOf = L.larva.getHeight;\n\n\t\tcomputedStyle = getComputedStyle(this._el);\n\n\t\tvar borderWidth = {\n\t\t\tbottom: 'borderBottomWidth',\n\t\t\tleft: 'borderLeftWidth',\n\t\t\tright: 'borderRightWidth',\n\t\t\ttop: 'borderTopWidth'\n\t\t};\n\n\t\tfor (var id in borderWidth) {\n\t\t\tborderWidth[id] = parseInt(computedStyle[borderWidth[id]]) / 2;\n\t\t}\n\n\t\tel = this._elements.br;\n\n\t\tright = (- (widthOf(el) / 2) - borderWidth.right) + 'px';\n\t\tbottom = (- (heightOf(el) / 2) - borderWidth.bottom) + 'px';\n\n\t\tL.extend(el.style, {\n\t\t\tright: right,\n\t\t\tbottom: bottom\n\t\t});\n\n\t\tel = this._elements.bm;\n\t\tleft = (-(widthOf(el) / 2)) + 'px';\n\t\tbottom = (- (heightOf(el) / 2) - borderWidth.bottom) + 'px';\n\n\t\tL.extend(el.style, {\n\t\t\tleft: '50%',\n\t\t\t'margin-left': left,\n\t\t\tbottom: bottom\n\t\t});\n\n\t\tel = this._elements.bl;\n\t\tleft = (-(widthOf(el) / 2) - borderWidth.left) + 'px';\n\t\tbottom = (- (heightOf(el) / 2) - borderWidth.bottom) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tleft: left,\n\t\t\tbottom: bottom\n\t\t});\n\n\t\tel = this._elements.mm;\n\t\tleft = -(widthOf(el) / 2) + 'px';\n\t\ttop = -(heightOf(el) / 2) + 'px';\n\t\tL.extend(el.style, {\n\t\t\ttop: '50%',\n\t\t\tleft: '50%',\n\t\t\t'margin-left': left,\n\t\t\t'margin-top': top\n\t\t});\n\n\t\tel = this._elements.ml;\n\t\ttop = -(heightOf(el) / 2) + 'px';\n\t\tleft = (-(widthOf(el) / 2) - borderWidth.left) + 'px';\n\t\tL.extend(el.style, {\n\t\t\ttop: '50%',\n\t\t\t'margin-top': top,\n\t\t\tleft: left\n\t\t});\n\n\t\tel = this._elements.mr;\n\t\tright = (- (widthOf(el) / 2) - borderWidth.right) + 'px';\n\t\ttop = -(heightOf(el) / 2) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tright: right,\n\t\t\ttop: '50%',\n\t\t\t'margin-top': top\n\t\t});\n\n\t\tel = this._elements.tr;\n\t\tright = (-(widthOf(el) / 2) - borderWidth.right) + 'px';\n\t\ttop = (-(heightOf(el) / 2) - borderWidth.top) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tright: right,\n\t\t\ttop: top\n\t\t});\n\n\t\tel = this._elements.tm;\n\t\ttop = (-(heightOf(el) / 2) - borderWidth.top) + 'px';\n\t\tleft = -(widthOf(el) / 2) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tleft: '50%',\n\t\t\t'margin-left': left,\n\t\t\ttop: top\n\t\t});\n\n\t\tel = this._elements.tl;\n\t\ttop = (-(heightOf(el) / 2) - borderWidth.top) + 'px';\n\t\tleft = (-(widthOf(el) / 2) - borderWidth.left) + 'px';\n\t\tL.extend(el.style, {\n\t\t\tleft: left,\n\t\t\ttop: top\n\t\t});\n\t}\n});\n\nL.larva.pathFrame = function pathframe (path) {\n\treturn new L.larva.PathFrame(path);\n};","if (!L.Polyline.prototype.forEachLatLng) {\n\tL.Polyline.include({\n\n\t\tforEachLatLng: function (fn, context) {\n\t\t\tvar latlngs = this.getLatLngs();\n\n\t\t\tif (!latlngs.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (Array.isArray(latlngs[0])) {\n\t\t\t\t// nested array\n\n\t\t\t\tlatlngs = latlngs.reduce(function (array, latlngs) {\n\t\t\t\t\treturn array.concat(latlngs);\n\t\t\t\t}, []);\n\t\t\t}\n\n\t\t\tlatlngs.forEach(fn, context);\n\t\t}\n\n\t});\n}","/**\n * @requires Polyline.js\n * @requires ../PathFrame.js\n * @requires ../ext/L.Polyline.js\n * \n * @type {[type]}\n */\nL.larva.handler.Polyline.Move = L.larva.handler.Polyline.extend({\n\n\taddHooks: function() {\n\t\tthis._frame = new L.larva.PathFrame(this._path).addTo(this._path._map);\n\t\tthis._draggable = this._frame.getDraggable();\n\n\t\tthis._draggable.on({\n\t\t\tdrag: this._onDrag,\n\t\t\tdragstart: this._onDragStart,\n\t\t\tdragend: this._onDragEnd,\n\t\t}, this);\n\n\t\tthis._draggable.enable();\n\t},\n\n\t_onDrag: function () {\n\t\tvar map = this._path._map;\n\t\tvar offset = this._frame.getPosition().subtract(this._layerProjectedPoint);\n\t\tvar projected, newLatLng;\n\n\t\tconsole.log(offset);\n\n\t\tthis._path.forEachLatLng(function (latlng) {\n\n\t\t\tprojected = map.latLngToLayerPoint(latlng._original);\n\t\t\tnewLatLng = map.layerPointToLatLng(projected.add(offset));\n\t\t\tlatlng.lat = newLatLng.lat;\n\t\t\tlatlng.lng = newLatLng.lng;\n\t\t});\n\n\t\tthis._path.setLatLngs(this._path.getLatLngs());\n\t},\n\n\t_onDragEnd: function () {\n\n\t},\n\n\t_onDragStart: function () {\n\t\tthis._layerProjectedPoint = this._path._map.latLngToLayerPoint(this._path.getBounds().getNorthWest());\n\t\tthis._path.forEachLatLng(function (latlng) {\n\t\t\tlatlng._original = latlng.clone();\n\t\t});\n\t}\n\n});\n\nL.Polyline.addInitHook(function () {\n\n\tif (!this.larva) {\n\t\tthis.larva = {};\n\t}\n\n\tthis.larva.move = new L.larva.handler.Polyline.Move(this);\n\n});"],"sourceRoot":"/source/"}